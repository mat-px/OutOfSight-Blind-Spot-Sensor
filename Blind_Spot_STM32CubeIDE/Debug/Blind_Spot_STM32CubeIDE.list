
Blind_Spot_STM32CubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b54  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08003c14  08003c14  00013c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cc8  08003cc8  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08003cc8  08003cc8  00013cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cd0  08003cd0  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cd0  08003cd0  00013cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cd4  08003cd4  00013cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08003cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000002c  08003d04  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08003d04  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b76d  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bd0  00000000  00000000  0002b7c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000918  00000000  00000000  0002d398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000870  00000000  00000000  0002dcb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000109a6  00000000  00000000  0002e520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be00  00000000  00000000  0003eec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00063804  00000000  00000000  0004acc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ae4ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ff4  00000000  00000000  000ae51c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000002c 	.word	0x2000002c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003bfc 	.word	0x08003bfc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000030 	.word	0x20000030
 8000104:	08003bfc 	.word	0x08003bfc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f834 	bl	80002cc <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46ce      	mov	lr, r9
 8000274:	4647      	mov	r7, r8
 8000276:	b580      	push	{r7, lr}
 8000278:	0007      	movs	r7, r0
 800027a:	4699      	mov	r9, r3
 800027c:	0c3b      	lsrs	r3, r7, #16
 800027e:	469c      	mov	ip, r3
 8000280:	0413      	lsls	r3, r2, #16
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0400      	lsls	r0, r0, #16
 800028c:	0c14      	lsrs	r4, r2, #16
 800028e:	0c00      	lsrs	r0, r0, #16
 8000290:	4345      	muls	r5, r0
 8000292:	434b      	muls	r3, r1
 8000294:	4360      	muls	r0, r4
 8000296:	4361      	muls	r1, r4
 8000298:	18c0      	adds	r0, r0, r3
 800029a:	0c2c      	lsrs	r4, r5, #16
 800029c:	1820      	adds	r0, r4, r0
 800029e:	468c      	mov	ip, r1
 80002a0:	4283      	cmp	r3, r0
 80002a2:	d903      	bls.n	80002ac <__aeabi_lmul+0x3c>
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	025b      	lsls	r3, r3, #9
 80002a8:	4698      	mov	r8, r3
 80002aa:	44c4      	add	ip, r8
 80002ac:	4649      	mov	r1, r9
 80002ae:	4379      	muls	r1, r7
 80002b0:	4372      	muls	r2, r6
 80002b2:	0c03      	lsrs	r3, r0, #16
 80002b4:	4463      	add	r3, ip
 80002b6:	042d      	lsls	r5, r5, #16
 80002b8:	0c2d      	lsrs	r5, r5, #16
 80002ba:	18c9      	adds	r1, r1, r3
 80002bc:	0400      	lsls	r0, r0, #16
 80002be:	1940      	adds	r0, r0, r5
 80002c0:	1889      	adds	r1, r1, r2
 80002c2:	bcc0      	pop	{r6, r7}
 80002c4:	46b9      	mov	r9, r7
 80002c6:	46b0      	mov	r8, r6
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)

080002cc <__udivmoddi4>:
 80002cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ce:	4657      	mov	r7, sl
 80002d0:	464e      	mov	r6, r9
 80002d2:	4645      	mov	r5, r8
 80002d4:	46de      	mov	lr, fp
 80002d6:	b5e0      	push	{r5, r6, r7, lr}
 80002d8:	0004      	movs	r4, r0
 80002da:	000d      	movs	r5, r1
 80002dc:	4692      	mov	sl, r2
 80002de:	4699      	mov	r9, r3
 80002e0:	b083      	sub	sp, #12
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d830      	bhi.n	8000348 <__udivmoddi4+0x7c>
 80002e6:	d02d      	beq.n	8000344 <__udivmoddi4+0x78>
 80002e8:	4649      	mov	r1, r9
 80002ea:	4650      	mov	r0, sl
 80002ec:	f000 f8ba 	bl	8000464 <__clzdi2>
 80002f0:	0029      	movs	r1, r5
 80002f2:	0006      	movs	r6, r0
 80002f4:	0020      	movs	r0, r4
 80002f6:	f000 f8b5 	bl	8000464 <__clzdi2>
 80002fa:	1a33      	subs	r3, r6, r0
 80002fc:	4698      	mov	r8, r3
 80002fe:	3b20      	subs	r3, #32
 8000300:	469b      	mov	fp, r3
 8000302:	d433      	bmi.n	800036c <__udivmoddi4+0xa0>
 8000304:	465a      	mov	r2, fp
 8000306:	4653      	mov	r3, sl
 8000308:	4093      	lsls	r3, r2
 800030a:	4642      	mov	r2, r8
 800030c:	001f      	movs	r7, r3
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	001e      	movs	r6, r3
 8000314:	42af      	cmp	r7, r5
 8000316:	d83a      	bhi.n	800038e <__udivmoddi4+0xc2>
 8000318:	42af      	cmp	r7, r5
 800031a:	d100      	bne.n	800031e <__udivmoddi4+0x52>
 800031c:	e078      	b.n	8000410 <__udivmoddi4+0x144>
 800031e:	465b      	mov	r3, fp
 8000320:	1ba4      	subs	r4, r4, r6
 8000322:	41bd      	sbcs	r5, r7
 8000324:	2b00      	cmp	r3, #0
 8000326:	da00      	bge.n	800032a <__udivmoddi4+0x5e>
 8000328:	e075      	b.n	8000416 <__udivmoddi4+0x14a>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	465a      	mov	r2, fp
 8000336:	4093      	lsls	r3, r2
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	4642      	mov	r2, r8
 800033e:	4093      	lsls	r3, r2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	e028      	b.n	8000396 <__udivmoddi4+0xca>
 8000344:	4282      	cmp	r2, r0
 8000346:	d9cf      	bls.n	80002e8 <__udivmoddi4+0x1c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <__udivmoddi4+0x8e>
 8000356:	601c      	str	r4, [r3, #0]
 8000358:	605d      	str	r5, [r3, #4]
 800035a:	9800      	ldr	r0, [sp, #0]
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	b003      	add	sp, #12
 8000360:	bcf0      	pop	{r4, r5, r6, r7}
 8000362:	46bb      	mov	fp, r7
 8000364:	46b2      	mov	sl, r6
 8000366:	46a9      	mov	r9, r5
 8000368:	46a0      	mov	r8, r4
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	4642      	mov	r2, r8
 800036e:	2320      	movs	r3, #32
 8000370:	1a9b      	subs	r3, r3, r2
 8000372:	4652      	mov	r2, sl
 8000374:	40da      	lsrs	r2, r3
 8000376:	4641      	mov	r1, r8
 8000378:	0013      	movs	r3, r2
 800037a:	464a      	mov	r2, r9
 800037c:	408a      	lsls	r2, r1
 800037e:	0017      	movs	r7, r2
 8000380:	4642      	mov	r2, r8
 8000382:	431f      	orrs	r7, r3
 8000384:	4653      	mov	r3, sl
 8000386:	4093      	lsls	r3, r2
 8000388:	001e      	movs	r6, r3
 800038a:	42af      	cmp	r7, r5
 800038c:	d9c4      	bls.n	8000318 <__udivmoddi4+0x4c>
 800038e:	2200      	movs	r2, #0
 8000390:	2300      	movs	r3, #0
 8000392:	9200      	str	r2, [sp, #0]
 8000394:	9301      	str	r3, [sp, #4]
 8000396:	4643      	mov	r3, r8
 8000398:	2b00      	cmp	r3, #0
 800039a:	d0d9      	beq.n	8000350 <__udivmoddi4+0x84>
 800039c:	07fb      	lsls	r3, r7, #31
 800039e:	0872      	lsrs	r2, r6, #1
 80003a0:	431a      	orrs	r2, r3
 80003a2:	4646      	mov	r6, r8
 80003a4:	087b      	lsrs	r3, r7, #1
 80003a6:	e00e      	b.n	80003c6 <__udivmoddi4+0xfa>
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	d101      	bne.n	80003b0 <__udivmoddi4+0xe4>
 80003ac:	42a2      	cmp	r2, r4
 80003ae:	d80c      	bhi.n	80003ca <__udivmoddi4+0xfe>
 80003b0:	1aa4      	subs	r4, r4, r2
 80003b2:	419d      	sbcs	r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	1924      	adds	r4, r4, r4
 80003b8:	416d      	adcs	r5, r5
 80003ba:	2100      	movs	r1, #0
 80003bc:	3e01      	subs	r6, #1
 80003be:	1824      	adds	r4, r4, r0
 80003c0:	414d      	adcs	r5, r1
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d006      	beq.n	80003d4 <__udivmoddi4+0x108>
 80003c6:	42ab      	cmp	r3, r5
 80003c8:	d9ee      	bls.n	80003a8 <__udivmoddi4+0xdc>
 80003ca:	3e01      	subs	r6, #1
 80003cc:	1924      	adds	r4, r4, r4
 80003ce:	416d      	adcs	r5, r5
 80003d0:	2e00      	cmp	r6, #0
 80003d2:	d1f8      	bne.n	80003c6 <__udivmoddi4+0xfa>
 80003d4:	9800      	ldr	r0, [sp, #0]
 80003d6:	9901      	ldr	r1, [sp, #4]
 80003d8:	465b      	mov	r3, fp
 80003da:	1900      	adds	r0, r0, r4
 80003dc:	4169      	adcs	r1, r5
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db24      	blt.n	800042c <__udivmoddi4+0x160>
 80003e2:	002b      	movs	r3, r5
 80003e4:	465a      	mov	r2, fp
 80003e6:	4644      	mov	r4, r8
 80003e8:	40d3      	lsrs	r3, r2
 80003ea:	002a      	movs	r2, r5
 80003ec:	40e2      	lsrs	r2, r4
 80003ee:	001c      	movs	r4, r3
 80003f0:	465b      	mov	r3, fp
 80003f2:	0015      	movs	r5, r2
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	db2a      	blt.n	800044e <__udivmoddi4+0x182>
 80003f8:	0026      	movs	r6, r4
 80003fa:	409e      	lsls	r6, r3
 80003fc:	0033      	movs	r3, r6
 80003fe:	0026      	movs	r6, r4
 8000400:	4647      	mov	r7, r8
 8000402:	40be      	lsls	r6, r7
 8000404:	0032      	movs	r2, r6
 8000406:	1a80      	subs	r0, r0, r2
 8000408:	4199      	sbcs	r1, r3
 800040a:	9000      	str	r0, [sp, #0]
 800040c:	9101      	str	r1, [sp, #4]
 800040e:	e79f      	b.n	8000350 <__udivmoddi4+0x84>
 8000410:	42a3      	cmp	r3, r4
 8000412:	d8bc      	bhi.n	800038e <__udivmoddi4+0xc2>
 8000414:	e783      	b.n	800031e <__udivmoddi4+0x52>
 8000416:	4642      	mov	r2, r8
 8000418:	2320      	movs	r3, #32
 800041a:	2100      	movs	r1, #0
 800041c:	1a9b      	subs	r3, r3, r2
 800041e:	2200      	movs	r2, #0
 8000420:	9100      	str	r1, [sp, #0]
 8000422:	9201      	str	r2, [sp, #4]
 8000424:	2201      	movs	r2, #1
 8000426:	40da      	lsrs	r2, r3
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	e786      	b.n	800033a <__udivmoddi4+0x6e>
 800042c:	4642      	mov	r2, r8
 800042e:	2320      	movs	r3, #32
 8000430:	1a9b      	subs	r3, r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	4646      	mov	r6, r8
 8000436:	409a      	lsls	r2, r3
 8000438:	0023      	movs	r3, r4
 800043a:	40f3      	lsrs	r3, r6
 800043c:	4644      	mov	r4, r8
 800043e:	4313      	orrs	r3, r2
 8000440:	002a      	movs	r2, r5
 8000442:	40e2      	lsrs	r2, r4
 8000444:	001c      	movs	r4, r3
 8000446:	465b      	mov	r3, fp
 8000448:	0015      	movs	r5, r2
 800044a:	2b00      	cmp	r3, #0
 800044c:	dad4      	bge.n	80003f8 <__udivmoddi4+0x12c>
 800044e:	4642      	mov	r2, r8
 8000450:	002f      	movs	r7, r5
 8000452:	2320      	movs	r3, #32
 8000454:	0026      	movs	r6, r4
 8000456:	4097      	lsls	r7, r2
 8000458:	1a9b      	subs	r3, r3, r2
 800045a:	40de      	lsrs	r6, r3
 800045c:	003b      	movs	r3, r7
 800045e:	4333      	orrs	r3, r6
 8000460:	e7cd      	b.n	80003fe <__udivmoddi4+0x132>
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__clzdi2>:
 8000464:	b510      	push	{r4, lr}
 8000466:	2900      	cmp	r1, #0
 8000468:	d103      	bne.n	8000472 <__clzdi2+0xe>
 800046a:	f000 f807 	bl	800047c <__clzsi2>
 800046e:	3020      	adds	r0, #32
 8000470:	e002      	b.n	8000478 <__clzdi2+0x14>
 8000472:	0008      	movs	r0, r1
 8000474:	f000 f802 	bl	800047c <__clzsi2>
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__clzsi2>:
 800047c:	211c      	movs	r1, #28
 800047e:	2301      	movs	r3, #1
 8000480:	041b      	lsls	r3, r3, #16
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0xe>
 8000486:	0c00      	lsrs	r0, r0, #16
 8000488:	3910      	subs	r1, #16
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	4298      	cmp	r0, r3
 800048e:	d301      	bcc.n	8000494 <__clzsi2+0x18>
 8000490:	0a00      	lsrs	r0, r0, #8
 8000492:	3908      	subs	r1, #8
 8000494:	091b      	lsrs	r3, r3, #4
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0x22>
 800049a:	0900      	lsrs	r0, r0, #4
 800049c:	3904      	subs	r1, #4
 800049e:	a202      	add	r2, pc, #8	; (adr r2, 80004a8 <__clzsi2+0x2c>)
 80004a0:	5c10      	ldrb	r0, [r2, r0]
 80004a2:	1840      	adds	r0, r0, r1
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	02020304 	.word	0x02020304
 80004ac:	01010101 	.word	0x01010101
	...

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b5b0      	push	{r4, r5, r7, lr}
 80004ba:	b08a      	sub	sp, #40	; 0x28
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f000 fc95 	bl	8000dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f8bd 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f000 f98f 	bl	80007e8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004ca:	f000 f925 	bl	8000718 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80004ce:	f000 f95b 	bl	8000788 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80004d2:	2200      	movs	r2, #0
 80004d4:	2100      	movs	r1, #0
 80004d6:	201c      	movs	r0, #28
 80004d8:	f000 fdc8 	bl	800106c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80004dc:	201c      	movs	r0, #28
 80004de:	f000 fdda 	bl	8001096 <HAL_NVIC_EnableIRQ>
   __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80004e2:	4b51      	ldr	r3, [pc, #324]	; (8000628 <main+0x170>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	4b4f      	ldr	r3, [pc, #316]	; (8000628 <main+0x170>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2120      	movs	r1, #32
 80004ee:	430a      	orrs	r2, r1
 80004f0:	601a      	str	r2, [r3, #0]

  lidar_init();
 80004f2:	f000 fa95 	bl	8000a20 <lidar_init>
  HAL_Delay(1000);
 80004f6:	23fa      	movs	r3, #250	; 0xfa
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	0018      	movs	r0, r3
 80004fc:	f000 fce6 	bl	8000ecc <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(start_byte_detected == 0){
 8000500:	4b4a      	ldr	r3, [pc, #296]	; (800062c <main+0x174>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d14f      	bne.n	80005a8 <main+0xf0>
//		  memset(rx_buffer, 0, RX_BUFFER_SIZE); // Reset the rx_buffer with 0s
		  HAL_UART_Receive(&huart2, (uint8_t*)&rx_buffer[0], 1, 1000); // Receive a single byte in blocking
 8000508:	23fa      	movs	r3, #250	; 0xfa
 800050a:	009b      	lsls	r3, r3, #2
 800050c:	4948      	ldr	r1, [pc, #288]	; (8000630 <main+0x178>)
 800050e:	4846      	ldr	r0, [pc, #280]	; (8000628 <main+0x170>)
 8000510:	2201      	movs	r2, #1
 8000512:	f002 f835 	bl	8002580 <HAL_UART_Receive>

		  char msg[] = "\n\rChecking byte: ";
 8000516:	2010      	movs	r0, #16
 8000518:	183b      	adds	r3, r7, r0
 800051a:	4a46      	ldr	r2, [pc, #280]	; (8000634 <main+0x17c>)
 800051c:	ca32      	ldmia	r2!, {r1, r4, r5}
 800051e:	c332      	stmia	r3!, {r1, r4, r5}
 8000520:	6811      	ldr	r1, [r2, #0]
 8000522:	6019      	str	r1, [r3, #0]
 8000524:	8892      	ldrh	r2, [r2, #4]
 8000526:	809a      	strh	r2, [r3, #4]
		  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000528:	0004      	movs	r4, r0
 800052a:	183b      	adds	r3, r7, r0
 800052c:	0018      	movs	r0, r3
 800052e:	f7ff fdeb 	bl	8000108 <strlen>
 8000532:	0003      	movs	r3, r0
 8000534:	b29a      	uxth	r2, r3
 8000536:	2301      	movs	r3, #1
 8000538:	425b      	negs	r3, r3
 800053a:	1939      	adds	r1, r7, r4
 800053c:	483a      	ldr	r0, [pc, #232]	; (8000628 <main+0x170>)
 800053e:	f001 ff77 	bl	8002430 <HAL_UART_Transmit>

		  // Send the byte to serial terminal
		  HAL_UART_Transmit(&huart2, (uint8_t*)&rx_buffer[0], sizeof(rx_buffer[0]), HAL_MAX_DELAY);
 8000542:	2301      	movs	r3, #1
 8000544:	425b      	negs	r3, r3
 8000546:	493a      	ldr	r1, [pc, #232]	; (8000630 <main+0x178>)
 8000548:	4837      	ldr	r0, [pc, #220]	; (8000628 <main+0x170>)
 800054a:	2201      	movs	r2, #1
 800054c:	f001 ff70 	bl	8002430 <HAL_UART_Transmit>

		  // Send the entire rx_buffer to serial terminal
		  data_to_hex_str(rx_buffer, sizeof(rx_buffer), hex_str);
 8000550:	4a39      	ldr	r2, [pc, #228]	; (8000638 <main+0x180>)
 8000552:	4b37      	ldr	r3, [pc, #220]	; (8000630 <main+0x178>)
 8000554:	2109      	movs	r1, #9
 8000556:	0018      	movs	r0, r3
 8000558:	f000 f9f6 	bl	8000948 <data_to_hex_str>
		  HAL_UART_Transmit(&huart2, (uint8_t*)hex_str, 2 * RX_BUFFER_SIZE, 100);
 800055c:	2309      	movs	r3, #9
 800055e:	b29b      	uxth	r3, r3
 8000560:	18db      	adds	r3, r3, r3
 8000562:	b29a      	uxth	r2, r3
 8000564:	4934      	ldr	r1, [pc, #208]	; (8000638 <main+0x180>)
 8000566:	4830      	ldr	r0, [pc, #192]	; (8000628 <main+0x170>)
 8000568:	2364      	movs	r3, #100	; 0x64
 800056a:	f001 ff61 	bl	8002430 <HAL_UART_Transmit>

		  // Checks if the byte received is 0x59
		  if(rx_buffer[0] == 0x59){
 800056e:	4b30      	ldr	r3, [pc, #192]	; (8000630 <main+0x178>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b59      	cmp	r3, #89	; 0x59
 8000574:	d1c4      	bne.n	8000500 <main+0x48>
				  // Turn on LED for a second
				  HAL_GPIO_WritePin(LED_OUT_GPIO_Port, LED_OUT_Pin, GPIO_PIN_SET);
 8000576:	2380      	movs	r3, #128	; 0x80
 8000578:	01d9      	lsls	r1, r3, #7
 800057a:	23a0      	movs	r3, #160	; 0xa0
 800057c:	05db      	lsls	r3, r3, #23
 800057e:	2201      	movs	r2, #1
 8000580:	0018      	movs	r0, r3
 8000582:	f000 ff93 	bl	80014ac <HAL_GPIO_WritePin>
				  HAL_Delay(1000);
 8000586:	23fa      	movs	r3, #250	; 0xfa
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	0018      	movs	r0, r3
 800058c:	f000 fc9e 	bl	8000ecc <HAL_Delay>
				  HAL_GPIO_WritePin(LED_OUT_GPIO_Port, LED_OUT_Pin, GPIO_PIN_RESET);
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	01d9      	lsls	r1, r3, #7
 8000594:	23a0      	movs	r3, #160	; 0xa0
 8000596:	05db      	lsls	r3, r3, #23
 8000598:	2200      	movs	r2, #0
 800059a:	0018      	movs	r0, r3
 800059c:	f000 ff86 	bl	80014ac <HAL_GPIO_WritePin>
				  start_byte_detected = 1; // Set the flag for start byte being found
 80005a0:	4b22      	ldr	r3, [pc, #136]	; (800062c <main+0x174>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	701a      	strb	r2, [r3, #0]
 80005a6:	e7ab      	b.n	8000500 <main+0x48>
			  }
	  } else {
		  // Receive the remaining 8 bytes
		  for(int i = 1; i < RX_BUFFER_SIZE; i++){
 80005a8:	2301      	movs	r3, #1
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24
 80005ac:	e00a      	b.n	80005c4 <main+0x10c>
				  HAL_UART_Receive(&huart2, &rx_buffer[i], 1, 100);
 80005ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005b0:	4b1f      	ldr	r3, [pc, #124]	; (8000630 <main+0x178>)
 80005b2:	18d1      	adds	r1, r2, r3
 80005b4:	481c      	ldr	r0, [pc, #112]	; (8000628 <main+0x170>)
 80005b6:	2364      	movs	r3, #100	; 0x64
 80005b8:	2201      	movs	r2, #1
 80005ba:	f001 ffe1 	bl	8002580 <HAL_UART_Receive>
		  for(int i = 1; i < RX_BUFFER_SIZE; i++){
 80005be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005c0:	3301      	adds	r3, #1
 80005c2:	627b      	str	r3, [r7, #36]	; 0x24
 80005c4:	2209      	movs	r2, #9
 80005c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005c8:	4293      	cmp	r3, r2
 80005ca:	dbf0      	blt.n	80005ae <main+0xf6>
			  }

		  // Send the rx_buffer to serial terminal
		  char msg0[] = "\n\rReceived: ";
 80005cc:	003b      	movs	r3, r7
 80005ce:	4a1b      	ldr	r2, [pc, #108]	; (800063c <main+0x184>)
 80005d0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80005d2:	c313      	stmia	r3!, {r0, r1, r4}
 80005d4:	7812      	ldrb	r2, [r2, #0]
 80005d6:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t*)msg0, strlen(msg0), HAL_MAX_DELAY);
 80005d8:	003b      	movs	r3, r7
 80005da:	0018      	movs	r0, r3
 80005dc:	f7ff fd94 	bl	8000108 <strlen>
 80005e0:	0003      	movs	r3, r0
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	2301      	movs	r3, #1
 80005e6:	425b      	negs	r3, r3
 80005e8:	0039      	movs	r1, r7
 80005ea:	480f      	ldr	r0, [pc, #60]	; (8000628 <main+0x170>)
 80005ec:	f001 ff20 	bl	8002430 <HAL_UART_Transmit>
		  data_to_hex_str(rx_buffer, RX_BUFFER_SIZE, hex_str);
 80005f0:	2309      	movs	r3, #9
 80005f2:	b2d9      	uxtb	r1, r3
 80005f4:	4a10      	ldr	r2, [pc, #64]	; (8000638 <main+0x180>)
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <main+0x178>)
 80005f8:	0018      	movs	r0, r3
 80005fa:	f000 f9a5 	bl	8000948 <data_to_hex_str>
		  HAL_UART_Transmit(&huart2, (uint8_t*)hex_str, strlen(hex_str), 100);
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <main+0x180>)
 8000600:	0018      	movs	r0, r3
 8000602:	f7ff fd81 	bl	8000108 <strlen>
 8000606:	0003      	movs	r3, r0
 8000608:	b29a      	uxth	r2, r3
 800060a:	490b      	ldr	r1, [pc, #44]	; (8000638 <main+0x180>)
 800060c:	4806      	ldr	r0, [pc, #24]	; (8000628 <main+0x170>)
 800060e:	2364      	movs	r3, #100	; 0x64
 8000610:	f001 ff0e 	bl	8002430 <HAL_UART_Transmit>
		  HAL_Delay(500);
 8000614:	23fa      	movs	r3, #250	; 0xfa
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	0018      	movs	r0, r3
 800061a:	f000 fc57 	bl	8000ecc <HAL_Delay>
		  start_byte_detected = 0;
 800061e:	4b03      	ldr	r3, [pc, #12]	; (800062c <main+0x174>)
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
	if(start_byte_detected == 0){
 8000624:	e76c      	b.n	8000500 <main+0x48>
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	200000a0 	.word	0x200000a0
 800062c:	20000139 	.word	0x20000139
 8000630:	20000130 	.word	0x20000130
 8000634:	08003c14 	.word	0x08003c14
 8000638:	20000124 	.word	0x20000124
 800063c:	08003c28 	.word	0x08003c28

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b590      	push	{r4, r7, lr}
 8000642:	b099      	sub	sp, #100	; 0x64
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	242c      	movs	r4, #44	; 0x2c
 8000648:	193b      	adds	r3, r7, r4
 800064a:	0018      	movs	r0, r3
 800064c:	2334      	movs	r3, #52	; 0x34
 800064e:	001a      	movs	r2, r3
 8000650:	2100      	movs	r1, #0
 8000652:	f003 facb 	bl	8003bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000656:	2318      	movs	r3, #24
 8000658:	18fb      	adds	r3, r7, r3
 800065a:	0018      	movs	r0, r3
 800065c:	2314      	movs	r3, #20
 800065e:	001a      	movs	r2, r3
 8000660:	2100      	movs	r1, #0
 8000662:	f003 fac3 	bl	8003bec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000666:	003b      	movs	r3, r7
 8000668:	0018      	movs	r0, r3
 800066a:	2318      	movs	r3, #24
 800066c:	001a      	movs	r2, r3
 800066e:	2100      	movs	r1, #0
 8000670:	f003 fabc 	bl	8003bec <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000674:	4b26      	ldr	r3, [pc, #152]	; (8000710 <SystemClock_Config+0xd0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a26      	ldr	r2, [pc, #152]	; (8000714 <SystemClock_Config+0xd4>)
 800067a:	401a      	ands	r2, r3
 800067c:	4b24      	ldr	r3, [pc, #144]	; (8000710 <SystemClock_Config+0xd0>)
 800067e:	2180      	movs	r1, #128	; 0x80
 8000680:	0109      	lsls	r1, r1, #4
 8000682:	430a      	orrs	r2, r1
 8000684:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000686:	0021      	movs	r1, r4
 8000688:	187b      	adds	r3, r7, r1
 800068a:	2210      	movs	r2, #16
 800068c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800068e:	187b      	adds	r3, r7, r1
 8000690:	2201      	movs	r2, #1
 8000692:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	22a0      	movs	r2, #160	; 0xa0
 800069e:	0212      	lsls	r2, r2, #8
 80006a0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2200      	movs	r2, #0
 80006a6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	0018      	movs	r0, r3
 80006ac:	f000 ff1c 	bl	80014e8 <HAL_RCC_OscConfig>
 80006b0:	1e03      	subs	r3, r0, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80006b4:	f000 fa6e 	bl	8000b94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b8:	2118      	movs	r1, #24
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	220f      	movs	r2, #15
 80006be:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2200      	movs	r2, #0
 80006c4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2100      	movs	r1, #0
 80006dc:	0018      	movs	r0, r3
 80006de:	f001 fa7f 	bl	8001be0 <HAL_RCC_ClockConfig>
 80006e2:	1e03      	subs	r3, r0, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006e6:	f000 fa55 	bl	8000b94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006ea:	003b      	movs	r3, r7
 80006ec:	2202      	movs	r2, #2
 80006ee:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006f0:	003b      	movs	r3, r7
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f6:	003b      	movs	r3, r7
 80006f8:	0018      	movs	r0, r3
 80006fa:	f001 fc95 	bl	8002028 <HAL_RCCEx_PeriphCLKConfig>
 80006fe:	1e03      	subs	r3, r0, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000702:	f000 fa47 	bl	8000b94 <Error_Handler>
  }
}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	46bd      	mov	sp, r7
 800070a:	b019      	add	sp, #100	; 0x64
 800070c:	bd90      	pop	{r4, r7, pc}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	40007000 	.word	0x40007000
 8000714:	ffffe7ff 	.word	0xffffe7ff

08000718 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800071c:	4b18      	ldr	r3, [pc, #96]	; (8000780 <MX_SPI1_Init+0x68>)
 800071e:	4a19      	ldr	r2, [pc, #100]	; (8000784 <MX_SPI1_Init+0x6c>)
 8000720:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <MX_SPI1_Init+0x68>)
 8000724:	2282      	movs	r2, #130	; 0x82
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <MX_SPI1_Init+0x68>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000730:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_SPI1_Init+0x68>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000736:	4b12      	ldr	r3, [pc, #72]	; (8000780 <MX_SPI1_Init+0x68>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800073c:	4b10      	ldr	r3, [pc, #64]	; (8000780 <MX_SPI1_Init+0x68>)
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000742:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_SPI1_Init+0x68>)
 8000744:	2280      	movs	r2, #128	; 0x80
 8000746:	0092      	lsls	r2, r2, #2
 8000748:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <MX_SPI1_Init+0x68>)
 800074c:	2200      	movs	r2, #0
 800074e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000750:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_SPI1_Init+0x68>)
 8000752:	2200      	movs	r2, #0
 8000754:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000756:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <MX_SPI1_Init+0x68>)
 8000758:	2200      	movs	r2, #0
 800075a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800075c:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_SPI1_Init+0x68>)
 800075e:	2200      	movs	r2, #0
 8000760:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000762:	4b07      	ldr	r3, [pc, #28]	; (8000780 <MX_SPI1_Init+0x68>)
 8000764:	2207      	movs	r2, #7
 8000766:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <MX_SPI1_Init+0x68>)
 800076a:	0018      	movs	r0, r3
 800076c:	f001 fd82 	bl	8002274 <HAL_SPI_Init>
 8000770:	1e03      	subs	r3, r0, #0
 8000772:	d001      	beq.n	8000778 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000774:	f000 fa0e 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	20000048 	.word	0x20000048
 8000784:	40013000 	.word	0x40013000

08000788 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 800078e:	4a15      	ldr	r2, [pc, #84]	; (80007e4 <MX_USART2_UART_Init+0x5c>)
 8000790:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 8000794:	2296      	movs	r2, #150	; 0x96
 8000796:	0192      	lsls	r2, r2, #6
 8000798:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ca:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007cc:	0018      	movs	r0, r3
 80007ce:	f001 fddb 	bl	8002388 <HAL_UART_Init>
 80007d2:	1e03      	subs	r3, r0, #0
 80007d4:	d001      	beq.n	80007da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007d6:	f000 f9dd 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	200000a0 	.word	0x200000a0
 80007e4:	40004400 	.word	0x40004400

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b590      	push	{r4, r7, lr}
 80007ea:	b089      	sub	sp, #36	; 0x24
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	240c      	movs	r4, #12
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	0018      	movs	r0, r3
 80007f4:	2314      	movs	r3, #20
 80007f6:	001a      	movs	r2, r3
 80007f8:	2100      	movs	r1, #0
 80007fa:	f003 f9f7 	bl	8003bec <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fe:	4b4c      	ldr	r3, [pc, #304]	; (8000930 <MX_GPIO_Init+0x148>)
 8000800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000802:	4b4b      	ldr	r3, [pc, #300]	; (8000930 <MX_GPIO_Init+0x148>)
 8000804:	2104      	movs	r1, #4
 8000806:	430a      	orrs	r2, r1
 8000808:	62da      	str	r2, [r3, #44]	; 0x2c
 800080a:	4b49      	ldr	r3, [pc, #292]	; (8000930 <MX_GPIO_Init+0x148>)
 800080c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800080e:	2204      	movs	r2, #4
 8000810:	4013      	ands	r3, r2
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	4b46      	ldr	r3, [pc, #280]	; (8000930 <MX_GPIO_Init+0x148>)
 8000818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800081a:	4b45      	ldr	r3, [pc, #276]	; (8000930 <MX_GPIO_Init+0x148>)
 800081c:	2101      	movs	r1, #1
 800081e:	430a      	orrs	r2, r1
 8000820:	62da      	str	r2, [r3, #44]	; 0x2c
 8000822:	4b43      	ldr	r3, [pc, #268]	; (8000930 <MX_GPIO_Init+0x148>)
 8000824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000826:	2201      	movs	r2, #1
 8000828:	4013      	ands	r3, r2
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	4b40      	ldr	r3, [pc, #256]	; (8000930 <MX_GPIO_Init+0x148>)
 8000830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000832:	4b3f      	ldr	r3, [pc, #252]	; (8000930 <MX_GPIO_Init+0x148>)
 8000834:	2102      	movs	r1, #2
 8000836:	430a      	orrs	r2, r1
 8000838:	62da      	str	r2, [r3, #44]	; 0x2c
 800083a:	4b3d      	ldr	r3, [pc, #244]	; (8000930 <MX_GPIO_Init+0x148>)
 800083c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800083e:	2202      	movs	r2, #2
 8000840:	4013      	ands	r3, r2
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MISC_GPIO3_Pin|MISC_GPIO4_Pin, GPIO_PIN_RESET);
 8000846:	23c0      	movs	r3, #192	; 0xc0
 8000848:	021b      	lsls	r3, r3, #8
 800084a:	483a      	ldr	r0, [pc, #232]	; (8000934 <MX_GPIO_Init+0x14c>)
 800084c:	2200      	movs	r2, #0
 800084e:	0019      	movs	r1, r3
 8000850:	f000 fe2c 	bl	80014ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ACCEL_SPI1_CS_Pin|MISC_GPIO1_Pin|LED_OUT_Pin, GPIO_PIN_RESET);
 8000854:	4938      	ldr	r1, [pc, #224]	; (8000938 <MX_GPIO_Init+0x150>)
 8000856:	23a0      	movs	r3, #160	; 0xa0
 8000858:	05db      	lsls	r3, r3, #23
 800085a:	2200      	movs	r2, #0
 800085c:	0018      	movs	r0, r3
 800085e:	f000 fe25 	bl	80014ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MISC_GPIO2_GPIO_Port, MISC_GPIO2_Pin, GPIO_PIN_RESET);
 8000862:	4b36      	ldr	r3, [pc, #216]	; (800093c <MX_GPIO_Init+0x154>)
 8000864:	2200      	movs	r2, #0
 8000866:	2102      	movs	r1, #2
 8000868:	0018      	movs	r0, r3
 800086a:	f000 fe1f 	bl	80014ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MISC_GPIO3_Pin MISC_GPIO4_Pin */
  GPIO_InitStruct.Pin = MISC_GPIO3_Pin|MISC_GPIO4_Pin;
 800086e:	193b      	adds	r3, r7, r4
 8000870:	22c0      	movs	r2, #192	; 0xc0
 8000872:	0212      	lsls	r2, r2, #8
 8000874:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	193b      	adds	r3, r7, r4
 8000878:	2201      	movs	r2, #1
 800087a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	193b      	adds	r3, r7, r4
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	193b      	adds	r3, r7, r4
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000888:	193b      	adds	r3, r7, r4
 800088a:	4a2a      	ldr	r2, [pc, #168]	; (8000934 <MX_GPIO_Init+0x14c>)
 800088c:	0019      	movs	r1, r3
 800088e:	0010      	movs	r0, r2
 8000890:	f000 fca6 	bl	80011e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ON_OFF_MODE_Pin ACCEL_INT2_Pin ACCEL_INT1_Pin */
  GPIO_InitStruct.Pin = ON_OFF_MODE_Pin|ACCEL_INT2_Pin|ACCEL_INT1_Pin;
 8000894:	193b      	adds	r3, r7, r4
 8000896:	4a2a      	ldr	r2, [pc, #168]	; (8000940 <MX_GPIO_Init+0x158>)
 8000898:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089a:	193b      	adds	r3, r7, r4
 800089c:	2200      	movs	r2, #0
 800089e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	193b      	adds	r3, r7, r4
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a6:	193a      	adds	r2, r7, r4
 80008a8:	23a0      	movs	r3, #160	; 0xa0
 80008aa:	05db      	lsls	r3, r3, #23
 80008ac:	0011      	movs	r1, r2
 80008ae:	0018      	movs	r0, r3
 80008b0:	f000 fc96 	bl	80011e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_SPI1_CS_Pin MISC_GPIO1_Pin */
  GPIO_InitStruct.Pin = ACCEL_SPI1_CS_Pin|MISC_GPIO1_Pin;
 80008b4:	193b      	adds	r3, r7, r4
 80008b6:	4a23      	ldr	r2, [pc, #140]	; (8000944 <MX_GPIO_Init+0x15c>)
 80008b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	193b      	adds	r3, r7, r4
 80008bc:	2201      	movs	r2, #1
 80008be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	193b      	adds	r3, r7, r4
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	193b      	adds	r3, r7, r4
 80008c8:	2200      	movs	r2, #0
 80008ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008cc:	193a      	adds	r2, r7, r4
 80008ce:	23a0      	movs	r3, #160	; 0xa0
 80008d0:	05db      	lsls	r3, r3, #23
 80008d2:	0011      	movs	r1, r2
 80008d4:	0018      	movs	r0, r3
 80008d6:	f000 fc83 	bl	80011e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MISC_GPIO2_Pin */
  GPIO_InitStruct.Pin = MISC_GPIO2_Pin;
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	2202      	movs	r2, #2
 80008de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	193b      	adds	r3, r7, r4
 80008e2:	2201      	movs	r2, #1
 80008e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	193b      	adds	r3, r7, r4
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MISC_GPIO2_GPIO_Port, &GPIO_InitStruct);
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	4a11      	ldr	r2, [pc, #68]	; (800093c <MX_GPIO_Init+0x154>)
 80008f6:	0019      	movs	r1, r3
 80008f8:	0010      	movs	r0, r2
 80008fa:	f000 fc71 	bl	80011e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_OUT_Pin */
  GPIO_InitStruct.Pin = LED_OUT_Pin;
 80008fe:	0021      	movs	r1, r4
 8000900:	187b      	adds	r3, r7, r1
 8000902:	2280      	movs	r2, #128	; 0x80
 8000904:	01d2      	lsls	r2, r2, #7
 8000906:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2201      	movs	r2, #1
 800090c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2201      	movs	r2, #1
 8000912:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	187b      	adds	r3, r7, r1
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_OUT_GPIO_Port, &GPIO_InitStruct);
 800091a:	187a      	adds	r2, r7, r1
 800091c:	23a0      	movs	r3, #160	; 0xa0
 800091e:	05db      	lsls	r3, r3, #23
 8000920:	0011      	movs	r1, r2
 8000922:	0018      	movs	r0, r3
 8000924:	f000 fc5c 	bl	80011e0 <HAL_GPIO_Init>

}
 8000928:	46c0      	nop			; (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	b009      	add	sp, #36	; 0x24
 800092e:	bd90      	pop	{r4, r7, pc}
 8000930:	40021000 	.word	0x40021000
 8000934:	50000800 	.word	0x50000800
 8000938:	00006008 	.word	0x00006008
 800093c:	50000400 	.word	0x50000400
 8000940:	00000602 	.word	0x00000602
 8000944:	00002008 	.word	0x00002008

08000948 <data_to_hex_str>:

/* USER CODE BEGIN 4 */
void data_to_hex_str(uint8_t *data, uint8_t data_len, char *hex_str)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	607a      	str	r2, [r7, #4]
 8000952:	230b      	movs	r3, #11
 8000954:	18fb      	adds	r3, r7, r3
 8000956:	1c0a      	adds	r2, r1, #0
 8000958:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < data_len; i++)
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
 800095e:	e04d      	b.n	80009fc <data_to_hex_str+0xb4>
    {
        hex_str[2 * i]     = data[i] >> 4;
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	18d3      	adds	r3, r2, r3
 8000966:	781a      	ldrb	r2, [r3, #0]
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	0019      	movs	r1, r3
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	185b      	adds	r3, r3, r1
 8000972:	0912      	lsrs	r2, r2, #4
 8000974:	b2d2      	uxtb	r2, r2
 8000976:	701a      	strb	r2, [r3, #0]
        hex_str[2 * i + 1] = data[i] & 0x0f;
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	18d3      	adds	r3, r2, r3
 800097e:	781a      	ldrb	r2, [r3, #0]
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	3301      	adds	r3, #1
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	18cb      	adds	r3, r1, r3
 800098a:	210f      	movs	r1, #15
 800098c:	400a      	ands	r2, r1
 800098e:	b2d2      	uxtb	r2, r2
 8000990:	701a      	strb	r2, [r3, #0]
        hex_str[2 * i]     += hex_str[2 * i] > 9 ? 'A' - 10 : '0';
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	001a      	movs	r2, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	189b      	adds	r3, r3, r2
 800099c:	7819      	ldrb	r1, [r3, #0]
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	001a      	movs	r2, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	189b      	adds	r3, r3, r2
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b09      	cmp	r3, #9
 80009ac:	d901      	bls.n	80009b2 <data_to_hex_str+0x6a>
 80009ae:	2337      	movs	r3, #55	; 0x37
 80009b0:	e000      	b.n	80009b4 <data_to_hex_str+0x6c>
 80009b2:	2330      	movs	r3, #48	; 0x30
 80009b4:	697a      	ldr	r2, [r7, #20]
 80009b6:	0052      	lsls	r2, r2, #1
 80009b8:	0010      	movs	r0, r2
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	1812      	adds	r2, r2, r0
 80009be:	185b      	adds	r3, r3, r1
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	7013      	strb	r3, [r2, #0]
        hex_str[2 * i + 1] += hex_str[2 * i + 1] > 9 ? 'A' - 10 : '0';
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	3301      	adds	r3, #1
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	18d3      	adds	r3, r2, r3
 80009ce:	7819      	ldrb	r1, [r3, #0]
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	3301      	adds	r3, #1
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	18d3      	adds	r3, r2, r3
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b09      	cmp	r3, #9
 80009de:	d901      	bls.n	80009e4 <data_to_hex_str+0x9c>
 80009e0:	2337      	movs	r3, #55	; 0x37
 80009e2:	e000      	b.n	80009e6 <data_to_hex_str+0x9e>
 80009e4:	2330      	movs	r3, #48	; 0x30
 80009e6:	697a      	ldr	r2, [r7, #20]
 80009e8:	0052      	lsls	r2, r2, #1
 80009ea:	3201      	adds	r2, #1
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	1882      	adds	r2, r0, r2
 80009f0:	185b      	adds	r3, r3, r1
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	7013      	strb	r3, [r2, #0]
    for (int i = 0; i < data_len; i++)
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	3301      	adds	r3, #1
 80009fa:	617b      	str	r3, [r7, #20]
 80009fc:	210b      	movs	r1, #11
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	697a      	ldr	r2, [r7, #20]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	dbab      	blt.n	8000960 <data_to_hex_str+0x18>
    }
    hex_str[2 * data_len] = '\0';
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	001a      	movs	r2, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	189b      	adds	r3, r3, r2
 8000a14:	2200      	movs	r2, #0
 8000a16:	701a      	strb	r2, [r3, #0]
}
 8000a18:	46c0      	nop			; (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b006      	add	sp, #24
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <lidar_init>:

void lidar_init(){
 8000a20:	b590      	push	{r4, r7, lr}
 8000a22:	b087      	sub	sp, #28
 8000a24:	af00      	add	r7, sp, #0
	//Send soft reset command
	HAL_Delay(10000);
 8000a26:	4b32      	ldr	r3, [pc, #200]	; (8000af0 <lidar_init+0xd0>)
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f000 fa4f 	bl	8000ecc <HAL_Delay>
	HAL_UART_Transmit(&huart2, softResetCMD, sizeof(softResetCMD), 100);
 8000a2e:	4931      	ldr	r1, [pc, #196]	; (8000af4 <lidar_init+0xd4>)
 8000a30:	4831      	ldr	r0, [pc, #196]	; (8000af8 <lidar_init+0xd8>)
 8000a32:	2364      	movs	r3, #100	; 0x64
 8000a34:	2204      	movs	r2, #4
 8000a36:	f001 fcfb 	bl	8002430 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, rx_buffer, 5, 100);
 8000a3a:	4930      	ldr	r1, [pc, #192]	; (8000afc <lidar_init+0xdc>)
 8000a3c:	482e      	ldr	r0, [pc, #184]	; (8000af8 <lidar_init+0xd8>)
 8000a3e:	2364      	movs	r3, #100	; 0x64
 8000a40:	2205      	movs	r2, #5
 8000a42:	f001 fd9d 	bl	8002580 <HAL_UART_Receive>

	// Send message
	char msg1[] = "\n\rChecking return: ";
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	4a2d      	ldr	r2, [pc, #180]	; (8000b00 <lidar_init+0xe0>)
 8000a4a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000a4c:	c313      	stmia	r3!, {r0, r1, r4}
 8000a4e:	ca03      	ldmia	r2!, {r0, r1}
 8000a50:	c303      	stmia	r3!, {r0, r1}
	HAL_UART_Transmit(&huart2, (uint8_t*)msg1, strlen(msg1), HAL_MAX_DELAY);
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	0018      	movs	r0, r3
 8000a56:	f7ff fb57 	bl	8000108 <strlen>
 8000a5a:	0003      	movs	r3, r0
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	2301      	movs	r3, #1
 8000a60:	425b      	negs	r3, r3
 8000a62:	1d39      	adds	r1, r7, #4
 8000a64:	4824      	ldr	r0, [pc, #144]	; (8000af8 <lidar_init+0xd8>)
 8000a66:	f001 fce3 	bl	8002430 <HAL_UART_Transmit>

	// Send rx_buffer
	HAL_UART_Transmit(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer), 100);
 8000a6a:	4924      	ldr	r1, [pc, #144]	; (8000afc <lidar_init+0xdc>)
 8000a6c:	4822      	ldr	r0, [pc, #136]	; (8000af8 <lidar_init+0xd8>)
 8000a6e:	2364      	movs	r3, #100	; 0x64
 8000a70:	2209      	movs	r2, #9
 8000a72:	f001 fcdd 	bl	8002430 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000a76:	23fa      	movs	r3, #250	; 0xfa
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f000 fa26 	bl	8000ecc <HAL_Delay>

	// Send a 1
	HAL_UART_Transmit(&huart2, (uint8_t*)"1", 1, HAL_MAX_DELAY);
 8000a80:	2301      	movs	r3, #1
 8000a82:	425b      	negs	r3, r3
 8000a84:	491f      	ldr	r1, [pc, #124]	; (8000b04 <lidar_init+0xe4>)
 8000a86:	481c      	ldr	r0, [pc, #112]	; (8000af8 <lidar_init+0xd8>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f001 fcd1 	bl	8002430 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart2, baud9600CMD, sizeof(baud9600CMD), 100);
 8000a8e:	491e      	ldr	r1, [pc, #120]	; (8000b08 <lidar_init+0xe8>)
 8000a90:	4819      	ldr	r0, [pc, #100]	; (8000af8 <lidar_init+0xd8>)
 8000a92:	2364      	movs	r3, #100	; 0x64
 8000a94:	2208      	movs	r2, #8
 8000a96:	f001 fccb 	bl	8002430 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000a9a:	23fa      	movs	r3, #250	; 0xfa
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f000 fa14 	bl	8000ecc <HAL_Delay>

	//Send sample at 0Hz command
	HAL_UART_Transmit(&huart2, sampleFreq10HzCMD, sizeof(sampleFreq10HzCMD), 100);
 8000aa4:	4919      	ldr	r1, [pc, #100]	; (8000b0c <lidar_init+0xec>)
 8000aa6:	4814      	ldr	r0, [pc, #80]	; (8000af8 <lidar_init+0xd8>)
 8000aa8:	2364      	movs	r3, #100	; 0x64
 8000aaa:	2206      	movs	r2, #6
 8000aac:	f001 fcc0 	bl	8002430 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000ab0:	23fa      	movs	r3, #250	; 0xfa
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f000 fa09 	bl	8000ecc <HAL_Delay>

	//Send output format 9-byte/cm
	HAL_UART_Transmit(&huart2, outForm9B_cmCMD, sizeof(outForm9B_cmCMD), 100);
 8000aba:	4915      	ldr	r1, [pc, #84]	; (8000b10 <lidar_init+0xf0>)
 8000abc:	480e      	ldr	r0, [pc, #56]	; (8000af8 <lidar_init+0xd8>)
 8000abe:	2364      	movs	r3, #100	; 0x64
 8000ac0:	2205      	movs	r2, #5
 8000ac2:	f001 fcb5 	bl	8002430 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000ac6:	23fa      	movs	r3, #250	; 0xfa
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	0018      	movs	r0, r3
 8000acc:	f000 f9fe 	bl	8000ecc <HAL_Delay>

	// Save
	HAL_UART_Transmit(&huart2, saveSettingsCMD, sizeof(saveSettingsCMD), 100);
 8000ad0:	4910      	ldr	r1, [pc, #64]	; (8000b14 <lidar_init+0xf4>)
 8000ad2:	4809      	ldr	r0, [pc, #36]	; (8000af8 <lidar_init+0xd8>)
 8000ad4:	2364      	movs	r3, #100	; 0x64
 8000ad6:	2204      	movs	r2, #4
 8000ad8:	f001 fcaa 	bl	8002430 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000adc:	23fa      	movs	r3, #250	; 0xfa
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f000 f9f3 	bl	8000ecc <HAL_Delay>

}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b007      	add	sp, #28
 8000aec:	bd90      	pop	{r4, r7, pc}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	00002710 	.word	0x00002710
 8000af4:	20000000 	.word	0x20000000
 8000af8:	200000a0 	.word	0x200000a0
 8000afc:	20000130 	.word	0x20000130
 8000b00:	08003c3c 	.word	0x08003c3c
 8000b04:	08003c38 	.word	0x08003c38
 8000b08:	20000014 	.word	0x20000014
 8000b0c:	20000004 	.word	0x20000004
 8000b10:	2000000c 	.word	0x2000000c
 8000b14:	2000001c 	.word	0x2000001c

08000b18 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart2.Instance){
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <HAL_UART_RxCpltCallback+0x24>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d102      	bne.n	8000b32 <HAL_UART_RxCpltCallback+0x1a>
		HAL_Delay(100);
 8000b2c:	2064      	movs	r0, #100	; 0x64
 8000b2e:	f000 f9cd 	bl	8000ecc <HAL_Delay>
	}
}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b002      	add	sp, #8
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	200000a0 	.word	0x200000a0

08000b40 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b087      	sub	sp, #28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, rx_buffer, RX_BUFFER_SIZE);
 8000b48:	2309      	movs	r3, #9
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	490e      	ldr	r1, [pc, #56]	; (8000b88 <HAL_UART_TxCpltCallback+0x48>)
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <HAL_UART_TxCpltCallback+0x4c>)
 8000b50:	0018      	movs	r0, r3
 8000b52:	f001 fe03 	bl	800275c <HAL_UART_Receive_IT>
	char msg[] = "Sent___\r\n";
 8000b56:	210c      	movs	r1, #12
 8000b58:	187b      	adds	r3, r7, r1
 8000b5a:	4a0d      	ldr	r2, [pc, #52]	; (8000b90 <HAL_UART_TxCpltCallback+0x50>)
 8000b5c:	ca11      	ldmia	r2!, {r0, r4}
 8000b5e:	c311      	stmia	r3!, {r0, r4}
 8000b60:	8812      	ldrh	r2, [r2, #0]
 8000b62:	801a      	strh	r2, [r3, #0]
	if(huart->Instance == huart2.Instance){
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <HAL_UART_TxCpltCallback+0x4c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d106      	bne.n	8000b7e <HAL_UART_TxCpltCallback+0x3e>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, 9, HAL_MAX_DELAY);
 8000b70:	2301      	movs	r3, #1
 8000b72:	425b      	negs	r3, r3
 8000b74:	1879      	adds	r1, r7, r1
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <HAL_UART_TxCpltCallback+0x4c>)
 8000b78:	2209      	movs	r2, #9
 8000b7a:	f001 fc59 	bl	8002430 <HAL_UART_Transmit>
	}
}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	b007      	add	sp, #28
 8000b84:	bd90      	pop	{r4, r7, pc}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	20000130 	.word	0x20000130
 8000b8c:	200000a0 	.word	0x200000a0
 8000b90:	08003c50 	.word	0x08003c50

08000b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
}
 8000b9a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <Error_Handler+0x8>
	...

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba4:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <HAL_MspInit+0x24>)
 8000ba6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_MspInit+0x24>)
 8000baa:	2101      	movs	r1, #1
 8000bac:	430a      	orrs	r2, r1
 8000bae:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <HAL_MspInit+0x24>)
 8000bb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <HAL_MspInit+0x24>)
 8000bb6:	2180      	movs	r1, #128	; 0x80
 8000bb8:	0549      	lsls	r1, r1, #21
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40021000 	.word	0x40021000

08000bc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bc8:	b590      	push	{r4, r7, lr}
 8000bca:	b089      	sub	sp, #36	; 0x24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	240c      	movs	r4, #12
 8000bd2:	193b      	adds	r3, r7, r4
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	2314      	movs	r3, #20
 8000bd8:	001a      	movs	r2, r3
 8000bda:	2100      	movs	r1, #0
 8000bdc:	f003 f806 	bl	8003bec <memset>
  if(hspi->Instance==SPI1)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a18      	ldr	r2, [pc, #96]	; (8000c48 <HAL_SPI_MspInit+0x80>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d129      	bne.n	8000c3e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bea:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <HAL_SPI_MspInit+0x84>)
 8000bec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bee:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <HAL_SPI_MspInit+0x84>)
 8000bf0:	2180      	movs	r1, #128	; 0x80
 8000bf2:	0149      	lsls	r1, r1, #5
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <HAL_SPI_MspInit+0x84>)
 8000bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <HAL_SPI_MspInit+0x84>)
 8000bfe:	2101      	movs	r1, #1
 8000c00:	430a      	orrs	r2, r1
 8000c02:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <HAL_SPI_MspInit+0x84>)
 8000c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c08:	2201      	movs	r2, #1
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c10:	0021      	movs	r1, r4
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	22e0      	movs	r2, #224	; 0xe0
 8000c16:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	2202      	movs	r2, #2
 8000c1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	2203      	movs	r2, #3
 8000c28:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000c2a:	187b      	adds	r3, r7, r1
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c30:	187a      	adds	r2, r7, r1
 8000c32:	23a0      	movs	r3, #160	; 0xa0
 8000c34:	05db      	lsls	r3, r3, #23
 8000c36:	0011      	movs	r1, r2
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f000 fad1 	bl	80011e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b009      	add	sp, #36	; 0x24
 8000c44:	bd90      	pop	{r4, r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	40013000 	.word	0x40013000
 8000c4c:	40021000 	.word	0x40021000

08000c50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c50:	b590      	push	{r4, r7, lr}
 8000c52:	b089      	sub	sp, #36	; 0x24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	240c      	movs	r4, #12
 8000c5a:	193b      	adds	r3, r7, r4
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	2314      	movs	r3, #20
 8000c60:	001a      	movs	r2, r3
 8000c62:	2100      	movs	r1, #0
 8000c64:	f002 ffc2 	bl	8003bec <memset>
  if(huart->Instance==USART2)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a27      	ldr	r2, [pc, #156]	; (8000d0c <HAL_UART_MspInit+0xbc>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d147      	bne.n	8000d02 <HAL_UART_MspInit+0xb2>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c72:	4b27      	ldr	r3, [pc, #156]	; (8000d10 <HAL_UART_MspInit+0xc0>)
 8000c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c76:	4b26      	ldr	r3, [pc, #152]	; (8000d10 <HAL_UART_MspInit+0xc0>)
 8000c78:	2180      	movs	r1, #128	; 0x80
 8000c7a:	0289      	lsls	r1, r1, #10
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c80:	4b23      	ldr	r3, [pc, #140]	; (8000d10 <HAL_UART_MspInit+0xc0>)
 8000c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c84:	4b22      	ldr	r3, [pc, #136]	; (8000d10 <HAL_UART_MspInit+0xc0>)
 8000c86:	2101      	movs	r1, #1
 8000c88:	430a      	orrs	r2, r1
 8000c8a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c8c:	4b20      	ldr	r3, [pc, #128]	; (8000d10 <HAL_UART_MspInit+0xc0>)
 8000c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c90:	2201      	movs	r2, #1
 8000c92:	4013      	ands	r3, r2
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA0-CK_IN     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c98:	193b      	adds	r3, r7, r4
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	193b      	adds	r3, r7, r4
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	193b      	adds	r3, r7, r4
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	193b      	adds	r3, r7, r4
 8000cac:	2203      	movs	r2, #3
 8000cae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 8000cb0:	193b      	adds	r3, r7, r4
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	193a      	adds	r2, r7, r4
 8000cb8:	23a0      	movs	r3, #160	; 0xa0
 8000cba:	05db      	lsls	r3, r3, #23
 8000cbc:	0011      	movs	r1, r2
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f000 fa8e 	bl	80011e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cc4:	0021      	movs	r1, r4
 8000cc6:	187b      	adds	r3, r7, r1
 8000cc8:	2204      	movs	r2, #4
 8000cca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	2202      	movs	r2, #2
 8000cd0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	187b      	adds	r3, r7, r1
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	2203      	movs	r2, #3
 8000cdc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000cde:	187b      	adds	r3, r7, r1
 8000ce0:	2204      	movs	r2, #4
 8000ce2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	187a      	adds	r2, r7, r1
 8000ce6:	23a0      	movs	r3, #160	; 0xa0
 8000ce8:	05db      	lsls	r3, r3, #23
 8000cea:	0011      	movs	r1, r2
 8000cec:	0018      	movs	r0, r3
 8000cee:	f000 fa77 	bl	80011e0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	201c      	movs	r0, #28
 8000cf8:	f000 f9b8 	bl	800106c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cfc:	201c      	movs	r0, #28
 8000cfe:	f000 f9ca 	bl	8001096 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b009      	add	sp, #36	; 0x24
 8000d08:	bd90      	pop	{r4, r7, pc}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	40004400 	.word	0x40004400
 8000d10:	40021000 	.word	0x40021000

08000d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <NMI_Handler+0x4>

08000d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <HardFault_Handler+0x4>

08000d20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d24:	46c0      	nop			; (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d38:	f000 f8ac 	bl	8000e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3c:	46c0      	nop			; (mov r8, r8)
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d48:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <USART2_IRQHandler+0x14>)
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f001 fd6e 	bl	800282c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d50:	46c0      	nop			; (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	200000a0 	.word	0x200000a0

08000d5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d60:	46c0      	nop			; (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000d68:	4813      	ldr	r0, [pc, #76]	; (8000db8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000d6a:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000d6c:	4813      	ldr	r0, [pc, #76]	; (8000dbc <LoopForever+0x6>)
    LDR R1, [R0]
 8000d6e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000d70:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000d72:	4a13      	ldr	r2, [pc, #76]	; (8000dc0 <LoopForever+0xa>)
    CMP R1, R2
 8000d74:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000d76:	d105      	bne.n	8000d84 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000d78:	4812      	ldr	r0, [pc, #72]	; (8000dc4 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000d7a:	4913      	ldr	r1, [pc, #76]	; (8000dc8 <LoopForever+0x12>)
    STR R1, [R0]
 8000d7c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000d7e:	4813      	ldr	r0, [pc, #76]	; (8000dcc <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000d80:	4913      	ldr	r1, [pc, #76]	; (8000dd0 <LoopForever+0x1a>)
    STR R1, [R0]
 8000d82:	6001      	str	r1, [r0, #0]

08000d84 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d84:	4813      	ldr	r0, [pc, #76]	; (8000dd4 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000d86:	4914      	ldr	r1, [pc, #80]	; (8000dd8 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000d88:	4a14      	ldr	r2, [pc, #80]	; (8000ddc <LoopForever+0x26>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d8c:	e002      	b.n	8000d94 <LoopCopyDataInit>

08000d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d92:	3304      	adds	r3, #4

08000d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d98:	d3f9      	bcc.n	8000d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9a:	4a11      	ldr	r2, [pc, #68]	; (8000de0 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000d9c:	4c11      	ldr	r4, [pc, #68]	; (8000de4 <LoopForever+0x2e>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da0:	e001      	b.n	8000da6 <LoopFillZerobss>

08000da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da4:	3204      	adds	r2, #4

08000da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da8:	d3fb      	bcc.n	8000da2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000daa:	f7ff ffd7 	bl	8000d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dae:	f002 fef9 	bl	8003ba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000db2:	f7ff fb81 	bl	80004b8 <main>

08000db6 <LoopForever>:

LoopForever:
    b LoopForever
 8000db6:	e7fe      	b.n	8000db6 <LoopForever>
   ldr   r0, =_estack
 8000db8:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000dbc:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000dc0:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000dc4:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000dc8:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000dcc:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000dd0:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd8:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000ddc:	08003cd8 	.word	0x08003cd8
  ldr r2, =_sbss
 8000de0:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000de4:	20000140 	.word	0x20000140

08000de8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de8:	e7fe      	b.n	8000de8 <ADC1_IRQHandler>
	...

08000dec <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000df2:	1dfb      	adds	r3, r7, #7
 8000df4:	2200      	movs	r2, #0
 8000df6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <HAL_Init+0x3c>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <HAL_Init+0x3c>)
 8000dfe:	2140      	movs	r1, #64	; 0x40
 8000e00:	430a      	orrs	r2, r1
 8000e02:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 f811 	bl	8000e2c <HAL_InitTick>
 8000e0a:	1e03      	subs	r3, r0, #0
 8000e0c:	d003      	beq.n	8000e16 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000e0e:	1dfb      	adds	r3, r7, #7
 8000e10:	2201      	movs	r2, #1
 8000e12:	701a      	strb	r2, [r3, #0]
 8000e14:	e001      	b.n	8000e1a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e16:	f7ff fec3 	bl	8000ba0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e1a:	1dfb      	adds	r3, r7, #7
 8000e1c:	781b      	ldrb	r3, [r3, #0]
}
 8000e1e:	0018      	movs	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b002      	add	sp, #8
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	40022000 	.word	0x40022000

08000e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e2c:	b590      	push	{r4, r7, lr}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e34:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <HAL_InitTick+0x5c>)
 8000e36:	681c      	ldr	r4, [r3, #0]
 8000e38:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <HAL_InitTick+0x60>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	0019      	movs	r1, r3
 8000e3e:	23fa      	movs	r3, #250	; 0xfa
 8000e40:	0098      	lsls	r0, r3, #2
 8000e42:	f7ff f969 	bl	8000118 <__udivsi3>
 8000e46:	0003      	movs	r3, r0
 8000e48:	0019      	movs	r1, r3
 8000e4a:	0020      	movs	r0, r4
 8000e4c:	f7ff f964 	bl	8000118 <__udivsi3>
 8000e50:	0003      	movs	r3, r0
 8000e52:	0018      	movs	r0, r3
 8000e54:	f000 f92f 	bl	80010b6 <HAL_SYSTICK_Config>
 8000e58:	1e03      	subs	r3, r0, #0
 8000e5a:	d001      	beq.n	8000e60 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e00f      	b.n	8000e80 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b03      	cmp	r3, #3
 8000e64:	d80b      	bhi.n	8000e7e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	2301      	movs	r3, #1
 8000e6a:	425b      	negs	r3, r3
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f000 f8fc 	bl	800106c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_InitTick+0x64>)
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	e000      	b.n	8000e80 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
}
 8000e80:	0018      	movs	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	b003      	add	sp, #12
 8000e86:	bd90      	pop	{r4, r7, pc}
 8000e88:	20000020 	.word	0x20000020
 8000e8c:	20000028 	.word	0x20000028
 8000e90:	20000024 	.word	0x20000024

08000e94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <HAL_IncTick+0x1c>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	001a      	movs	r2, r3
 8000e9e:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <HAL_IncTick+0x20>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	18d2      	adds	r2, r2, r3
 8000ea4:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <HAL_IncTick+0x20>)
 8000ea6:	601a      	str	r2, [r3, #0]
}
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	20000028 	.word	0x20000028
 8000eb4:	2000013c 	.word	0x2000013c

08000eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  return uwTick;
 8000ebc:	4b02      	ldr	r3, [pc, #8]	; (8000ec8 <HAL_GetTick+0x10>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
}
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	2000013c 	.word	0x2000013c

08000ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed4:	f7ff fff0 	bl	8000eb8 <HAL_GetTick>
 8000ed8:	0003      	movs	r3, r0
 8000eda:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	d005      	beq.n	8000ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <HAL_Delay+0x44>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	001a      	movs	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	189b      	adds	r3, r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	f7ff ffe0 	bl	8000eb8 <HAL_GetTick>
 8000ef8:	0002      	movs	r2, r0
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d8f7      	bhi.n	8000ef4 <HAL_Delay+0x28>
  {
  }
}
 8000f04:	46c0      	nop			; (mov r8, r8)
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	b004      	add	sp, #16
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	20000028 	.word	0x20000028

08000f14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	0002      	movs	r2, r0
 8000f1c:	1dfb      	adds	r3, r7, #7
 8000f1e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f20:	1dfb      	adds	r3, r7, #7
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b7f      	cmp	r3, #127	; 0x7f
 8000f26:	d809      	bhi.n	8000f3c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f28:	1dfb      	adds	r3, r7, #7
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	001a      	movs	r2, r3
 8000f2e:	231f      	movs	r3, #31
 8000f30:	401a      	ands	r2, r3
 8000f32:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <__NVIC_EnableIRQ+0x30>)
 8000f34:	2101      	movs	r1, #1
 8000f36:	4091      	lsls	r1, r2
 8000f38:	000a      	movs	r2, r1
 8000f3a:	601a      	str	r2, [r3, #0]
  }
}
 8000f3c:	46c0      	nop			; (mov r8, r8)
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	b002      	add	sp, #8
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	e000e100 	.word	0xe000e100

08000f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	0002      	movs	r2, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	1dfb      	adds	r3, r7, #7
 8000f54:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f56:	1dfb      	adds	r3, r7, #7
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b7f      	cmp	r3, #127	; 0x7f
 8000f5c:	d828      	bhi.n	8000fb0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f5e:	4a2f      	ldr	r2, [pc, #188]	; (800101c <__NVIC_SetPriority+0xd4>)
 8000f60:	1dfb      	adds	r3, r7, #7
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	b25b      	sxtb	r3, r3
 8000f66:	089b      	lsrs	r3, r3, #2
 8000f68:	33c0      	adds	r3, #192	; 0xc0
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	589b      	ldr	r3, [r3, r2]
 8000f6e:	1dfa      	adds	r2, r7, #7
 8000f70:	7812      	ldrb	r2, [r2, #0]
 8000f72:	0011      	movs	r1, r2
 8000f74:	2203      	movs	r2, #3
 8000f76:	400a      	ands	r2, r1
 8000f78:	00d2      	lsls	r2, r2, #3
 8000f7a:	21ff      	movs	r1, #255	; 0xff
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	000a      	movs	r2, r1
 8000f80:	43d2      	mvns	r2, r2
 8000f82:	401a      	ands	r2, r3
 8000f84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	019b      	lsls	r3, r3, #6
 8000f8a:	22ff      	movs	r2, #255	; 0xff
 8000f8c:	401a      	ands	r2, r3
 8000f8e:	1dfb      	adds	r3, r7, #7
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	0018      	movs	r0, r3
 8000f94:	2303      	movs	r3, #3
 8000f96:	4003      	ands	r3, r0
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f9c:	481f      	ldr	r0, [pc, #124]	; (800101c <__NVIC_SetPriority+0xd4>)
 8000f9e:	1dfb      	adds	r3, r7, #7
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	b25b      	sxtb	r3, r3
 8000fa4:	089b      	lsrs	r3, r3, #2
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	33c0      	adds	r3, #192	; 0xc0
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000fae:	e031      	b.n	8001014 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fb0:	4a1b      	ldr	r2, [pc, #108]	; (8001020 <__NVIC_SetPriority+0xd8>)
 8000fb2:	1dfb      	adds	r3, r7, #7
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	0019      	movs	r1, r3
 8000fb8:	230f      	movs	r3, #15
 8000fba:	400b      	ands	r3, r1
 8000fbc:	3b08      	subs	r3, #8
 8000fbe:	089b      	lsrs	r3, r3, #2
 8000fc0:	3306      	adds	r3, #6
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	18d3      	adds	r3, r2, r3
 8000fc6:	3304      	adds	r3, #4
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	1dfa      	adds	r2, r7, #7
 8000fcc:	7812      	ldrb	r2, [r2, #0]
 8000fce:	0011      	movs	r1, r2
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	400a      	ands	r2, r1
 8000fd4:	00d2      	lsls	r2, r2, #3
 8000fd6:	21ff      	movs	r1, #255	; 0xff
 8000fd8:	4091      	lsls	r1, r2
 8000fda:	000a      	movs	r2, r1
 8000fdc:	43d2      	mvns	r2, r2
 8000fde:	401a      	ands	r2, r3
 8000fe0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	019b      	lsls	r3, r3, #6
 8000fe6:	22ff      	movs	r2, #255	; 0xff
 8000fe8:	401a      	ands	r2, r3
 8000fea:	1dfb      	adds	r3, r7, #7
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	0018      	movs	r0, r3
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	4003      	ands	r3, r0
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ff8:	4809      	ldr	r0, [pc, #36]	; (8001020 <__NVIC_SetPriority+0xd8>)
 8000ffa:	1dfb      	adds	r3, r7, #7
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	001c      	movs	r4, r3
 8001000:	230f      	movs	r3, #15
 8001002:	4023      	ands	r3, r4
 8001004:	3b08      	subs	r3, #8
 8001006:	089b      	lsrs	r3, r3, #2
 8001008:	430a      	orrs	r2, r1
 800100a:	3306      	adds	r3, #6
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	18c3      	adds	r3, r0, r3
 8001010:	3304      	adds	r3, #4
 8001012:	601a      	str	r2, [r3, #0]
}
 8001014:	46c0      	nop			; (mov r8, r8)
 8001016:	46bd      	mov	sp, r7
 8001018:	b003      	add	sp, #12
 800101a:	bd90      	pop	{r4, r7, pc}
 800101c:	e000e100 	.word	0xe000e100
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	1e5a      	subs	r2, r3, #1
 8001030:	2380      	movs	r3, #128	; 0x80
 8001032:	045b      	lsls	r3, r3, #17
 8001034:	429a      	cmp	r2, r3
 8001036:	d301      	bcc.n	800103c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001038:	2301      	movs	r3, #1
 800103a:	e010      	b.n	800105e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103c:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <SysTick_Config+0x44>)
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	3a01      	subs	r2, #1
 8001042:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001044:	2301      	movs	r3, #1
 8001046:	425b      	negs	r3, r3
 8001048:	2103      	movs	r1, #3
 800104a:	0018      	movs	r0, r3
 800104c:	f7ff ff7c 	bl	8000f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <SysTick_Config+0x44>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001056:	4b04      	ldr	r3, [pc, #16]	; (8001068 <SysTick_Config+0x44>)
 8001058:	2207      	movs	r2, #7
 800105a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800105c:	2300      	movs	r3, #0
}
 800105e:	0018      	movs	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	b002      	add	sp, #8
 8001064:	bd80      	pop	{r7, pc}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	e000e010 	.word	0xe000e010

0800106c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
 8001076:	210f      	movs	r1, #15
 8001078:	187b      	adds	r3, r7, r1
 800107a:	1c02      	adds	r2, r0, #0
 800107c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	187b      	adds	r3, r7, r1
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	b25b      	sxtb	r3, r3
 8001086:	0011      	movs	r1, r2
 8001088:	0018      	movs	r0, r3
 800108a:	f7ff ff5d 	bl	8000f48 <__NVIC_SetPriority>
}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	46bd      	mov	sp, r7
 8001092:	b004      	add	sp, #16
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	0002      	movs	r2, r0
 800109e:	1dfb      	adds	r3, r7, #7
 80010a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a2:	1dfb      	adds	r3, r7, #7
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	0018      	movs	r0, r3
 80010aa:	f7ff ff33 	bl	8000f14 <__NVIC_EnableIRQ>
}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	46bd      	mov	sp, r7
 80010b2:	b002      	add	sp, #8
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	0018      	movs	r0, r3
 80010c2:	f7ff ffaf 	bl	8001024 <SysTick_Config>
 80010c6:	0003      	movs	r3, r0
}
 80010c8:	0018      	movs	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	b002      	add	sp, #8
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010d8:	230f      	movs	r3, #15
 80010da:	18fb      	adds	r3, r7, r3
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2225      	movs	r2, #37	; 0x25
 80010e4:	5c9b      	ldrb	r3, [r3, r2]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d008      	beq.n	80010fe <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2204      	movs	r2, #4
 80010f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2224      	movs	r2, #36	; 0x24
 80010f6:	2100      	movs	r1, #0
 80010f8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e024      	b.n	8001148 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	210e      	movs	r1, #14
 800110a:	438a      	bics	r2, r1
 800110c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2101      	movs	r1, #1
 800111a:	438a      	bics	r2, r1
 800111c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	221c      	movs	r2, #28
 8001124:	401a      	ands	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	2101      	movs	r1, #1
 800112c:	4091      	lsls	r1, r2
 800112e:	000a      	movs	r2, r1
 8001130:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2225      	movs	r2, #37	; 0x25
 8001136:	2101      	movs	r1, #1
 8001138:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2224      	movs	r2, #36	; 0x24
 800113e:	2100      	movs	r1, #0
 8001140:	5499      	strb	r1, [r3, r2]

    return status;
 8001142:	230f      	movs	r3, #15
 8001144:	18fb      	adds	r3, r7, r3
 8001146:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001148:	0018      	movs	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	b004      	add	sp, #16
 800114e:	bd80      	pop	{r7, pc}

08001150 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001158:	210f      	movs	r1, #15
 800115a:	187b      	adds	r3, r7, r1
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2225      	movs	r2, #37	; 0x25
 8001164:	5c9b      	ldrb	r3, [r3, r2]
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d006      	beq.n	800117a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2204      	movs	r2, #4
 8001170:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001172:	187b      	adds	r3, r7, r1
 8001174:	2201      	movs	r2, #1
 8001176:	701a      	strb	r2, [r3, #0]
 8001178:	e02a      	b.n	80011d0 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	210e      	movs	r1, #14
 8001186:	438a      	bics	r2, r1
 8001188:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2101      	movs	r1, #1
 8001196:	438a      	bics	r2, r1
 8001198:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	221c      	movs	r2, #28
 80011a0:	401a      	ands	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	2101      	movs	r1, #1
 80011a8:	4091      	lsls	r1, r2
 80011aa:	000a      	movs	r2, r1
 80011ac:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2225      	movs	r2, #37	; 0x25
 80011b2:	2101      	movs	r1, #1
 80011b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2224      	movs	r2, #36	; 0x24
 80011ba:	2100      	movs	r1, #0
 80011bc:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d004      	beq.n	80011d0 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	0010      	movs	r0, r2
 80011ce:	4798      	blx	r3
    }
  }
  return status;
 80011d0:	230f      	movs	r3, #15
 80011d2:	18fb      	adds	r3, r7, r3
 80011d4:	781b      	ldrb	r3, [r3, #0]
}
 80011d6:	0018      	movs	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	b004      	add	sp, #16
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80011f6:	e143      	b.n	8001480 <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2101      	movs	r1, #1
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	4091      	lsls	r1, r2
 8001202:	000a      	movs	r2, r1
 8001204:	4013      	ands	r3, r2
 8001206:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d100      	bne.n	8001210 <HAL_GPIO_Init+0x30>
 800120e:	e134      	b.n	800147a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2203      	movs	r2, #3
 8001216:	4013      	ands	r3, r2
 8001218:	2b01      	cmp	r3, #1
 800121a:	d005      	beq.n	8001228 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2203      	movs	r2, #3
 8001222:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001224:	2b02      	cmp	r3, #2
 8001226:	d130      	bne.n	800128a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2203      	movs	r2, #3
 8001234:	409a      	lsls	r2, r3
 8001236:	0013      	movs	r3, r2
 8001238:	43da      	mvns	r2, r3
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	68da      	ldr	r2, [r3, #12]
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	409a      	lsls	r2, r3
 800124a:	0013      	movs	r3, r2
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4313      	orrs	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800125e:	2201      	movs	r2, #1
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	409a      	lsls	r2, r3
 8001264:	0013      	movs	r3, r2
 8001266:	43da      	mvns	r2, r3
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	091b      	lsrs	r3, r3, #4
 8001274:	2201      	movs	r2, #1
 8001276:	401a      	ands	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	409a      	lsls	r2, r3
 800127c:	0013      	movs	r3, r2
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2203      	movs	r2, #3
 8001290:	4013      	ands	r3, r2
 8001292:	2b03      	cmp	r3, #3
 8001294:	d017      	beq.n	80012c6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	409a      	lsls	r2, r3
 80012a4:	0013      	movs	r3, r2
 80012a6:	43da      	mvns	r2, r3
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	409a      	lsls	r2, r3
 80012b8:	0013      	movs	r3, r2
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2203      	movs	r2, #3
 80012cc:	4013      	ands	r3, r2
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d123      	bne.n	800131a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	08da      	lsrs	r2, r3, #3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3208      	adds	r2, #8
 80012da:	0092      	lsls	r2, r2, #2
 80012dc:	58d3      	ldr	r3, [r2, r3]
 80012de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	2207      	movs	r2, #7
 80012e4:	4013      	ands	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	220f      	movs	r2, #15
 80012ea:	409a      	lsls	r2, r3
 80012ec:	0013      	movs	r3, r2
 80012ee:	43da      	mvns	r2, r3
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	4013      	ands	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	691a      	ldr	r2, [r3, #16]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	2107      	movs	r1, #7
 80012fe:	400b      	ands	r3, r1
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	409a      	lsls	r2, r3
 8001304:	0013      	movs	r3, r2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	08da      	lsrs	r2, r3, #3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3208      	adds	r2, #8
 8001314:	0092      	lsls	r2, r2, #2
 8001316:	6939      	ldr	r1, [r7, #16]
 8001318:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	2203      	movs	r2, #3
 8001326:	409a      	lsls	r2, r3
 8001328:	0013      	movs	r3, r2
 800132a:	43da      	mvns	r2, r3
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2203      	movs	r2, #3
 8001338:	401a      	ands	r2, r3
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	409a      	lsls	r2, r3
 8001340:	0013      	movs	r3, r2
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	23c0      	movs	r3, #192	; 0xc0
 8001354:	029b      	lsls	r3, r3, #10
 8001356:	4013      	ands	r3, r2
 8001358:	d100      	bne.n	800135c <HAL_GPIO_Init+0x17c>
 800135a:	e08e      	b.n	800147a <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135c:	4b4e      	ldr	r3, [pc, #312]	; (8001498 <HAL_GPIO_Init+0x2b8>)
 800135e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001360:	4b4d      	ldr	r3, [pc, #308]	; (8001498 <HAL_GPIO_Init+0x2b8>)
 8001362:	2101      	movs	r1, #1
 8001364:	430a      	orrs	r2, r1
 8001366:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001368:	4a4c      	ldr	r2, [pc, #304]	; (800149c <HAL_GPIO_Init+0x2bc>)
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	089b      	lsrs	r3, r3, #2
 800136e:	3302      	adds	r3, #2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	589b      	ldr	r3, [r3, r2]
 8001374:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	2203      	movs	r2, #3
 800137a:	4013      	ands	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	220f      	movs	r2, #15
 8001380:	409a      	lsls	r2, r3
 8001382:	0013      	movs	r3, r2
 8001384:	43da      	mvns	r2, r3
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	23a0      	movs	r3, #160	; 0xa0
 8001390:	05db      	lsls	r3, r3, #23
 8001392:	429a      	cmp	r2, r3
 8001394:	d00d      	beq.n	80013b2 <HAL_GPIO_Init+0x1d2>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a41      	ldr	r2, [pc, #260]	; (80014a0 <HAL_GPIO_Init+0x2c0>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d007      	beq.n	80013ae <HAL_GPIO_Init+0x1ce>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a40      	ldr	r2, [pc, #256]	; (80014a4 <HAL_GPIO_Init+0x2c4>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d101      	bne.n	80013aa <HAL_GPIO_Init+0x1ca>
 80013a6:	2302      	movs	r3, #2
 80013a8:	e004      	b.n	80013b4 <HAL_GPIO_Init+0x1d4>
 80013aa:	2306      	movs	r3, #6
 80013ac:	e002      	b.n	80013b4 <HAL_GPIO_Init+0x1d4>
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <HAL_GPIO_Init+0x1d4>
 80013b2:	2300      	movs	r3, #0
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	2103      	movs	r1, #3
 80013b8:	400a      	ands	r2, r1
 80013ba:	0092      	lsls	r2, r2, #2
 80013bc:	4093      	lsls	r3, r2
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013c4:	4935      	ldr	r1, [pc, #212]	; (800149c <HAL_GPIO_Init+0x2bc>)
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	089b      	lsrs	r3, r3, #2
 80013ca:	3302      	adds	r3, #2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d2:	4b35      	ldr	r3, [pc, #212]	; (80014a8 <HAL_GPIO_Init+0x2c8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	43da      	mvns	r2, r3
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	4013      	ands	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	2380      	movs	r3, #128	; 0x80
 80013e8:	025b      	lsls	r3, r3, #9
 80013ea:	4013      	ands	r3, r2
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013f6:	4b2c      	ldr	r3, [pc, #176]	; (80014a8 <HAL_GPIO_Init+0x2c8>)
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80013fc:	4b2a      	ldr	r3, [pc, #168]	; (80014a8 <HAL_GPIO_Init+0x2c8>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	43da      	mvns	r2, r3
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	2380      	movs	r3, #128	; 0x80
 8001412:	029b      	lsls	r3, r3, #10
 8001414:	4013      	ands	r3, r2
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4313      	orrs	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001420:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <HAL_GPIO_Init+0x2c8>)
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001426:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <HAL_GPIO_Init+0x2c8>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	43da      	mvns	r2, r3
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	4013      	ands	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	2380      	movs	r3, #128	; 0x80
 800143c:	035b      	lsls	r3, r3, #13
 800143e:	4013      	ands	r3, r2
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4313      	orrs	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800144a:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <HAL_GPIO_Init+0x2c8>)
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001450:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <HAL_GPIO_Init+0x2c8>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	43da      	mvns	r2, r3
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	4013      	ands	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	039b      	lsls	r3, r3, #14
 8001468:	4013      	ands	r3, r2
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <HAL_GPIO_Init+0x2c8>)
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	3301      	adds	r3, #1
 800147e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	40da      	lsrs	r2, r3
 8001488:	1e13      	subs	r3, r2, #0
 800148a:	d000      	beq.n	800148e <HAL_GPIO_Init+0x2ae>
 800148c:	e6b4      	b.n	80011f8 <HAL_GPIO_Init+0x18>
  }
}
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	46c0      	nop			; (mov r8, r8)
 8001492:	46bd      	mov	sp, r7
 8001494:	b006      	add	sp, #24
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40021000 	.word	0x40021000
 800149c:	40010000 	.word	0x40010000
 80014a0:	50000400 	.word	0x50000400
 80014a4:	50000800 	.word	0x50000800
 80014a8:	40010400 	.word	0x40010400

080014ac <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	0008      	movs	r0, r1
 80014b6:	0011      	movs	r1, r2
 80014b8:	1cbb      	adds	r3, r7, #2
 80014ba:	1c02      	adds	r2, r0, #0
 80014bc:	801a      	strh	r2, [r3, #0]
 80014be:	1c7b      	adds	r3, r7, #1
 80014c0:	1c0a      	adds	r2, r1, #0
 80014c2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014c4:	1c7b      	adds	r3, r7, #1
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d004      	beq.n	80014d6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014cc:	1cbb      	adds	r3, r7, #2
 80014ce:	881a      	ldrh	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80014d4:	e003      	b.n	80014de <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80014d6:	1cbb      	adds	r3, r7, #2
 80014d8:	881a      	ldrh	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	46bd      	mov	sp, r7
 80014e2:	b002      	add	sp, #8
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e8:	b5b0      	push	{r4, r5, r7, lr}
 80014ea:	b08a      	sub	sp, #40	; 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d102      	bne.n	80014fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	f000 fb6c 	bl	8001bd4 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014fc:	4bc8      	ldr	r3, [pc, #800]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	220c      	movs	r2, #12
 8001502:	4013      	ands	r3, r2
 8001504:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001506:	4bc6      	ldr	r3, [pc, #792]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 8001508:	68da      	ldr	r2, [r3, #12]
 800150a:	2380      	movs	r3, #128	; 0x80
 800150c:	025b      	lsls	r3, r3, #9
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2201      	movs	r2, #1
 8001518:	4013      	ands	r3, r2
 800151a:	d100      	bne.n	800151e <HAL_RCC_OscConfig+0x36>
 800151c:	e07d      	b.n	800161a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	2b08      	cmp	r3, #8
 8001522:	d007      	beq.n	8001534 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	2b0c      	cmp	r3, #12
 8001528:	d112      	bne.n	8001550 <HAL_RCC_OscConfig+0x68>
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	2380      	movs	r3, #128	; 0x80
 800152e:	025b      	lsls	r3, r3, #9
 8001530:	429a      	cmp	r2, r3
 8001532:	d10d      	bne.n	8001550 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001534:	4bba      	ldr	r3, [pc, #744]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	029b      	lsls	r3, r3, #10
 800153c:	4013      	ands	r3, r2
 800153e:	d100      	bne.n	8001542 <HAL_RCC_OscConfig+0x5a>
 8001540:	e06a      	b.n	8001618 <HAL_RCC_OscConfig+0x130>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d166      	bne.n	8001618 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	f000 fb42 	bl	8001bd4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	2380      	movs	r3, #128	; 0x80
 8001556:	025b      	lsls	r3, r3, #9
 8001558:	429a      	cmp	r2, r3
 800155a:	d107      	bne.n	800156c <HAL_RCC_OscConfig+0x84>
 800155c:	4bb0      	ldr	r3, [pc, #704]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4baf      	ldr	r3, [pc, #700]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 8001562:	2180      	movs	r1, #128	; 0x80
 8001564:	0249      	lsls	r1, r1, #9
 8001566:	430a      	orrs	r2, r1
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	e027      	b.n	80015bc <HAL_RCC_OscConfig+0xd4>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	23a0      	movs	r3, #160	; 0xa0
 8001572:	02db      	lsls	r3, r3, #11
 8001574:	429a      	cmp	r2, r3
 8001576:	d10e      	bne.n	8001596 <HAL_RCC_OscConfig+0xae>
 8001578:	4ba9      	ldr	r3, [pc, #676]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4ba8      	ldr	r3, [pc, #672]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 800157e:	2180      	movs	r1, #128	; 0x80
 8001580:	02c9      	lsls	r1, r1, #11
 8001582:	430a      	orrs	r2, r1
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	4ba6      	ldr	r3, [pc, #664]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	4ba5      	ldr	r3, [pc, #660]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 800158c:	2180      	movs	r1, #128	; 0x80
 800158e:	0249      	lsls	r1, r1, #9
 8001590:	430a      	orrs	r2, r1
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	e012      	b.n	80015bc <HAL_RCC_OscConfig+0xd4>
 8001596:	4ba2      	ldr	r3, [pc, #648]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	4ba1      	ldr	r3, [pc, #644]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 800159c:	49a1      	ldr	r1, [pc, #644]	; (8001824 <HAL_RCC_OscConfig+0x33c>)
 800159e:	400a      	ands	r2, r1
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	4b9f      	ldr	r3, [pc, #636]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	2380      	movs	r3, #128	; 0x80
 80015a8:	025b      	lsls	r3, r3, #9
 80015aa:	4013      	ands	r3, r2
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4b9b      	ldr	r3, [pc, #620]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	4b9a      	ldr	r3, [pc, #616]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 80015b6:	499c      	ldr	r1, [pc, #624]	; (8001828 <HAL_RCC_OscConfig+0x340>)
 80015b8:	400a      	ands	r2, r1
 80015ba:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d014      	beq.n	80015ee <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c4:	f7ff fc78 	bl	8000eb8 <HAL_GetTick>
 80015c8:	0003      	movs	r3, r0
 80015ca:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015ce:	f7ff fc73 	bl	8000eb8 <HAL_GetTick>
 80015d2:	0002      	movs	r2, r0
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b64      	cmp	r3, #100	; 0x64
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e2f9      	b.n	8001bd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015e0:	4b8f      	ldr	r3, [pc, #572]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	029b      	lsls	r3, r3, #10
 80015e8:	4013      	ands	r3, r2
 80015ea:	d0f0      	beq.n	80015ce <HAL_RCC_OscConfig+0xe6>
 80015ec:	e015      	b.n	800161a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ee:	f7ff fc63 	bl	8000eb8 <HAL_GetTick>
 80015f2:	0003      	movs	r3, r0
 80015f4:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015f8:	f7ff fc5e 	bl	8000eb8 <HAL_GetTick>
 80015fc:	0002      	movs	r2, r0
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b64      	cmp	r3, #100	; 0x64
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e2e4      	b.n	8001bd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800160a:	4b85      	ldr	r3, [pc, #532]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	029b      	lsls	r3, r3, #10
 8001612:	4013      	ands	r3, r2
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x110>
 8001616:	e000      	b.n	800161a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001618:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2202      	movs	r2, #2
 8001620:	4013      	ands	r3, r2
 8001622:	d100      	bne.n	8001626 <HAL_RCC_OscConfig+0x13e>
 8001624:	e099      	b.n	800175a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	2220      	movs	r2, #32
 8001630:	4013      	ands	r3, r2
 8001632:	d009      	beq.n	8001648 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001634:	4b7a      	ldr	r3, [pc, #488]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b79      	ldr	r3, [pc, #484]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 800163a:	2120      	movs	r1, #32
 800163c:	430a      	orrs	r2, r1
 800163e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	2220      	movs	r2, #32
 8001644:	4393      	bics	r3, r2
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	2b04      	cmp	r3, #4
 800164c:	d005      	beq.n	800165a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	2b0c      	cmp	r3, #12
 8001652:	d13e      	bne.n	80016d2 <HAL_RCC_OscConfig+0x1ea>
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d13b      	bne.n	80016d2 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800165a:	4b71      	ldr	r3, [pc, #452]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2204      	movs	r2, #4
 8001660:	4013      	ands	r3, r2
 8001662:	d004      	beq.n	800166e <HAL_RCC_OscConfig+0x186>
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e2b2      	b.n	8001bd4 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166e:	4b6c      	ldr	r3, [pc, #432]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	4a6e      	ldr	r2, [pc, #440]	; (800182c <HAL_RCC_OscConfig+0x344>)
 8001674:	4013      	ands	r3, r2
 8001676:	0019      	movs	r1, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	021a      	lsls	r2, r3, #8
 800167e:	4b68      	ldr	r3, [pc, #416]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 8001680:	430a      	orrs	r2, r1
 8001682:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001684:	4b66      	ldr	r3, [pc, #408]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2209      	movs	r2, #9
 800168a:	4393      	bics	r3, r2
 800168c:	0019      	movs	r1, r3
 800168e:	4b64      	ldr	r3, [pc, #400]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 8001690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001692:	430a      	orrs	r2, r1
 8001694:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001696:	f000 fbeb 	bl	8001e70 <HAL_RCC_GetSysClockFreq>
 800169a:	0001      	movs	r1, r0
 800169c:	4b60      	ldr	r3, [pc, #384]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	091b      	lsrs	r3, r3, #4
 80016a2:	220f      	movs	r2, #15
 80016a4:	4013      	ands	r3, r2
 80016a6:	4a62      	ldr	r2, [pc, #392]	; (8001830 <HAL_RCC_OscConfig+0x348>)
 80016a8:	5cd3      	ldrb	r3, [r2, r3]
 80016aa:	000a      	movs	r2, r1
 80016ac:	40da      	lsrs	r2, r3
 80016ae:	4b61      	ldr	r3, [pc, #388]	; (8001834 <HAL_RCC_OscConfig+0x34c>)
 80016b0:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80016b2:	4b61      	ldr	r3, [pc, #388]	; (8001838 <HAL_RCC_OscConfig+0x350>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2513      	movs	r5, #19
 80016b8:	197c      	adds	r4, r7, r5
 80016ba:	0018      	movs	r0, r3
 80016bc:	f7ff fbb6 	bl	8000e2c <HAL_InitTick>
 80016c0:	0003      	movs	r3, r0
 80016c2:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80016c4:	197b      	adds	r3, r7, r5
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d046      	beq.n	800175a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80016cc:	197b      	adds	r3, r7, r5
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	e280      	b.n	8001bd4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80016d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d027      	beq.n	8001728 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80016d8:	4b51      	ldr	r3, [pc, #324]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2209      	movs	r2, #9
 80016de:	4393      	bics	r3, r2
 80016e0:	0019      	movs	r1, r3
 80016e2:	4b4f      	ldr	r3, [pc, #316]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 80016e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016e6:	430a      	orrs	r2, r1
 80016e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ea:	f7ff fbe5 	bl	8000eb8 <HAL_GetTick>
 80016ee:	0003      	movs	r3, r0
 80016f0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016f4:	f7ff fbe0 	bl	8000eb8 <HAL_GetTick>
 80016f8:	0002      	movs	r2, r0
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e266      	b.n	8001bd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001706:	4b46      	ldr	r3, [pc, #280]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2204      	movs	r2, #4
 800170c:	4013      	ands	r3, r2
 800170e:	d0f1      	beq.n	80016f4 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001710:	4b43      	ldr	r3, [pc, #268]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	4a45      	ldr	r2, [pc, #276]	; (800182c <HAL_RCC_OscConfig+0x344>)
 8001716:	4013      	ands	r3, r2
 8001718:	0019      	movs	r1, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	021a      	lsls	r2, r3, #8
 8001720:	4b3f      	ldr	r3, [pc, #252]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 8001722:	430a      	orrs	r2, r1
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	e018      	b.n	800175a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001728:	4b3d      	ldr	r3, [pc, #244]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b3c      	ldr	r3, [pc, #240]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 800172e:	2101      	movs	r1, #1
 8001730:	438a      	bics	r2, r1
 8001732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001734:	f7ff fbc0 	bl	8000eb8 <HAL_GetTick>
 8001738:	0003      	movs	r3, r0
 800173a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800173e:	f7ff fbbb 	bl	8000eb8 <HAL_GetTick>
 8001742:	0002      	movs	r2, r0
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e241      	b.n	8001bd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001750:	4b33      	ldr	r3, [pc, #204]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2204      	movs	r2, #4
 8001756:	4013      	ands	r3, r2
 8001758:	d1f1      	bne.n	800173e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2210      	movs	r2, #16
 8001760:	4013      	ands	r3, r2
 8001762:	d100      	bne.n	8001766 <HAL_RCC_OscConfig+0x27e>
 8001764:	e0a1      	b.n	80018aa <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d140      	bne.n	80017ee <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800176c:	4b2c      	ldr	r3, [pc, #176]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4013      	ands	r3, r2
 8001776:	d005      	beq.n	8001784 <HAL_RCC_OscConfig+0x29c>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d101      	bne.n	8001784 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e227      	b.n	8001bd4 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001784:	4b26      	ldr	r3, [pc, #152]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	4a2c      	ldr	r2, [pc, #176]	; (800183c <HAL_RCC_OscConfig+0x354>)
 800178a:	4013      	ands	r3, r2
 800178c:	0019      	movs	r1, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a1a      	ldr	r2, [r3, #32]
 8001792:	4b23      	ldr	r3, [pc, #140]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 8001794:	430a      	orrs	r2, r1
 8001796:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001798:	4b21      	ldr	r3, [pc, #132]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	021b      	lsls	r3, r3, #8
 800179e:	0a19      	lsrs	r1, r3, #8
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	69db      	ldr	r3, [r3, #28]
 80017a4:	061a      	lsls	r2, r3, #24
 80017a6:	4b1e      	ldr	r3, [pc, #120]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 80017a8:	430a      	orrs	r2, r1
 80017aa:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	0b5b      	lsrs	r3, r3, #13
 80017b2:	3301      	adds	r3, #1
 80017b4:	2280      	movs	r2, #128	; 0x80
 80017b6:	0212      	lsls	r2, r2, #8
 80017b8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80017ba:	4b19      	ldr	r3, [pc, #100]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	091b      	lsrs	r3, r3, #4
 80017c0:	210f      	movs	r1, #15
 80017c2:	400b      	ands	r3, r1
 80017c4:	491a      	ldr	r1, [pc, #104]	; (8001830 <HAL_RCC_OscConfig+0x348>)
 80017c6:	5ccb      	ldrb	r3, [r1, r3]
 80017c8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80017ca:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <HAL_RCC_OscConfig+0x34c>)
 80017cc:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80017ce:	4b1a      	ldr	r3, [pc, #104]	; (8001838 <HAL_RCC_OscConfig+0x350>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2513      	movs	r5, #19
 80017d4:	197c      	adds	r4, r7, r5
 80017d6:	0018      	movs	r0, r3
 80017d8:	f7ff fb28 	bl	8000e2c <HAL_InitTick>
 80017dc:	0003      	movs	r3, r0
 80017de:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80017e0:	197b      	adds	r3, r7, r5
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d060      	beq.n	80018aa <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80017e8:	197b      	adds	r3, r7, r5
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	e1f2      	b.n	8001bd4 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d03f      	beq.n	8001876 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017f6:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <HAL_RCC_OscConfig+0x338>)
 80017fc:	2180      	movs	r1, #128	; 0x80
 80017fe:	0049      	lsls	r1, r1, #1
 8001800:	430a      	orrs	r2, r1
 8001802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001804:	f7ff fb58 	bl	8000eb8 <HAL_GetTick>
 8001808:	0003      	movs	r3, r0
 800180a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800180c:	e018      	b.n	8001840 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800180e:	f7ff fb53 	bl	8000eb8 <HAL_GetTick>
 8001812:	0002      	movs	r2, r0
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d911      	bls.n	8001840 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e1d9      	b.n	8001bd4 <HAL_RCC_OscConfig+0x6ec>
 8001820:	40021000 	.word	0x40021000
 8001824:	fffeffff 	.word	0xfffeffff
 8001828:	fffbffff 	.word	0xfffbffff
 800182c:	ffffe0ff 	.word	0xffffe0ff
 8001830:	08003c5c 	.word	0x08003c5c
 8001834:	20000020 	.word	0x20000020
 8001838:	20000024 	.word	0x20000024
 800183c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001840:	4bc9      	ldr	r3, [pc, #804]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4013      	ands	r3, r2
 800184a:	d0e0      	beq.n	800180e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800184c:	4bc6      	ldr	r3, [pc, #792]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	4ac6      	ldr	r2, [pc, #792]	; (8001b6c <HAL_RCC_OscConfig+0x684>)
 8001852:	4013      	ands	r3, r2
 8001854:	0019      	movs	r1, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a1a      	ldr	r2, [r3, #32]
 800185a:	4bc3      	ldr	r3, [pc, #780]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 800185c:	430a      	orrs	r2, r1
 800185e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001860:	4bc1      	ldr	r3, [pc, #772]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	021b      	lsls	r3, r3, #8
 8001866:	0a19      	lsrs	r1, r3, #8
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	69db      	ldr	r3, [r3, #28]
 800186c:	061a      	lsls	r2, r3, #24
 800186e:	4bbe      	ldr	r3, [pc, #760]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 8001870:	430a      	orrs	r2, r1
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	e019      	b.n	80018aa <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001876:	4bbc      	ldr	r3, [pc, #752]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	4bbb      	ldr	r3, [pc, #748]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 800187c:	49bc      	ldr	r1, [pc, #752]	; (8001b70 <HAL_RCC_OscConfig+0x688>)
 800187e:	400a      	ands	r2, r1
 8001880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001882:	f7ff fb19 	bl	8000eb8 <HAL_GetTick>
 8001886:	0003      	movs	r3, r0
 8001888:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800188c:	f7ff fb14 	bl	8000eb8 <HAL_GetTick>
 8001890:	0002      	movs	r2, r0
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e19a      	b.n	8001bd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800189e:	4bb2      	ldr	r3, [pc, #712]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	2380      	movs	r3, #128	; 0x80
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4013      	ands	r3, r2
 80018a8:	d1f0      	bne.n	800188c <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2208      	movs	r2, #8
 80018b0:	4013      	ands	r3, r2
 80018b2:	d036      	beq.n	8001922 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d019      	beq.n	80018f0 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018bc:	4baa      	ldr	r3, [pc, #680]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 80018be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018c0:	4ba9      	ldr	r3, [pc, #676]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 80018c2:	2101      	movs	r1, #1
 80018c4:	430a      	orrs	r2, r1
 80018c6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c8:	f7ff faf6 	bl	8000eb8 <HAL_GetTick>
 80018cc:	0003      	movs	r3, r0
 80018ce:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018d2:	f7ff faf1 	bl	8000eb8 <HAL_GetTick>
 80018d6:	0002      	movs	r2, r0
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e177      	b.n	8001bd4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018e4:	4ba0      	ldr	r3, [pc, #640]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 80018e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018e8:	2202      	movs	r2, #2
 80018ea:	4013      	ands	r3, r2
 80018ec:	d0f1      	beq.n	80018d2 <HAL_RCC_OscConfig+0x3ea>
 80018ee:	e018      	b.n	8001922 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018f0:	4b9d      	ldr	r3, [pc, #628]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 80018f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018f4:	4b9c      	ldr	r3, [pc, #624]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 80018f6:	2101      	movs	r1, #1
 80018f8:	438a      	bics	r2, r1
 80018fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018fc:	f7ff fadc 	bl	8000eb8 <HAL_GetTick>
 8001900:	0003      	movs	r3, r0
 8001902:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001906:	f7ff fad7 	bl	8000eb8 <HAL_GetTick>
 800190a:	0002      	movs	r2, r0
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e15d      	b.n	8001bd4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001918:	4b93      	ldr	r3, [pc, #588]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 800191a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800191c:	2202      	movs	r2, #2
 800191e:	4013      	ands	r3, r2
 8001920:	d1f1      	bne.n	8001906 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2204      	movs	r2, #4
 8001928:	4013      	ands	r3, r2
 800192a:	d100      	bne.n	800192e <HAL_RCC_OscConfig+0x446>
 800192c:	e0ae      	b.n	8001a8c <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800192e:	2023      	movs	r0, #35	; 0x23
 8001930:	183b      	adds	r3, r7, r0
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001936:	4b8c      	ldr	r3, [pc, #560]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 8001938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800193a:	2380      	movs	r3, #128	; 0x80
 800193c:	055b      	lsls	r3, r3, #21
 800193e:	4013      	ands	r3, r2
 8001940:	d109      	bne.n	8001956 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	4b89      	ldr	r3, [pc, #548]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 8001944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001946:	4b88      	ldr	r3, [pc, #544]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 8001948:	2180      	movs	r1, #128	; 0x80
 800194a:	0549      	lsls	r1, r1, #21
 800194c:	430a      	orrs	r2, r1
 800194e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001950:	183b      	adds	r3, r7, r0
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001956:	4b87      	ldr	r3, [pc, #540]	; (8001b74 <HAL_RCC_OscConfig+0x68c>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	2380      	movs	r3, #128	; 0x80
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	4013      	ands	r3, r2
 8001960:	d11a      	bne.n	8001998 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001962:	4b84      	ldr	r3, [pc, #528]	; (8001b74 <HAL_RCC_OscConfig+0x68c>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4b83      	ldr	r3, [pc, #524]	; (8001b74 <HAL_RCC_OscConfig+0x68c>)
 8001968:	2180      	movs	r1, #128	; 0x80
 800196a:	0049      	lsls	r1, r1, #1
 800196c:	430a      	orrs	r2, r1
 800196e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001970:	f7ff faa2 	bl	8000eb8 <HAL_GetTick>
 8001974:	0003      	movs	r3, r0
 8001976:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800197a:	f7ff fa9d 	bl	8000eb8 <HAL_GetTick>
 800197e:	0002      	movs	r2, r0
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b64      	cmp	r3, #100	; 0x64
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e123      	b.n	8001bd4 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198c:	4b79      	ldr	r3, [pc, #484]	; (8001b74 <HAL_RCC_OscConfig+0x68c>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4013      	ands	r3, r2
 8001996:	d0f0      	beq.n	800197a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d107      	bne.n	80019b4 <HAL_RCC_OscConfig+0x4cc>
 80019a4:	4b70      	ldr	r3, [pc, #448]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 80019a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019a8:	4b6f      	ldr	r3, [pc, #444]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 80019aa:	2180      	movs	r1, #128	; 0x80
 80019ac:	0049      	lsls	r1, r1, #1
 80019ae:	430a      	orrs	r2, r1
 80019b0:	651a      	str	r2, [r3, #80]	; 0x50
 80019b2:	e031      	b.n	8001a18 <HAL_RCC_OscConfig+0x530>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d10c      	bne.n	80019d6 <HAL_RCC_OscConfig+0x4ee>
 80019bc:	4b6a      	ldr	r3, [pc, #424]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 80019be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019c0:	4b69      	ldr	r3, [pc, #420]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 80019c2:	496b      	ldr	r1, [pc, #428]	; (8001b70 <HAL_RCC_OscConfig+0x688>)
 80019c4:	400a      	ands	r2, r1
 80019c6:	651a      	str	r2, [r3, #80]	; 0x50
 80019c8:	4b67      	ldr	r3, [pc, #412]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 80019ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019cc:	4b66      	ldr	r3, [pc, #408]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 80019ce:	496a      	ldr	r1, [pc, #424]	; (8001b78 <HAL_RCC_OscConfig+0x690>)
 80019d0:	400a      	ands	r2, r1
 80019d2:	651a      	str	r2, [r3, #80]	; 0x50
 80019d4:	e020      	b.n	8001a18 <HAL_RCC_OscConfig+0x530>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	23a0      	movs	r3, #160	; 0xa0
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	429a      	cmp	r2, r3
 80019e0:	d10e      	bne.n	8001a00 <HAL_RCC_OscConfig+0x518>
 80019e2:	4b61      	ldr	r3, [pc, #388]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 80019e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019e6:	4b60      	ldr	r3, [pc, #384]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 80019e8:	2180      	movs	r1, #128	; 0x80
 80019ea:	00c9      	lsls	r1, r1, #3
 80019ec:	430a      	orrs	r2, r1
 80019ee:	651a      	str	r2, [r3, #80]	; 0x50
 80019f0:	4b5d      	ldr	r3, [pc, #372]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 80019f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019f4:	4b5c      	ldr	r3, [pc, #368]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 80019f6:	2180      	movs	r1, #128	; 0x80
 80019f8:	0049      	lsls	r1, r1, #1
 80019fa:	430a      	orrs	r2, r1
 80019fc:	651a      	str	r2, [r3, #80]	; 0x50
 80019fe:	e00b      	b.n	8001a18 <HAL_RCC_OscConfig+0x530>
 8001a00:	4b59      	ldr	r3, [pc, #356]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 8001a02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a04:	4b58      	ldr	r3, [pc, #352]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 8001a06:	495a      	ldr	r1, [pc, #360]	; (8001b70 <HAL_RCC_OscConfig+0x688>)
 8001a08:	400a      	ands	r2, r1
 8001a0a:	651a      	str	r2, [r3, #80]	; 0x50
 8001a0c:	4b56      	ldr	r3, [pc, #344]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 8001a0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a10:	4b55      	ldr	r3, [pc, #340]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 8001a12:	4959      	ldr	r1, [pc, #356]	; (8001b78 <HAL_RCC_OscConfig+0x690>)
 8001a14:	400a      	ands	r2, r1
 8001a16:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d015      	beq.n	8001a4c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a20:	f7ff fa4a 	bl	8000eb8 <HAL_GetTick>
 8001a24:	0003      	movs	r3, r0
 8001a26:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a28:	e009      	b.n	8001a3e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a2a:	f7ff fa45 	bl	8000eb8 <HAL_GetTick>
 8001a2e:	0002      	movs	r2, r0
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	4a51      	ldr	r2, [pc, #324]	; (8001b7c <HAL_RCC_OscConfig+0x694>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e0ca      	b.n	8001bd4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a3e:	4b4a      	ldr	r3, [pc, #296]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 8001a40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a42:	2380      	movs	r3, #128	; 0x80
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4013      	ands	r3, r2
 8001a48:	d0ef      	beq.n	8001a2a <HAL_RCC_OscConfig+0x542>
 8001a4a:	e014      	b.n	8001a76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4c:	f7ff fa34 	bl	8000eb8 <HAL_GetTick>
 8001a50:	0003      	movs	r3, r0
 8001a52:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a54:	e009      	b.n	8001a6a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a56:	f7ff fa2f 	bl	8000eb8 <HAL_GetTick>
 8001a5a:	0002      	movs	r2, r0
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	4a46      	ldr	r2, [pc, #280]	; (8001b7c <HAL_RCC_OscConfig+0x694>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e0b4      	b.n	8001bd4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a6a:	4b3f      	ldr	r3, [pc, #252]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 8001a6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4013      	ands	r3, r2
 8001a74:	d1ef      	bne.n	8001a56 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a76:	2323      	movs	r3, #35	; 0x23
 8001a78:	18fb      	adds	r3, r7, r3
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d105      	bne.n	8001a8c <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a80:	4b39      	ldr	r3, [pc, #228]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 8001a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a84:	4b38      	ldr	r3, [pc, #224]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 8001a86:	493e      	ldr	r1, [pc, #248]	; (8001b80 <HAL_RCC_OscConfig+0x698>)
 8001a88:	400a      	ands	r2, r1
 8001a8a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d100      	bne.n	8001a96 <HAL_RCC_OscConfig+0x5ae>
 8001a94:	e09d      	b.n	8001bd2 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	2b0c      	cmp	r3, #12
 8001a9a:	d100      	bne.n	8001a9e <HAL_RCC_OscConfig+0x5b6>
 8001a9c:	e076      	b.n	8001b8c <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d145      	bne.n	8001b32 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa6:	4b30      	ldr	r3, [pc, #192]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	4b2f      	ldr	r3, [pc, #188]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 8001aac:	4935      	ldr	r1, [pc, #212]	; (8001b84 <HAL_RCC_OscConfig+0x69c>)
 8001aae:	400a      	ands	r2, r1
 8001ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab2:	f7ff fa01 	bl	8000eb8 <HAL_GetTick>
 8001ab6:	0003      	movs	r3, r0
 8001ab8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001abc:	f7ff f9fc 	bl	8000eb8 <HAL_GetTick>
 8001ac0:	0002      	movs	r2, r0
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e082      	b.n	8001bd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ace:	4b26      	ldr	r3, [pc, #152]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	2380      	movs	r3, #128	; 0x80
 8001ad4:	049b      	lsls	r3, r3, #18
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ada:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	4a2a      	ldr	r2, [pc, #168]	; (8001b88 <HAL_RCC_OscConfig+0x6a0>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	0019      	movs	r1, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aec:	431a      	orrs	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	431a      	orrs	r2, r3
 8001af4:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 8001af6:	430a      	orrs	r2, r1
 8001af8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001afa:	4b1b      	ldr	r3, [pc, #108]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 8001b00:	2180      	movs	r1, #128	; 0x80
 8001b02:	0449      	lsls	r1, r1, #17
 8001b04:	430a      	orrs	r2, r1
 8001b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b08:	f7ff f9d6 	bl	8000eb8 <HAL_GetTick>
 8001b0c:	0003      	movs	r3, r0
 8001b0e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b12:	f7ff f9d1 	bl	8000eb8 <HAL_GetTick>
 8001b16:	0002      	movs	r2, r0
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e057      	b.n	8001bd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001b24:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	2380      	movs	r3, #128	; 0x80
 8001b2a:	049b      	lsls	r3, r3, #18
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d0f0      	beq.n	8001b12 <HAL_RCC_OscConfig+0x62a>
 8001b30:	e04f      	b.n	8001bd2 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b32:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 8001b38:	4912      	ldr	r1, [pc, #72]	; (8001b84 <HAL_RCC_OscConfig+0x69c>)
 8001b3a:	400a      	ands	r2, r1
 8001b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3e:	f7ff f9bb 	bl	8000eb8 <HAL_GetTick>
 8001b42:	0003      	movs	r3, r0
 8001b44:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b48:	f7ff f9b6 	bl	8000eb8 <HAL_GetTick>
 8001b4c:	0002      	movs	r2, r0
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e03c      	b.n	8001bd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b5a:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <HAL_RCC_OscConfig+0x680>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	2380      	movs	r3, #128	; 0x80
 8001b60:	049b      	lsls	r3, r3, #18
 8001b62:	4013      	ands	r3, r2
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x660>
 8001b66:	e034      	b.n	8001bd2 <HAL_RCC_OscConfig+0x6ea>
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	ffff1fff 	.word	0xffff1fff
 8001b70:	fffffeff 	.word	0xfffffeff
 8001b74:	40007000 	.word	0x40007000
 8001b78:	fffffbff 	.word	0xfffffbff
 8001b7c:	00001388 	.word	0x00001388
 8001b80:	efffffff 	.word	0xefffffff
 8001b84:	feffffff 	.word	0xfeffffff
 8001b88:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d101      	bne.n	8001b98 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e01d      	b.n	8001bd4 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b98:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <HAL_RCC_OscConfig+0x6f4>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	025b      	lsls	r3, r3, #9
 8001ba4:	401a      	ands	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d10f      	bne.n	8001bce <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	23f0      	movs	r3, #240	; 0xf0
 8001bb2:	039b      	lsls	r3, r3, #14
 8001bb4:	401a      	ands	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d107      	bne.n	8001bce <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	23c0      	movs	r3, #192	; 0xc0
 8001bc2:	041b      	lsls	r3, r3, #16
 8001bc4:	401a      	ands	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d001      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	b00a      	add	sp, #40	; 0x28
 8001bda:	bdb0      	pop	{r4, r5, r7, pc}
 8001bdc:	40021000 	.word	0x40021000

08001be0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be0:	b5b0      	push	{r4, r5, r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e128      	b.n	8001e46 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf4:	4b96      	ldr	r3, [pc, #600]	; (8001e50 <HAL_RCC_ClockConfig+0x270>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d91e      	bls.n	8001c40 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c02:	4b93      	ldr	r3, [pc, #588]	; (8001e50 <HAL_RCC_ClockConfig+0x270>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2201      	movs	r2, #1
 8001c08:	4393      	bics	r3, r2
 8001c0a:	0019      	movs	r1, r3
 8001c0c:	4b90      	ldr	r3, [pc, #576]	; (8001e50 <HAL_RCC_ClockConfig+0x270>)
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c14:	f7ff f950 	bl	8000eb8 <HAL_GetTick>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1c:	e009      	b.n	8001c32 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c1e:	f7ff f94b 	bl	8000eb8 <HAL_GetTick>
 8001c22:	0002      	movs	r2, r0
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	4a8a      	ldr	r2, [pc, #552]	; (8001e54 <HAL_RCC_ClockConfig+0x274>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e109      	b.n	8001e46 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c32:	4b87      	ldr	r3, [pc, #540]	; (8001e50 <HAL_RCC_ClockConfig+0x270>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2201      	movs	r2, #1
 8001c38:	4013      	ands	r3, r2
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d1ee      	bne.n	8001c1e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2202      	movs	r2, #2
 8001c46:	4013      	ands	r3, r2
 8001c48:	d009      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c4a:	4b83      	ldr	r3, [pc, #524]	; (8001e58 <HAL_RCC_ClockConfig+0x278>)
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	22f0      	movs	r2, #240	; 0xf0
 8001c50:	4393      	bics	r3, r2
 8001c52:	0019      	movs	r1, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	4b7f      	ldr	r3, [pc, #508]	; (8001e58 <HAL_RCC_ClockConfig+0x278>)
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2201      	movs	r2, #1
 8001c64:	4013      	ands	r3, r2
 8001c66:	d100      	bne.n	8001c6a <HAL_RCC_ClockConfig+0x8a>
 8001c68:	e089      	b.n	8001d7e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d107      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c72:	4b79      	ldr	r3, [pc, #484]	; (8001e58 <HAL_RCC_ClockConfig+0x278>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	2380      	movs	r3, #128	; 0x80
 8001c78:	029b      	lsls	r3, r3, #10
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d120      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e0e1      	b.n	8001e46 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b03      	cmp	r3, #3
 8001c88:	d107      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c8a:	4b73      	ldr	r3, [pc, #460]	; (8001e58 <HAL_RCC_ClockConfig+0x278>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	2380      	movs	r3, #128	; 0x80
 8001c90:	049b      	lsls	r3, r3, #18
 8001c92:	4013      	ands	r3, r2
 8001c94:	d114      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e0d5      	b.n	8001e46 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d106      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ca2:	4b6d      	ldr	r3, [pc, #436]	; (8001e58 <HAL_RCC_ClockConfig+0x278>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2204      	movs	r2, #4
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d109      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e0ca      	b.n	8001e46 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001cb0:	4b69      	ldr	r3, [pc, #420]	; (8001e58 <HAL_RCC_ClockConfig+0x278>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	2380      	movs	r3, #128	; 0x80
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d101      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e0c2      	b.n	8001e46 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cc0:	4b65      	ldr	r3, [pc, #404]	; (8001e58 <HAL_RCC_ClockConfig+0x278>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	4393      	bics	r3, r2
 8001cc8:	0019      	movs	r1, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	4b62      	ldr	r3, [pc, #392]	; (8001e58 <HAL_RCC_ClockConfig+0x278>)
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cd4:	f7ff f8f0 	bl	8000eb8 <HAL_GetTick>
 8001cd8:	0003      	movs	r3, r0
 8001cda:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d111      	bne.n	8001d08 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ce4:	e009      	b.n	8001cfa <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce6:	f7ff f8e7 	bl	8000eb8 <HAL_GetTick>
 8001cea:	0002      	movs	r2, r0
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	4a58      	ldr	r2, [pc, #352]	; (8001e54 <HAL_RCC_ClockConfig+0x274>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e0a5      	b.n	8001e46 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cfa:	4b57      	ldr	r3, [pc, #348]	; (8001e58 <HAL_RCC_ClockConfig+0x278>)
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	220c      	movs	r2, #12
 8001d00:	4013      	ands	r3, r2
 8001d02:	2b08      	cmp	r3, #8
 8001d04:	d1ef      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0x106>
 8001d06:	e03a      	b.n	8001d7e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b03      	cmp	r3, #3
 8001d0e:	d111      	bne.n	8001d34 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d10:	e009      	b.n	8001d26 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d12:	f7ff f8d1 	bl	8000eb8 <HAL_GetTick>
 8001d16:	0002      	movs	r2, r0
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	4a4d      	ldr	r2, [pc, #308]	; (8001e54 <HAL_RCC_ClockConfig+0x274>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e08f      	b.n	8001e46 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d26:	4b4c      	ldr	r3, [pc, #304]	; (8001e58 <HAL_RCC_ClockConfig+0x278>)
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	220c      	movs	r2, #12
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	2b0c      	cmp	r3, #12
 8001d30:	d1ef      	bne.n	8001d12 <HAL_RCC_ClockConfig+0x132>
 8001d32:	e024      	b.n	8001d7e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d11b      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d3c:	e009      	b.n	8001d52 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d3e:	f7ff f8bb 	bl	8000eb8 <HAL_GetTick>
 8001d42:	0002      	movs	r2, r0
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	4a42      	ldr	r2, [pc, #264]	; (8001e54 <HAL_RCC_ClockConfig+0x274>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e079      	b.n	8001e46 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d52:	4b41      	ldr	r3, [pc, #260]	; (8001e58 <HAL_RCC_ClockConfig+0x278>)
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	220c      	movs	r2, #12
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	d1ef      	bne.n	8001d3e <HAL_RCC_ClockConfig+0x15e>
 8001d5e:	e00e      	b.n	8001d7e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d60:	f7ff f8aa 	bl	8000eb8 <HAL_GetTick>
 8001d64:	0002      	movs	r2, r0
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	4a3a      	ldr	r2, [pc, #232]	; (8001e54 <HAL_RCC_ClockConfig+0x274>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e068      	b.n	8001e46 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d74:	4b38      	ldr	r3, [pc, #224]	; (8001e58 <HAL_RCC_ClockConfig+0x278>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	220c      	movs	r2, #12
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	d1f0      	bne.n	8001d60 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d7e:	4b34      	ldr	r3, [pc, #208]	; (8001e50 <HAL_RCC_ClockConfig+0x270>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2201      	movs	r2, #1
 8001d84:	4013      	ands	r3, r2
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d21e      	bcs.n	8001dca <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8c:	4b30      	ldr	r3, [pc, #192]	; (8001e50 <HAL_RCC_ClockConfig+0x270>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2201      	movs	r2, #1
 8001d92:	4393      	bics	r3, r2
 8001d94:	0019      	movs	r1, r3
 8001d96:	4b2e      	ldr	r3, [pc, #184]	; (8001e50 <HAL_RCC_ClockConfig+0x270>)
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d9e:	f7ff f88b 	bl	8000eb8 <HAL_GetTick>
 8001da2:	0003      	movs	r3, r0
 8001da4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da6:	e009      	b.n	8001dbc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da8:	f7ff f886 	bl	8000eb8 <HAL_GetTick>
 8001dac:	0002      	movs	r2, r0
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	4a28      	ldr	r2, [pc, #160]	; (8001e54 <HAL_RCC_ClockConfig+0x274>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e044      	b.n	8001e46 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dbc:	4b24      	ldr	r3, [pc, #144]	; (8001e50 <HAL_RCC_ClockConfig+0x270>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d1ee      	bne.n	8001da8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2204      	movs	r2, #4
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d009      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dd4:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <HAL_RCC_ClockConfig+0x278>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	4a20      	ldr	r2, [pc, #128]	; (8001e5c <HAL_RCC_ClockConfig+0x27c>)
 8001dda:	4013      	ands	r3, r2
 8001ddc:	0019      	movs	r1, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	4b1d      	ldr	r3, [pc, #116]	; (8001e58 <HAL_RCC_ClockConfig+0x278>)
 8001de4:	430a      	orrs	r2, r1
 8001de6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2208      	movs	r2, #8
 8001dee:	4013      	ands	r3, r2
 8001df0:	d00a      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001df2:	4b19      	ldr	r3, [pc, #100]	; (8001e58 <HAL_RCC_ClockConfig+0x278>)
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	4a1a      	ldr	r2, [pc, #104]	; (8001e60 <HAL_RCC_ClockConfig+0x280>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	0019      	movs	r1, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	00da      	lsls	r2, r3, #3
 8001e02:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <HAL_RCC_ClockConfig+0x278>)
 8001e04:	430a      	orrs	r2, r1
 8001e06:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e08:	f000 f832 	bl	8001e70 <HAL_RCC_GetSysClockFreq>
 8001e0c:	0001      	movs	r1, r0
 8001e0e:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <HAL_RCC_ClockConfig+0x278>)
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	091b      	lsrs	r3, r3, #4
 8001e14:	220f      	movs	r2, #15
 8001e16:	4013      	ands	r3, r2
 8001e18:	4a12      	ldr	r2, [pc, #72]	; (8001e64 <HAL_RCC_ClockConfig+0x284>)
 8001e1a:	5cd3      	ldrb	r3, [r2, r3]
 8001e1c:	000a      	movs	r2, r1
 8001e1e:	40da      	lsrs	r2, r3
 8001e20:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <HAL_RCC_ClockConfig+0x288>)
 8001e22:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e24:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <HAL_RCC_ClockConfig+0x28c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	250b      	movs	r5, #11
 8001e2a:	197c      	adds	r4, r7, r5
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f7fe fffd 	bl	8000e2c <HAL_InitTick>
 8001e32:	0003      	movs	r3, r0
 8001e34:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001e36:	197b      	adds	r3, r7, r5
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d002      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001e3e:	197b      	adds	r3, r7, r5
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	e000      	b.n	8001e46 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	0018      	movs	r0, r3
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	b004      	add	sp, #16
 8001e4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	40022000 	.word	0x40022000
 8001e54:	00001388 	.word	0x00001388
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	fffff8ff 	.word	0xfffff8ff
 8001e60:	ffffc7ff 	.word	0xffffc7ff
 8001e64:	08003c5c 	.word	0x08003c5c
 8001e68:	20000020 	.word	0x20000020
 8001e6c:	20000024 	.word	0x20000024

08001e70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e70:	b5b0      	push	{r4, r5, r7, lr}
 8001e72:	b08e      	sub	sp, #56	; 0x38
 8001e74:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001e76:	4b4c      	ldr	r3, [pc, #304]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e7e:	230c      	movs	r3, #12
 8001e80:	4013      	ands	r3, r2
 8001e82:	2b0c      	cmp	r3, #12
 8001e84:	d014      	beq.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x40>
 8001e86:	d900      	bls.n	8001e8a <HAL_RCC_GetSysClockFreq+0x1a>
 8001e88:	e07b      	b.n	8001f82 <HAL_RCC_GetSysClockFreq+0x112>
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	d002      	beq.n	8001e94 <HAL_RCC_GetSysClockFreq+0x24>
 8001e8e:	2b08      	cmp	r3, #8
 8001e90:	d00b      	beq.n	8001eaa <HAL_RCC_GetSysClockFreq+0x3a>
 8001e92:	e076      	b.n	8001f82 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e94:	4b44      	ldr	r3, [pc, #272]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2210      	movs	r2, #16
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d002      	beq.n	8001ea4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001e9e:	4b43      	ldr	r3, [pc, #268]	; (8001fac <HAL_RCC_GetSysClockFreq+0x13c>)
 8001ea0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001ea2:	e07c      	b.n	8001f9e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001ea4:	4b42      	ldr	r3, [pc, #264]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x140>)
 8001ea6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ea8:	e079      	b.n	8001f9e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001eaa:	4b42      	ldr	r3, [pc, #264]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x144>)
 8001eac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001eae:	e076      	b.n	8001f9e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb2:	0c9a      	lsrs	r2, r3, #18
 8001eb4:	230f      	movs	r3, #15
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	4b3f      	ldr	r3, [pc, #252]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x148>)
 8001eba:	5c9b      	ldrb	r3, [r3, r2]
 8001ebc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec0:	0d9a      	lsrs	r2, r3, #22
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001eca:	4b37      	ldr	r3, [pc, #220]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	025b      	lsls	r3, r3, #9
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d01a      	beq.n	8001f0c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed8:	61bb      	str	r3, [r7, #24]
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
 8001ede:	4a35      	ldr	r2, [pc, #212]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x144>)
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	69b8      	ldr	r0, [r7, #24]
 8001ee4:	69f9      	ldr	r1, [r7, #28]
 8001ee6:	f7fe f9c3 	bl	8000270 <__aeabi_lmul>
 8001eea:	0002      	movs	r2, r0
 8001eec:	000b      	movs	r3, r1
 8001eee:	0010      	movs	r0, r2
 8001ef0:	0019      	movs	r1, r3
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	613b      	str	r3, [r7, #16]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	f7fe f997 	bl	8000230 <__aeabi_uldivmod>
 8001f02:	0002      	movs	r2, r0
 8001f04:	000b      	movs	r3, r1
 8001f06:	0013      	movs	r3, r2
 8001f08:	637b      	str	r3, [r7, #52]	; 0x34
 8001f0a:	e037      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001f0c:	4b26      	ldr	r3, [pc, #152]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2210      	movs	r2, #16
 8001f12:	4013      	ands	r3, r2
 8001f14:	d01a      	beq.n	8001f4c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	4a23      	ldr	r2, [pc, #140]	; (8001fac <HAL_RCC_GetSysClockFreq+0x13c>)
 8001f20:	2300      	movs	r3, #0
 8001f22:	68b8      	ldr	r0, [r7, #8]
 8001f24:	68f9      	ldr	r1, [r7, #12]
 8001f26:	f7fe f9a3 	bl	8000270 <__aeabi_lmul>
 8001f2a:	0002      	movs	r2, r0
 8001f2c:	000b      	movs	r3, r1
 8001f2e:	0010      	movs	r0, r2
 8001f30:	0019      	movs	r1, r3
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	603b      	str	r3, [r7, #0]
 8001f36:	2300      	movs	r3, #0
 8001f38:	607b      	str	r3, [r7, #4]
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f7fe f977 	bl	8000230 <__aeabi_uldivmod>
 8001f42:	0002      	movs	r2, r0
 8001f44:	000b      	movs	r3, r1
 8001f46:	0013      	movs	r3, r2
 8001f48:	637b      	str	r3, [r7, #52]	; 0x34
 8001f4a:	e017      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f4e:	0018      	movs	r0, r3
 8001f50:	2300      	movs	r3, #0
 8001f52:	0019      	movs	r1, r3
 8001f54:	4a16      	ldr	r2, [pc, #88]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x140>)
 8001f56:	2300      	movs	r3, #0
 8001f58:	f7fe f98a 	bl	8000270 <__aeabi_lmul>
 8001f5c:	0002      	movs	r2, r0
 8001f5e:	000b      	movs	r3, r1
 8001f60:	0010      	movs	r0, r2
 8001f62:	0019      	movs	r1, r3
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	001c      	movs	r4, r3
 8001f68:	2300      	movs	r3, #0
 8001f6a:	001d      	movs	r5, r3
 8001f6c:	0022      	movs	r2, r4
 8001f6e:	002b      	movs	r3, r5
 8001f70:	f7fe f95e 	bl	8000230 <__aeabi_uldivmod>
 8001f74:	0002      	movs	r2, r0
 8001f76:	000b      	movs	r3, r1
 8001f78:	0013      	movs	r3, r2
 8001f7a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f7e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f80:	e00d      	b.n	8001f9e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001f82:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	0b5b      	lsrs	r3, r3, #13
 8001f88:	2207      	movs	r2, #7
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
 8001f90:	3301      	adds	r3, #1
 8001f92:	2280      	movs	r2, #128	; 0x80
 8001f94:	0212      	lsls	r2, r2, #8
 8001f96:	409a      	lsls	r2, r3
 8001f98:	0013      	movs	r3, r2
 8001f9a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f9c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	b00e      	add	sp, #56	; 0x38
 8001fa6:	bdb0      	pop	{r4, r5, r7, pc}
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	003d0900 	.word	0x003d0900
 8001fb0:	00f42400 	.word	0x00f42400
 8001fb4:	007a1200 	.word	0x007a1200
 8001fb8:	08003c74 	.word	0x08003c74

08001fbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fc0:	4b02      	ldr	r3, [pc, #8]	; (8001fcc <HAL_RCC_GetHCLKFreq+0x10>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
}
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	20000020 	.word	0x20000020

08001fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fd4:	f7ff fff2 	bl	8001fbc <HAL_RCC_GetHCLKFreq>
 8001fd8:	0001      	movs	r1, r0
 8001fda:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	2207      	movs	r2, #7
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	4a04      	ldr	r2, [pc, #16]	; (8001ff8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fe6:	5cd3      	ldrb	r3, [r2, r3]
 8001fe8:	40d9      	lsrs	r1, r3
 8001fea:	000b      	movs	r3, r1
}
 8001fec:	0018      	movs	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	46c0      	nop			; (mov r8, r8)
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	08003c6c 	.word	0x08003c6c

08001ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002000:	f7ff ffdc 	bl	8001fbc <HAL_RCC_GetHCLKFreq>
 8002004:	0001      	movs	r1, r0
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	0adb      	lsrs	r3, r3, #11
 800200c:	2207      	movs	r2, #7
 800200e:	4013      	ands	r3, r2
 8002010:	4a04      	ldr	r2, [pc, #16]	; (8002024 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002012:	5cd3      	ldrb	r3, [r2, r3]
 8002014:	40d9      	lsrs	r1, r3
 8002016:	000b      	movs	r3, r1
}
 8002018:	0018      	movs	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	40021000 	.word	0x40021000
 8002024:	08003c6c 	.word	0x08003c6c

08002028 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002030:	2017      	movs	r0, #23
 8002032:	183b      	adds	r3, r7, r0
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2220      	movs	r2, #32
 800203e:	4013      	ands	r3, r2
 8002040:	d100      	bne.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002042:	e0c2      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002044:	4b81      	ldr	r3, [pc, #516]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002046:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002048:	2380      	movs	r3, #128	; 0x80
 800204a:	055b      	lsls	r3, r3, #21
 800204c:	4013      	ands	r3, r2
 800204e:	d109      	bne.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002050:	4b7e      	ldr	r3, [pc, #504]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002052:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002054:	4b7d      	ldr	r3, [pc, #500]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002056:	2180      	movs	r1, #128	; 0x80
 8002058:	0549      	lsls	r1, r1, #21
 800205a:	430a      	orrs	r2, r1
 800205c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800205e:	183b      	adds	r3, r7, r0
 8002060:	2201      	movs	r2, #1
 8002062:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002064:	4b7a      	ldr	r3, [pc, #488]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	2380      	movs	r3, #128	; 0x80
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	4013      	ands	r3, r2
 800206e:	d11a      	bne.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002070:	4b77      	ldr	r3, [pc, #476]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4b76      	ldr	r3, [pc, #472]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002076:	2180      	movs	r1, #128	; 0x80
 8002078:	0049      	lsls	r1, r1, #1
 800207a:	430a      	orrs	r2, r1
 800207c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800207e:	f7fe ff1b 	bl	8000eb8 <HAL_GetTick>
 8002082:	0003      	movs	r3, r0
 8002084:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002086:	e008      	b.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002088:	f7fe ff16 	bl	8000eb8 <HAL_GetTick>
 800208c:	0002      	movs	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b64      	cmp	r3, #100	; 0x64
 8002094:	d901      	bls.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e0d4      	b.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209a:	4b6d      	ldr	r3, [pc, #436]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	2380      	movs	r3, #128	; 0x80
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	4013      	ands	r3, r2
 80020a4:	d0f0      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80020a6:	4b69      	ldr	r3, [pc, #420]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	23c0      	movs	r3, #192	; 0xc0
 80020ac:	039b      	lsls	r3, r3, #14
 80020ae:	4013      	ands	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	23c0      	movs	r3, #192	; 0xc0
 80020b8:	039b      	lsls	r3, r3, #14
 80020ba:	4013      	ands	r3, r2
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d013      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	23c0      	movs	r3, #192	; 0xc0
 80020c8:	029b      	lsls	r3, r3, #10
 80020ca:	401a      	ands	r2, r3
 80020cc:	23c0      	movs	r3, #192	; 0xc0
 80020ce:	029b      	lsls	r3, r3, #10
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d10a      	bne.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80020d4:	4b5d      	ldr	r3, [pc, #372]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	2380      	movs	r3, #128	; 0x80
 80020da:	029b      	lsls	r3, r3, #10
 80020dc:	401a      	ands	r2, r3
 80020de:	2380      	movs	r3, #128	; 0x80
 80020e0:	029b      	lsls	r3, r3, #10
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d101      	bne.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e0ac      	b.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80020ea:	4b58      	ldr	r3, [pc, #352]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80020ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020ee:	23c0      	movs	r3, #192	; 0xc0
 80020f0:	029b      	lsls	r3, r3, #10
 80020f2:	4013      	ands	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d03b      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	23c0      	movs	r3, #192	; 0xc0
 8002102:	029b      	lsls	r3, r3, #10
 8002104:	4013      	ands	r3, r2
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	429a      	cmp	r2, r3
 800210a:	d033      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2220      	movs	r2, #32
 8002112:	4013      	ands	r3, r2
 8002114:	d02e      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002116:	4b4d      	ldr	r3, [pc, #308]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800211a:	4a4e      	ldr	r2, [pc, #312]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800211c:	4013      	ands	r3, r2
 800211e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002120:	4b4a      	ldr	r3, [pc, #296]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002122:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002124:	4b49      	ldr	r3, [pc, #292]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002126:	2180      	movs	r1, #128	; 0x80
 8002128:	0309      	lsls	r1, r1, #12
 800212a:	430a      	orrs	r2, r1
 800212c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800212e:	4b47      	ldr	r3, [pc, #284]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002130:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002132:	4b46      	ldr	r3, [pc, #280]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002134:	4948      	ldr	r1, [pc, #288]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002136:	400a      	ands	r2, r1
 8002138:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800213a:	4b44      	ldr	r3, [pc, #272]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	2380      	movs	r3, #128	; 0x80
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4013      	ands	r3, r2
 8002148:	d014      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214a:	f7fe feb5 	bl	8000eb8 <HAL_GetTick>
 800214e:	0003      	movs	r3, r0
 8002150:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002152:	e009      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002154:	f7fe feb0 	bl	8000eb8 <HAL_GetTick>
 8002158:	0002      	movs	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	4a3f      	ldr	r2, [pc, #252]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d901      	bls.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e06d      	b.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002168:	4b38      	ldr	r3, [pc, #224]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800216a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800216c:	2380      	movs	r3, #128	; 0x80
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4013      	ands	r3, r2
 8002172:	d0ef      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	23c0      	movs	r3, #192	; 0xc0
 800217a:	029b      	lsls	r3, r3, #10
 800217c:	401a      	ands	r2, r3
 800217e:	23c0      	movs	r3, #192	; 0xc0
 8002180:	029b      	lsls	r3, r3, #10
 8002182:	429a      	cmp	r2, r3
 8002184:	d10c      	bne.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002186:	4b31      	ldr	r3, [pc, #196]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a35      	ldr	r2, [pc, #212]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800218c:	4013      	ands	r3, r2
 800218e:	0019      	movs	r1, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	23c0      	movs	r3, #192	; 0xc0
 8002196:	039b      	lsls	r3, r3, #14
 8002198:	401a      	ands	r2, r3
 800219a:	4b2c      	ldr	r3, [pc, #176]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800219c:	430a      	orrs	r2, r1
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	4b2a      	ldr	r3, [pc, #168]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80021a2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	23c0      	movs	r3, #192	; 0xc0
 80021aa:	029b      	lsls	r3, r3, #10
 80021ac:	401a      	ands	r2, r3
 80021ae:	4b27      	ldr	r3, [pc, #156]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80021b0:	430a      	orrs	r2, r1
 80021b2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021b4:	2317      	movs	r3, #23
 80021b6:	18fb      	adds	r3, r7, r3
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d105      	bne.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021be:	4b23      	ldr	r3, [pc, #140]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80021c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021c2:	4b22      	ldr	r3, [pc, #136]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80021c4:	4927      	ldr	r1, [pc, #156]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80021c6:	400a      	ands	r2, r1
 80021c8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2202      	movs	r2, #2
 80021d0:	4013      	ands	r3, r2
 80021d2:	d009      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021d4:	4b1d      	ldr	r3, [pc, #116]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80021d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d8:	220c      	movs	r2, #12
 80021da:	4393      	bics	r3, r2
 80021dc:	0019      	movs	r1, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	4b1a      	ldr	r3, [pc, #104]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80021e4:	430a      	orrs	r2, r1
 80021e6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2204      	movs	r2, #4
 80021ee:	4013      	ands	r3, r2
 80021f0:	d009      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021f2:	4b16      	ldr	r3, [pc, #88]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80021f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f6:	4a1c      	ldr	r2, [pc, #112]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80021f8:	4013      	ands	r3, r2
 80021fa:	0019      	movs	r1, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68da      	ldr	r2, [r3, #12]
 8002200:	4b12      	ldr	r3, [pc, #72]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002202:	430a      	orrs	r2, r1
 8002204:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2208      	movs	r2, #8
 800220c:	4013      	ands	r3, r2
 800220e:	d009      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002210:	4b0e      	ldr	r3, [pc, #56]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002214:	4a15      	ldr	r2, [pc, #84]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002216:	4013      	ands	r3, r2
 8002218:	0019      	movs	r1, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691a      	ldr	r2, [r3, #16]
 800221e:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002220:	430a      	orrs	r2, r1
 8002222:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2280      	movs	r2, #128	; 0x80
 800222a:	4013      	ands	r3, r2
 800222c:	d009      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800222e:	4b07      	ldr	r3, [pc, #28]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002232:	4a0f      	ldr	r2, [pc, #60]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002234:	4013      	ands	r3, r2
 8002236:	0019      	movs	r1, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	695a      	ldr	r2, [r3, #20]
 800223c:	4b03      	ldr	r3, [pc, #12]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800223e:	430a      	orrs	r2, r1
 8002240:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	0018      	movs	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	b006      	add	sp, #24
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40021000 	.word	0x40021000
 8002250:	40007000 	.word	0x40007000
 8002254:	fffcffff 	.word	0xfffcffff
 8002258:	fff7ffff 	.word	0xfff7ffff
 800225c:	00001388 	.word	0x00001388
 8002260:	ffcfffff 	.word	0xffcfffff
 8002264:	efffffff 	.word	0xefffffff
 8002268:	fffff3ff 	.word	0xfffff3ff
 800226c:	ffffcfff 	.word	0xffffcfff
 8002270:	fff3ffff 	.word	0xfff3ffff

08002274 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e07b      	b.n	800237e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228a:	2b00      	cmp	r3, #0
 800228c:	d109      	bne.n	80022a2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	2382      	movs	r3, #130	; 0x82
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	429a      	cmp	r2, r3
 8002298:	d009      	beq.n	80022ae <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	61da      	str	r2, [r3, #28]
 80022a0:	e005      	b.n	80022ae <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2251      	movs	r2, #81	; 0x51
 80022b8:	5c9b      	ldrb	r3, [r3, r2]
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d107      	bne.n	80022d0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2250      	movs	r2, #80	; 0x50
 80022c4:	2100      	movs	r1, #0
 80022c6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	0018      	movs	r0, r3
 80022cc:	f7fe fc7c 	bl	8000bc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2251      	movs	r2, #81	; 0x51
 80022d4:	2102      	movs	r1, #2
 80022d6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2140      	movs	r1, #64	; 0x40
 80022e4:	438a      	bics	r2, r1
 80022e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	2382      	movs	r3, #130	; 0x82
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	401a      	ands	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6899      	ldr	r1, [r3, #8]
 80022f6:	2384      	movs	r3, #132	; 0x84
 80022f8:	021b      	lsls	r3, r3, #8
 80022fa:	400b      	ands	r3, r1
 80022fc:	431a      	orrs	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68d9      	ldr	r1, [r3, #12]
 8002302:	2380      	movs	r3, #128	; 0x80
 8002304:	011b      	lsls	r3, r3, #4
 8002306:	400b      	ands	r3, r1
 8002308:	431a      	orrs	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	2102      	movs	r1, #2
 8002310:	400b      	ands	r3, r1
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	2101      	movs	r1, #1
 800231a:	400b      	ands	r3, r1
 800231c:	431a      	orrs	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6999      	ldr	r1, [r3, #24]
 8002322:	2380      	movs	r3, #128	; 0x80
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	400b      	ands	r3, r1
 8002328:	431a      	orrs	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	2138      	movs	r1, #56	; 0x38
 8002330:	400b      	ands	r3, r1
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	2180      	movs	r1, #128	; 0x80
 800233a:	400b      	ands	r3, r1
 800233c:	431a      	orrs	r2, r3
 800233e:	0011      	movs	r1, r2
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002344:	2380      	movs	r3, #128	; 0x80
 8002346:	019b      	lsls	r3, r3, #6
 8002348:	401a      	ands	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	0c1b      	lsrs	r3, r3, #16
 8002358:	2204      	movs	r2, #4
 800235a:	4013      	ands	r3, r2
 800235c:	0019      	movs	r1, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	2210      	movs	r2, #16
 8002364:	401a      	ands	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	430a      	orrs	r2, r1
 800236c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2251      	movs	r2, #81	; 0x51
 8002378:	2101      	movs	r1, #1
 800237a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	0018      	movs	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	b002      	add	sp, #8
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e044      	b.n	8002424 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d107      	bne.n	80023b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2274      	movs	r2, #116	; 0x74
 80023a6:	2100      	movs	r1, #0
 80023a8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	0018      	movs	r0, r3
 80023ae:	f7fe fc4f 	bl	8000c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2224      	movs	r2, #36	; 0x24
 80023b6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2101      	movs	r1, #1
 80023c4:	438a      	bics	r2, r1
 80023c6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	0018      	movs	r0, r3
 80023cc:	f000 fd1c 	bl	8002e08 <UART_SetConfig>
 80023d0:	0003      	movs	r3, r0
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d101      	bne.n	80023da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e024      	b.n	8002424 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	0018      	movs	r0, r3
 80023e6:	f000 ff59 	bl	800329c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	490d      	ldr	r1, [pc, #52]	; (800242c <HAL_UART_Init+0xa4>)
 80023f6:	400a      	ands	r2, r1
 80023f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	212a      	movs	r1, #42	; 0x2a
 8002406:	438a      	bics	r2, r1
 8002408:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2101      	movs	r1, #1
 8002416:	430a      	orrs	r2, r1
 8002418:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	0018      	movs	r0, r3
 800241e:	f000 fff1 	bl	8003404 <UART_CheckIdleState>
 8002422:	0003      	movs	r3, r0
}
 8002424:	0018      	movs	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	b002      	add	sp, #8
 800242a:	bd80      	pop	{r7, pc}
 800242c:	ffffb7ff 	.word	0xffffb7ff

08002430 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08a      	sub	sp, #40	; 0x28
 8002434:	af02      	add	r7, sp, #8
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	603b      	str	r3, [r7, #0]
 800243c:	1dbb      	adds	r3, r7, #6
 800243e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002444:	2b20      	cmp	r3, #32
 8002446:	d000      	beq.n	800244a <HAL_UART_Transmit+0x1a>
 8002448:	e095      	b.n	8002576 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_UART_Transmit+0x28>
 8002450:	1dbb      	adds	r3, r7, #6
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e08d      	b.n	8002578 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	2380      	movs	r3, #128	; 0x80
 8002462:	015b      	lsls	r3, r3, #5
 8002464:	429a      	cmp	r2, r3
 8002466:	d109      	bne.n	800247c <HAL_UART_Transmit+0x4c>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d105      	bne.n	800247c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2201      	movs	r2, #1
 8002474:	4013      	ands	r3, r2
 8002476:	d001      	beq.n	800247c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e07d      	b.n	8002578 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2274      	movs	r2, #116	; 0x74
 8002480:	5c9b      	ldrb	r3, [r3, r2]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d101      	bne.n	800248a <HAL_UART_Transmit+0x5a>
 8002486:	2302      	movs	r3, #2
 8002488:	e076      	b.n	8002578 <HAL_UART_Transmit+0x148>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2274      	movs	r2, #116	; 0x74
 800248e:	2101      	movs	r1, #1
 8002490:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2280      	movs	r2, #128	; 0x80
 8002496:	2100      	movs	r1, #0
 8002498:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2221      	movs	r2, #33	; 0x21
 800249e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024a0:	f7fe fd0a 	bl	8000eb8 <HAL_GetTick>
 80024a4:	0003      	movs	r3, r0
 80024a6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	1dba      	adds	r2, r7, #6
 80024ac:	2150      	movs	r1, #80	; 0x50
 80024ae:	8812      	ldrh	r2, [r2, #0]
 80024b0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	1dba      	adds	r2, r7, #6
 80024b6:	2152      	movs	r1, #82	; 0x52
 80024b8:	8812      	ldrh	r2, [r2, #0]
 80024ba:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	2380      	movs	r3, #128	; 0x80
 80024c2:	015b      	lsls	r3, r3, #5
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d108      	bne.n	80024da <HAL_UART_Transmit+0xaa>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d104      	bne.n	80024da <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	61bb      	str	r3, [r7, #24]
 80024d8:	e003      	b.n	80024e2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2274      	movs	r2, #116	; 0x74
 80024e6:	2100      	movs	r1, #0
 80024e8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80024ea:	e02c      	b.n	8002546 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	0013      	movs	r3, r2
 80024f6:	2200      	movs	r2, #0
 80024f8:	2180      	movs	r1, #128	; 0x80
 80024fa:	f000 ffcb 	bl	8003494 <UART_WaitOnFlagUntilTimeout>
 80024fe:	1e03      	subs	r3, r0, #0
 8002500:	d001      	beq.n	8002506 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e038      	b.n	8002578 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10b      	bne.n	8002524 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	001a      	movs	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	05d2      	lsls	r2, r2, #23
 8002518:	0dd2      	lsrs	r2, r2, #23
 800251a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	3302      	adds	r3, #2
 8002520:	61bb      	str	r3, [r7, #24]
 8002522:	e007      	b.n	8002534 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	781a      	ldrb	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3301      	adds	r3, #1
 8002532:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2252      	movs	r2, #82	; 0x52
 8002538:	5a9b      	ldrh	r3, [r3, r2]
 800253a:	b29b      	uxth	r3, r3
 800253c:	3b01      	subs	r3, #1
 800253e:	b299      	uxth	r1, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2252      	movs	r2, #82	; 0x52
 8002544:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2252      	movs	r2, #82	; 0x52
 800254a:	5a9b      	ldrh	r3, [r3, r2]
 800254c:	b29b      	uxth	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1cc      	bne.n	80024ec <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	0013      	movs	r3, r2
 800255c:	2200      	movs	r2, #0
 800255e:	2140      	movs	r1, #64	; 0x40
 8002560:	f000 ff98 	bl	8003494 <UART_WaitOnFlagUntilTimeout>
 8002564:	1e03      	subs	r3, r0, #0
 8002566:	d001      	beq.n	800256c <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e005      	b.n	8002578 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2220      	movs	r2, #32
 8002570:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	e000      	b.n	8002578 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002576:	2302      	movs	r3, #2
  }
}
 8002578:	0018      	movs	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	b008      	add	sp, #32
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08a      	sub	sp, #40	; 0x28
 8002584:	af02      	add	r7, sp, #8
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	603b      	str	r3, [r7, #0]
 800258c:	1dbb      	adds	r3, r7, #6
 800258e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002594:	2b20      	cmp	r3, #32
 8002596:	d000      	beq.n	800259a <HAL_UART_Receive+0x1a>
 8002598:	e0d9      	b.n	800274e <HAL_UART_Receive+0x1ce>
  {
    if ((pData == NULL) || (Size == 0U))
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_UART_Receive+0x28>
 80025a0:	1dbb      	adds	r3, r7, #6
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e0d1      	b.n	8002750 <HAL_UART_Receive+0x1d0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	2380      	movs	r3, #128	; 0x80
 80025b2:	015b      	lsls	r3, r3, #5
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d109      	bne.n	80025cc <HAL_UART_Receive+0x4c>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d105      	bne.n	80025cc <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2201      	movs	r2, #1
 80025c4:	4013      	ands	r3, r2
 80025c6:	d001      	beq.n	80025cc <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0c1      	b.n	8002750 <HAL_UART_Receive+0x1d0>
      }
    }

    __HAL_LOCK(huart);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2274      	movs	r2, #116	; 0x74
 80025d0:	5c9b      	ldrb	r3, [r3, r2]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_UART_Receive+0x5a>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e0ba      	b.n	8002750 <HAL_UART_Receive+0x1d0>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2274      	movs	r2, #116	; 0x74
 80025de:	2101      	movs	r1, #1
 80025e0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2280      	movs	r2, #128	; 0x80
 80025e6:	2100      	movs	r1, #0
 80025e8:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2222      	movs	r2, #34	; 0x22
 80025ee:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025f6:	f7fe fc5f 	bl	8000eb8 <HAL_GetTick>
 80025fa:	0003      	movs	r3, r0
 80025fc:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	1dba      	adds	r2, r7, #6
 8002602:	2158      	movs	r1, #88	; 0x58
 8002604:	8812      	ldrh	r2, [r2, #0]
 8002606:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	1dba      	adds	r2, r7, #6
 800260c:	215a      	movs	r1, #90	; 0x5a
 800260e:	8812      	ldrh	r2, [r2, #0]
 8002610:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	015b      	lsls	r3, r3, #5
 800261a:	429a      	cmp	r2, r3
 800261c:	d10d      	bne.n	800263a <HAL_UART_Receive+0xba>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d104      	bne.n	8002630 <HAL_UART_Receive+0xb0>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	225c      	movs	r2, #92	; 0x5c
 800262a:	494b      	ldr	r1, [pc, #300]	; (8002758 <HAL_UART_Receive+0x1d8>)
 800262c:	5299      	strh	r1, [r3, r2]
 800262e:	e02e      	b.n	800268e <HAL_UART_Receive+0x10e>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	225c      	movs	r2, #92	; 0x5c
 8002634:	21ff      	movs	r1, #255	; 0xff
 8002636:	5299      	strh	r1, [r3, r2]
 8002638:	e029      	b.n	800268e <HAL_UART_Receive+0x10e>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10d      	bne.n	800265e <HAL_UART_Receive+0xde>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d104      	bne.n	8002654 <HAL_UART_Receive+0xd4>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	225c      	movs	r2, #92	; 0x5c
 800264e:	21ff      	movs	r1, #255	; 0xff
 8002650:	5299      	strh	r1, [r3, r2]
 8002652:	e01c      	b.n	800268e <HAL_UART_Receive+0x10e>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	225c      	movs	r2, #92	; 0x5c
 8002658:	217f      	movs	r1, #127	; 0x7f
 800265a:	5299      	strh	r1, [r3, r2]
 800265c:	e017      	b.n	800268e <HAL_UART_Receive+0x10e>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	2380      	movs	r3, #128	; 0x80
 8002664:	055b      	lsls	r3, r3, #21
 8002666:	429a      	cmp	r2, r3
 8002668:	d10d      	bne.n	8002686 <HAL_UART_Receive+0x106>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d104      	bne.n	800267c <HAL_UART_Receive+0xfc>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	225c      	movs	r2, #92	; 0x5c
 8002676:	217f      	movs	r1, #127	; 0x7f
 8002678:	5299      	strh	r1, [r3, r2]
 800267a:	e008      	b.n	800268e <HAL_UART_Receive+0x10e>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	225c      	movs	r2, #92	; 0x5c
 8002680:	213f      	movs	r1, #63	; 0x3f
 8002682:	5299      	strh	r1, [r3, r2]
 8002684:	e003      	b.n	800268e <HAL_UART_Receive+0x10e>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	225c      	movs	r2, #92	; 0x5c
 800268a:	2100      	movs	r1, #0
 800268c:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800268e:	2312      	movs	r3, #18
 8002690:	18fb      	adds	r3, r7, r3
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	215c      	movs	r1, #92	; 0x5c
 8002696:	5a52      	ldrh	r2, [r2, r1]
 8002698:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	2380      	movs	r3, #128	; 0x80
 80026a0:	015b      	lsls	r3, r3, #5
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d108      	bne.n	80026b8 <HAL_UART_Receive+0x138>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d104      	bne.n	80026b8 <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	61bb      	str	r3, [r7, #24]
 80026b6:	e003      	b.n	80026c0 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2274      	movs	r2, #116	; 0x74
 80026c4:	2100      	movs	r1, #0
 80026c6:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80026c8:	e036      	b.n	8002738 <HAL_UART_Receive+0x1b8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	0013      	movs	r3, r2
 80026d4:	2200      	movs	r2, #0
 80026d6:	2120      	movs	r1, #32
 80026d8:	f000 fedc 	bl	8003494 <UART_WaitOnFlagUntilTimeout>
 80026dc:	1e03      	subs	r3, r0, #0
 80026de:	d001      	beq.n	80026e4 <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e035      	b.n	8002750 <HAL_UART_Receive+0x1d0>
      }
      if (pdata8bits == NULL)
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10e      	bne.n	8002708 <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	2212      	movs	r2, #18
 80026f4:	18ba      	adds	r2, r7, r2
 80026f6:	8812      	ldrh	r2, [r2, #0]
 80026f8:	4013      	ands	r3, r2
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	3302      	adds	r3, #2
 8002704:	61bb      	str	r3, [r7, #24]
 8002706:	e00e      	b.n	8002726 <HAL_UART_Receive+0x1a6>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2212      	movs	r2, #18
 8002712:	18ba      	adds	r2, r7, r2
 8002714:	8812      	ldrh	r2, [r2, #0]
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	4013      	ands	r3, r2
 800271a:	b2da      	uxtb	r2, r3
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	3301      	adds	r3, #1
 8002724:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	225a      	movs	r2, #90	; 0x5a
 800272a:	5a9b      	ldrh	r3, [r3, r2]
 800272c:	b29b      	uxth	r3, r3
 800272e:	3b01      	subs	r3, #1
 8002730:	b299      	uxth	r1, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	225a      	movs	r2, #90	; 0x5a
 8002736:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	225a      	movs	r2, #90	; 0x5a
 800273c:	5a9b      	ldrh	r3, [r3, r2]
 800273e:	b29b      	uxth	r3, r3
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1c2      	bne.n	80026ca <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2220      	movs	r2, #32
 8002748:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	e000      	b.n	8002750 <HAL_UART_Receive+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800274e:	2302      	movs	r3, #2
  }
}
 8002750:	0018      	movs	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	b008      	add	sp, #32
 8002756:	bd80      	pop	{r7, pc}
 8002758:	000001ff 	.word	0x000001ff

0800275c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b088      	sub	sp, #32
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	1dbb      	adds	r3, r7, #6
 8002768:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800276e:	2b20      	cmp	r3, #32
 8002770:	d155      	bne.n	800281e <HAL_UART_Receive_IT+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <HAL_UART_Receive_IT+0x24>
 8002778:	1dbb      	adds	r3, r7, #6
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e04d      	b.n	8002820 <HAL_UART_Receive_IT+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	2380      	movs	r3, #128	; 0x80
 800278a:	015b      	lsls	r3, r3, #5
 800278c:	429a      	cmp	r2, r3
 800278e:	d109      	bne.n	80027a4 <HAL_UART_Receive_IT+0x48>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d105      	bne.n	80027a4 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2201      	movs	r2, #1
 800279c:	4013      	ands	r3, r2
 800279e:	d001      	beq.n	80027a4 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e03d      	b.n	8002820 <HAL_UART_Receive_IT+0xc4>
      }
    }

    __HAL_LOCK(huart);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2274      	movs	r2, #116	; 0x74
 80027a8:	5c9b      	ldrb	r3, [r3, r2]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d101      	bne.n	80027b2 <HAL_UART_Receive_IT+0x56>
 80027ae:	2302      	movs	r3, #2
 80027b0:	e036      	b.n	8002820 <HAL_UART_Receive_IT+0xc4>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2274      	movs	r2, #116	; 0x74
 80027b6:	2101      	movs	r1, #1
 80027b8:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a18      	ldr	r2, [pc, #96]	; (8002828 <HAL_UART_Receive_IT+0xcc>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d020      	beq.n	800280c <HAL_UART_Receive_IT+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	041b      	lsls	r3, r3, #16
 80027d4:	4013      	ands	r3, r2
 80027d6:	d019      	beq.n	800280c <HAL_UART_Receive_IT+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027d8:	f3ef 8310 	mrs	r3, PRIMASK
 80027dc:	613b      	str	r3, [r7, #16]
  return(result);
 80027de:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80027e0:	61fb      	str	r3, [r7, #28]
 80027e2:	2301      	movs	r3, #1
 80027e4:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f383 8810 	msr	PRIMASK, r3
}
 80027ec:	46c0      	nop			; (mov r8, r8)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2180      	movs	r1, #128	; 0x80
 80027fa:	04c9      	lsls	r1, r1, #19
 80027fc:	430a      	orrs	r2, r1
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	f383 8810 	msr	PRIMASK, r3
}
 800280a:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800280c:	1dbb      	adds	r3, r7, #6
 800280e:	881a      	ldrh	r2, [r3, #0]
 8002810:	68b9      	ldr	r1, [r7, #8]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	0018      	movs	r0, r3
 8002816:	f000 ff01 	bl	800361c <UART_Start_Receive_IT>
 800281a:	0003      	movs	r3, r0
 800281c:	e000      	b.n	8002820 <HAL_UART_Receive_IT+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800281e:	2302      	movs	r3, #2
  }
}
 8002820:	0018      	movs	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	b008      	add	sp, #32
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40004800 	.word	0x40004800

0800282c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800282c:	b590      	push	{r4, r7, lr}
 800282e:	b0ab      	sub	sp, #172	; 0xac
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	22a4      	movs	r2, #164	; 0xa4
 800283c:	18b9      	adds	r1, r7, r2
 800283e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	20a0      	movs	r0, #160	; 0xa0
 8002848:	1839      	adds	r1, r7, r0
 800284a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	219c      	movs	r1, #156	; 0x9c
 8002854:	1879      	adds	r1, r7, r1
 8002856:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002858:	0011      	movs	r1, r2
 800285a:	18bb      	adds	r3, r7, r2
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a99      	ldr	r2, [pc, #612]	; (8002ac4 <HAL_UART_IRQHandler+0x298>)
 8002860:	4013      	ands	r3, r2
 8002862:	2298      	movs	r2, #152	; 0x98
 8002864:	18bc      	adds	r4, r7, r2
 8002866:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002868:	18bb      	adds	r3, r7, r2
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d114      	bne.n	800289a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002870:	187b      	adds	r3, r7, r1
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2220      	movs	r2, #32
 8002876:	4013      	ands	r3, r2
 8002878:	d00f      	beq.n	800289a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800287a:	183b      	adds	r3, r7, r0
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2220      	movs	r2, #32
 8002880:	4013      	ands	r3, r2
 8002882:	d00a      	beq.n	800289a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002888:	2b00      	cmp	r3, #0
 800288a:	d100      	bne.n	800288e <HAL_UART_IRQHandler+0x62>
 800288c:	e298      	b.n	8002dc0 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	0010      	movs	r0, r2
 8002896:	4798      	blx	r3
      }
      return;
 8002898:	e292      	b.n	8002dc0 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800289a:	2398      	movs	r3, #152	; 0x98
 800289c:	18fb      	adds	r3, r7, r3
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d100      	bne.n	80028a6 <HAL_UART_IRQHandler+0x7a>
 80028a4:	e114      	b.n	8002ad0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80028a6:	239c      	movs	r3, #156	; 0x9c
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2201      	movs	r2, #1
 80028ae:	4013      	ands	r3, r2
 80028b0:	d106      	bne.n	80028c0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80028b2:	23a0      	movs	r3, #160	; 0xa0
 80028b4:	18fb      	adds	r3, r7, r3
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a83      	ldr	r2, [pc, #524]	; (8002ac8 <HAL_UART_IRQHandler+0x29c>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	d100      	bne.n	80028c0 <HAL_UART_IRQHandler+0x94>
 80028be:	e107      	b.n	8002ad0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80028c0:	23a4      	movs	r3, #164	; 0xa4
 80028c2:	18fb      	adds	r3, r7, r3
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2201      	movs	r2, #1
 80028c8:	4013      	ands	r3, r2
 80028ca:	d012      	beq.n	80028f2 <HAL_UART_IRQHandler+0xc6>
 80028cc:	23a0      	movs	r3, #160	; 0xa0
 80028ce:	18fb      	adds	r3, r7, r3
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	2380      	movs	r3, #128	; 0x80
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	4013      	ands	r3, r2
 80028d8:	d00b      	beq.n	80028f2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2201      	movs	r2, #1
 80028e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2280      	movs	r2, #128	; 0x80
 80028e6:	589b      	ldr	r3, [r3, r2]
 80028e8:	2201      	movs	r2, #1
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2180      	movs	r1, #128	; 0x80
 80028f0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028f2:	23a4      	movs	r3, #164	; 0xa4
 80028f4:	18fb      	adds	r3, r7, r3
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2202      	movs	r2, #2
 80028fa:	4013      	ands	r3, r2
 80028fc:	d011      	beq.n	8002922 <HAL_UART_IRQHandler+0xf6>
 80028fe:	239c      	movs	r3, #156	; 0x9c
 8002900:	18fb      	adds	r3, r7, r3
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2201      	movs	r2, #1
 8002906:	4013      	ands	r3, r2
 8002908:	d00b      	beq.n	8002922 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2202      	movs	r2, #2
 8002910:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2280      	movs	r2, #128	; 0x80
 8002916:	589b      	ldr	r3, [r3, r2]
 8002918:	2204      	movs	r2, #4
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2180      	movs	r1, #128	; 0x80
 8002920:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002922:	23a4      	movs	r3, #164	; 0xa4
 8002924:	18fb      	adds	r3, r7, r3
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2204      	movs	r2, #4
 800292a:	4013      	ands	r3, r2
 800292c:	d011      	beq.n	8002952 <HAL_UART_IRQHandler+0x126>
 800292e:	239c      	movs	r3, #156	; 0x9c
 8002930:	18fb      	adds	r3, r7, r3
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2201      	movs	r2, #1
 8002936:	4013      	ands	r3, r2
 8002938:	d00b      	beq.n	8002952 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2204      	movs	r2, #4
 8002940:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2280      	movs	r2, #128	; 0x80
 8002946:	589b      	ldr	r3, [r3, r2]
 8002948:	2202      	movs	r2, #2
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2180      	movs	r1, #128	; 0x80
 8002950:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002952:	23a4      	movs	r3, #164	; 0xa4
 8002954:	18fb      	adds	r3, r7, r3
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2208      	movs	r2, #8
 800295a:	4013      	ands	r3, r2
 800295c:	d017      	beq.n	800298e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800295e:	23a0      	movs	r3, #160	; 0xa0
 8002960:	18fb      	adds	r3, r7, r3
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2220      	movs	r2, #32
 8002966:	4013      	ands	r3, r2
 8002968:	d105      	bne.n	8002976 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800296a:	239c      	movs	r3, #156	; 0x9c
 800296c:	18fb      	adds	r3, r7, r3
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2201      	movs	r2, #1
 8002972:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002974:	d00b      	beq.n	800298e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2208      	movs	r2, #8
 800297c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2280      	movs	r2, #128	; 0x80
 8002982:	589b      	ldr	r3, [r3, r2]
 8002984:	2208      	movs	r2, #8
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2180      	movs	r1, #128	; 0x80
 800298c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800298e:	23a4      	movs	r3, #164	; 0xa4
 8002990:	18fb      	adds	r3, r7, r3
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	2380      	movs	r3, #128	; 0x80
 8002996:	011b      	lsls	r3, r3, #4
 8002998:	4013      	ands	r3, r2
 800299a:	d013      	beq.n	80029c4 <HAL_UART_IRQHandler+0x198>
 800299c:	23a0      	movs	r3, #160	; 0xa0
 800299e:	18fb      	adds	r3, r7, r3
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	2380      	movs	r3, #128	; 0x80
 80029a4:	04db      	lsls	r3, r3, #19
 80029a6:	4013      	ands	r3, r2
 80029a8:	d00c      	beq.n	80029c4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2280      	movs	r2, #128	; 0x80
 80029b0:	0112      	lsls	r2, r2, #4
 80029b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2280      	movs	r2, #128	; 0x80
 80029b8:	589b      	ldr	r3, [r3, r2]
 80029ba:	2220      	movs	r2, #32
 80029bc:	431a      	orrs	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2180      	movs	r1, #128	; 0x80
 80029c2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2280      	movs	r2, #128	; 0x80
 80029c8:	589b      	ldr	r3, [r3, r2]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d100      	bne.n	80029d0 <HAL_UART_IRQHandler+0x1a4>
 80029ce:	e1f9      	b.n	8002dc4 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80029d0:	23a4      	movs	r3, #164	; 0xa4
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2220      	movs	r2, #32
 80029d8:	4013      	ands	r3, r2
 80029da:	d00e      	beq.n	80029fa <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80029dc:	23a0      	movs	r3, #160	; 0xa0
 80029de:	18fb      	adds	r3, r7, r3
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2220      	movs	r2, #32
 80029e4:	4013      	ands	r3, r2
 80029e6:	d008      	beq.n	80029fa <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d004      	beq.n	80029fa <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	0010      	movs	r0, r2
 80029f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2280      	movs	r2, #128	; 0x80
 80029fe:	589b      	ldr	r3, [r3, r2]
 8002a00:	2194      	movs	r1, #148	; 0x94
 8002a02:	187a      	adds	r2, r7, r1
 8002a04:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	2240      	movs	r2, #64	; 0x40
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b40      	cmp	r3, #64	; 0x40
 8002a12:	d004      	beq.n	8002a1e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002a14:	187b      	adds	r3, r7, r1
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2228      	movs	r2, #40	; 0x28
 8002a1a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a1c:	d047      	beq.n	8002aae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	0018      	movs	r0, r3
 8002a22:	f000 feab 	bl	800377c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	2240      	movs	r2, #64	; 0x40
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b40      	cmp	r3, #64	; 0x40
 8002a32:	d137      	bne.n	8002aa4 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a34:	f3ef 8310 	mrs	r3, PRIMASK
 8002a38:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002a3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a3c:	2090      	movs	r0, #144	; 0x90
 8002a3e:	183a      	adds	r2, r7, r0
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	2301      	movs	r3, #1
 8002a44:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a48:	f383 8810 	msr	PRIMASK, r3
}
 8002a4c:	46c0      	nop			; (mov r8, r8)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2140      	movs	r1, #64	; 0x40
 8002a5a:	438a      	bics	r2, r1
 8002a5c:	609a      	str	r2, [r3, #8]
 8002a5e:	183b      	adds	r3, r7, r0
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a66:	f383 8810 	msr	PRIMASK, r3
}
 8002a6a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d012      	beq.n	8002a9a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a78:	4a14      	ldr	r2, [pc, #80]	; (8002acc <HAL_UART_IRQHandler+0x2a0>)
 8002a7a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a80:	0018      	movs	r0, r3
 8002a82:	f7fe fb65 	bl	8001150 <HAL_DMA_Abort_IT>
 8002a86:	1e03      	subs	r3, r0, #0
 8002a88:	d01a      	beq.n	8002ac0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a94:	0018      	movs	r0, r3
 8002a96:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a98:	e012      	b.n	8002ac0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f000 f99f 	bl	8002de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aa2:	e00d      	b.n	8002ac0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f000 f99a 	bl	8002de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aac:	e008      	b.n	8002ac0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f000 f995 	bl	8002de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2280      	movs	r2, #128	; 0x80
 8002aba:	2100      	movs	r1, #0
 8002abc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002abe:	e181      	b.n	8002dc4 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ac0:	46c0      	nop			; (mov r8, r8)
    return;
 8002ac2:	e17f      	b.n	8002dc4 <HAL_UART_IRQHandler+0x598>
 8002ac4:	0000080f 	.word	0x0000080f
 8002ac8:	04000120 	.word	0x04000120
 8002acc:	08003841 	.word	0x08003841

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d000      	beq.n	8002ada <HAL_UART_IRQHandler+0x2ae>
 8002ad8:	e133      	b.n	8002d42 <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002ada:	23a4      	movs	r3, #164	; 0xa4
 8002adc:	18fb      	adds	r3, r7, r3
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2210      	movs	r2, #16
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d100      	bne.n	8002ae8 <HAL_UART_IRQHandler+0x2bc>
 8002ae6:	e12c      	b.n	8002d42 <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002ae8:	23a0      	movs	r3, #160	; 0xa0
 8002aea:	18fb      	adds	r3, r7, r3
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2210      	movs	r2, #16
 8002af0:	4013      	ands	r3, r2
 8002af2:	d100      	bne.n	8002af6 <HAL_UART_IRQHandler+0x2ca>
 8002af4:	e125      	b.n	8002d42 <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2210      	movs	r2, #16
 8002afc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	2240      	movs	r2, #64	; 0x40
 8002b06:	4013      	ands	r3, r2
 8002b08:	2b40      	cmp	r3, #64	; 0x40
 8002b0a:	d000      	beq.n	8002b0e <HAL_UART_IRQHandler+0x2e2>
 8002b0c:	e09d      	b.n	8002c4a <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	217e      	movs	r1, #126	; 0x7e
 8002b18:	187b      	adds	r3, r7, r1
 8002b1a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002b1c:	187b      	adds	r3, r7, r1
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d100      	bne.n	8002b26 <HAL_UART_IRQHandler+0x2fa>
 8002b24:	e150      	b.n	8002dc8 <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2258      	movs	r2, #88	; 0x58
 8002b2a:	5a9b      	ldrh	r3, [r3, r2]
 8002b2c:	187a      	adds	r2, r7, r1
 8002b2e:	8812      	ldrh	r2, [r2, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d300      	bcc.n	8002b36 <HAL_UART_IRQHandler+0x30a>
 8002b34:	e148      	b.n	8002dc8 <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	187a      	adds	r2, r7, r1
 8002b3a:	215a      	movs	r1, #90	; 0x5a
 8002b3c:	8812      	ldrh	r2, [r2, #0]
 8002b3e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2220      	movs	r2, #32
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d16e      	bne.n	8002c2c <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b4e:	f3ef 8310 	mrs	r3, PRIMASK
 8002b52:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b56:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b58:	2301      	movs	r3, #1
 8002b5a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b5e:	f383 8810 	msr	PRIMASK, r3
}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	499a      	ldr	r1, [pc, #616]	; (8002dd8 <HAL_UART_IRQHandler+0x5ac>)
 8002b70:	400a      	ands	r2, r1
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b76:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7a:	f383 8810 	msr	PRIMASK, r3
}
 8002b7e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b80:	f3ef 8310 	mrs	r3, PRIMASK
 8002b84:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b88:	677b      	str	r3, [r7, #116]	; 0x74
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b90:	f383 8810 	msr	PRIMASK, r3
}
 8002b94:	46c0      	nop			; (mov r8, r8)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	438a      	bics	r2, r1
 8002ba4:	609a      	str	r2, [r3, #8]
 8002ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ba8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bac:	f383 8810 	msr	PRIMASK, r3
}
 8002bb0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bb2:	f3ef 8310 	mrs	r3, PRIMASK
 8002bb6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bba:	673b      	str	r3, [r7, #112]	; 0x70
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bc2:	f383 8810 	msr	PRIMASK, r3
}
 8002bc6:	46c0      	nop			; (mov r8, r8)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2140      	movs	r1, #64	; 0x40
 8002bd4:	438a      	bics	r2, r1
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bda:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bde:	f383 8810 	msr	PRIMASK, r3
}
 8002be2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2220      	movs	r2, #32
 8002be8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bf0:	f3ef 8310 	mrs	r3, PRIMASK
 8002bf4:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002bf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bf8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c00:	f383 8810 	msr	PRIMASK, r3
}
 8002c04:	46c0      	nop			; (mov r8, r8)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2110      	movs	r1, #16
 8002c12:	438a      	bics	r2, r1
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c18:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c1c:	f383 8810 	msr	PRIMASK, r3
}
 8002c20:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c26:	0018      	movs	r0, r3
 8002c28:	f7fe fa52 	bl	80010d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2258      	movs	r2, #88	; 0x58
 8002c30:	5a9a      	ldrh	r2, [r3, r2]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	215a      	movs	r1, #90	; 0x5a
 8002c36:	5a5b      	ldrh	r3, [r3, r1]
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	0011      	movs	r1, r2
 8002c42:	0018      	movs	r0, r3
 8002c44:	f000 f8d4 	bl	8002df0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c48:	e0be      	b.n	8002dc8 <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2258      	movs	r2, #88	; 0x58
 8002c4e:	5a99      	ldrh	r1, [r3, r2]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	225a      	movs	r2, #90	; 0x5a
 8002c54:	5a9b      	ldrh	r3, [r3, r2]
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	208e      	movs	r0, #142	; 0x8e
 8002c5a:	183b      	adds	r3, r7, r0
 8002c5c:	1a8a      	subs	r2, r1, r2
 8002c5e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	225a      	movs	r2, #90	; 0x5a
 8002c64:	5a9b      	ldrh	r3, [r3, r2]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d100      	bne.n	8002c6e <HAL_UART_IRQHandler+0x442>
 8002c6c:	e0ae      	b.n	8002dcc <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 8002c6e:	183b      	adds	r3, r7, r0
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d100      	bne.n	8002c78 <HAL_UART_IRQHandler+0x44c>
 8002c76:	e0a9      	b.n	8002dcc <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c78:	f3ef 8310 	mrs	r3, PRIMASK
 8002c7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c80:	2488      	movs	r4, #136	; 0x88
 8002c82:	193a      	adds	r2, r7, r4
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	2301      	movs	r3, #1
 8002c88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	f383 8810 	msr	PRIMASK, r3
}
 8002c90:	46c0      	nop			; (mov r8, r8)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	494f      	ldr	r1, [pc, #316]	; (8002ddc <HAL_UART_IRQHandler+0x5b0>)
 8002c9e:	400a      	ands	r2, r1
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	193b      	adds	r3, r7, r4
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f383 8810 	msr	PRIMASK, r3
}
 8002cae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cb0:	f3ef 8310 	mrs	r3, PRIMASK
 8002cb4:	61bb      	str	r3, [r7, #24]
  return(result);
 8002cb6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cb8:	2484      	movs	r4, #132	; 0x84
 8002cba:	193a      	adds	r2, r7, r4
 8002cbc:	6013      	str	r3, [r2, #0]
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	f383 8810 	msr	PRIMASK, r3
}
 8002cc8:	46c0      	nop			; (mov r8, r8)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	438a      	bics	r2, r1
 8002cd8:	609a      	str	r2, [r3, #8]
 8002cda:	193b      	adds	r3, r7, r4
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	f383 8810 	msr	PRIMASK, r3
}
 8002ce6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2220      	movs	r2, #32
 8002cec:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cfa:	f3ef 8310 	mrs	r3, PRIMASK
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d02:	2480      	movs	r4, #128	; 0x80
 8002d04:	193a      	adds	r2, r7, r4
 8002d06:	6013      	str	r3, [r2, #0]
 8002d08:	2301      	movs	r3, #1
 8002d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0e:	f383 8810 	msr	PRIMASK, r3
}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2110      	movs	r1, #16
 8002d20:	438a      	bics	r2, r1
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	193b      	adds	r3, r7, r4
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2c:	f383 8810 	msr	PRIMASK, r3
}
 8002d30:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d32:	183b      	adds	r3, r7, r0
 8002d34:	881a      	ldrh	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	0011      	movs	r1, r2
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f000 f858 	bl	8002df0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d40:	e044      	b.n	8002dcc <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002d42:	23a4      	movs	r3, #164	; 0xa4
 8002d44:	18fb      	adds	r3, r7, r3
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	2380      	movs	r3, #128	; 0x80
 8002d4a:	035b      	lsls	r3, r3, #13
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d010      	beq.n	8002d72 <HAL_UART_IRQHandler+0x546>
 8002d50:	239c      	movs	r3, #156	; 0x9c
 8002d52:	18fb      	adds	r3, r7, r3
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	2380      	movs	r3, #128	; 0x80
 8002d58:	03db      	lsls	r3, r3, #15
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	d009      	beq.n	8002d72 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2280      	movs	r2, #128	; 0x80
 8002d64:	0352      	lsls	r2, r2, #13
 8002d66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f000 ff12 	bl	8003b94 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d70:	e02f      	b.n	8002dd2 <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002d72:	23a4      	movs	r3, #164	; 0xa4
 8002d74:	18fb      	adds	r3, r7, r3
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2280      	movs	r2, #128	; 0x80
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d00f      	beq.n	8002d9e <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002d7e:	23a0      	movs	r3, #160	; 0xa0
 8002d80:	18fb      	adds	r3, r7, r3
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2280      	movs	r2, #128	; 0x80
 8002d86:	4013      	ands	r3, r2
 8002d88:	d009      	beq.n	8002d9e <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d01e      	beq.n	8002dd0 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	0010      	movs	r0, r2
 8002d9a:	4798      	blx	r3
    }
    return;
 8002d9c:	e018      	b.n	8002dd0 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d9e:	23a4      	movs	r3, #164	; 0xa4
 8002da0:	18fb      	adds	r3, r7, r3
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2240      	movs	r2, #64	; 0x40
 8002da6:	4013      	ands	r3, r2
 8002da8:	d013      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x5a6>
 8002daa:	23a0      	movs	r3, #160	; 0xa0
 8002dac:	18fb      	adds	r3, r7, r3
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2240      	movs	r2, #64	; 0x40
 8002db2:	4013      	ands	r3, r2
 8002db4:	d00d      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	0018      	movs	r0, r3
 8002dba:	f000 fd58 	bl	800386e <UART_EndTransmit_IT>
    return;
 8002dbe:	e008      	b.n	8002dd2 <HAL_UART_IRQHandler+0x5a6>
      return;
 8002dc0:	46c0      	nop			; (mov r8, r8)
 8002dc2:	e006      	b.n	8002dd2 <HAL_UART_IRQHandler+0x5a6>
    return;
 8002dc4:	46c0      	nop			; (mov r8, r8)
 8002dc6:	e004      	b.n	8002dd2 <HAL_UART_IRQHandler+0x5a6>
      return;
 8002dc8:	46c0      	nop			; (mov r8, r8)
 8002dca:	e002      	b.n	8002dd2 <HAL_UART_IRQHandler+0x5a6>
      return;
 8002dcc:	46c0      	nop			; (mov r8, r8)
 8002dce:	e000      	b.n	8002dd2 <HAL_UART_IRQHandler+0x5a6>
    return;
 8002dd0:	46c0      	nop			; (mov r8, r8)
  }

}
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	b02b      	add	sp, #172	; 0xac
 8002dd6:	bd90      	pop	{r4, r7, pc}
 8002dd8:	fffffeff 	.word	0xfffffeff
 8002ddc:	fffffedf 	.word	0xfffffedf

08002de0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002de8:	46c0      	nop			; (mov r8, r8)
 8002dea:	46bd      	mov	sp, r7
 8002dec:	b002      	add	sp, #8
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	000a      	movs	r2, r1
 8002dfa:	1cbb      	adds	r3, r7, #2
 8002dfc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	46bd      	mov	sp, r7
 8002e02:	b002      	add	sp, #8
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e08:	b5b0      	push	{r4, r5, r7, lr}
 8002e0a:	b08e      	sub	sp, #56	; 0x38
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e10:	231a      	movs	r3, #26
 8002e12:	2218      	movs	r2, #24
 8002e14:	189b      	adds	r3, r3, r2
 8002e16:	19db      	adds	r3, r3, r7
 8002e18:	2200      	movs	r2, #0
 8002e1a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	431a      	orrs	r2, r3
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	69db      	ldr	r3, [r3, #28]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4ab4      	ldr	r2, [pc, #720]	; (800310c <UART_SetConfig+0x304>)
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	0019      	movs	r1, r3
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e46:	430a      	orrs	r2, r1
 8002e48:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	4aaf      	ldr	r2, [pc, #700]	; (8003110 <UART_SetConfig+0x308>)
 8002e52:	4013      	ands	r3, r2
 8002e54:	0019      	movs	r1, r3
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4aa9      	ldr	r2, [pc, #676]	; (8003114 <UART_SetConfig+0x30c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d004      	beq.n	8002e7c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	4aa5      	ldr	r2, [pc, #660]	; (8003118 <UART_SetConfig+0x310>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	0019      	movs	r1, r3
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4aa1      	ldr	r2, [pc, #644]	; (800311c <UART_SetConfig+0x314>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d131      	bne.n	8002f00 <UART_SetConfig+0xf8>
 8002e9c:	4ba0      	ldr	r3, [pc, #640]	; (8003120 <UART_SetConfig+0x318>)
 8002e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea0:	220c      	movs	r2, #12
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2b0c      	cmp	r3, #12
 8002ea6:	d01d      	beq.n	8002ee4 <UART_SetConfig+0xdc>
 8002ea8:	d823      	bhi.n	8002ef2 <UART_SetConfig+0xea>
 8002eaa:	2b08      	cmp	r3, #8
 8002eac:	d00c      	beq.n	8002ec8 <UART_SetConfig+0xc0>
 8002eae:	d820      	bhi.n	8002ef2 <UART_SetConfig+0xea>
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d002      	beq.n	8002eba <UART_SetConfig+0xb2>
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	d00e      	beq.n	8002ed6 <UART_SetConfig+0xce>
 8002eb8:	e01b      	b.n	8002ef2 <UART_SetConfig+0xea>
 8002eba:	231b      	movs	r3, #27
 8002ebc:	2218      	movs	r2, #24
 8002ebe:	189b      	adds	r3, r3, r2
 8002ec0:	19db      	adds	r3, r3, r7
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	701a      	strb	r2, [r3, #0]
 8002ec6:	e065      	b.n	8002f94 <UART_SetConfig+0x18c>
 8002ec8:	231b      	movs	r3, #27
 8002eca:	2218      	movs	r2, #24
 8002ecc:	189b      	adds	r3, r3, r2
 8002ece:	19db      	adds	r3, r3, r7
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	701a      	strb	r2, [r3, #0]
 8002ed4:	e05e      	b.n	8002f94 <UART_SetConfig+0x18c>
 8002ed6:	231b      	movs	r3, #27
 8002ed8:	2218      	movs	r2, #24
 8002eda:	189b      	adds	r3, r3, r2
 8002edc:	19db      	adds	r3, r3, r7
 8002ede:	2204      	movs	r2, #4
 8002ee0:	701a      	strb	r2, [r3, #0]
 8002ee2:	e057      	b.n	8002f94 <UART_SetConfig+0x18c>
 8002ee4:	231b      	movs	r3, #27
 8002ee6:	2218      	movs	r2, #24
 8002ee8:	189b      	adds	r3, r3, r2
 8002eea:	19db      	adds	r3, r3, r7
 8002eec:	2208      	movs	r2, #8
 8002eee:	701a      	strb	r2, [r3, #0]
 8002ef0:	e050      	b.n	8002f94 <UART_SetConfig+0x18c>
 8002ef2:	231b      	movs	r3, #27
 8002ef4:	2218      	movs	r2, #24
 8002ef6:	189b      	adds	r3, r3, r2
 8002ef8:	19db      	adds	r3, r3, r7
 8002efa:	2210      	movs	r2, #16
 8002efc:	701a      	strb	r2, [r3, #0]
 8002efe:	e049      	b.n	8002f94 <UART_SetConfig+0x18c>
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a83      	ldr	r2, [pc, #524]	; (8003114 <UART_SetConfig+0x30c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d13e      	bne.n	8002f88 <UART_SetConfig+0x180>
 8002f0a:	4b85      	ldr	r3, [pc, #532]	; (8003120 <UART_SetConfig+0x318>)
 8002f0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f0e:	23c0      	movs	r3, #192	; 0xc0
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	4013      	ands	r3, r2
 8002f14:	22c0      	movs	r2, #192	; 0xc0
 8002f16:	0112      	lsls	r2, r2, #4
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d027      	beq.n	8002f6c <UART_SetConfig+0x164>
 8002f1c:	22c0      	movs	r2, #192	; 0xc0
 8002f1e:	0112      	lsls	r2, r2, #4
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d82a      	bhi.n	8002f7a <UART_SetConfig+0x172>
 8002f24:	2280      	movs	r2, #128	; 0x80
 8002f26:	0112      	lsls	r2, r2, #4
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d011      	beq.n	8002f50 <UART_SetConfig+0x148>
 8002f2c:	2280      	movs	r2, #128	; 0x80
 8002f2e:	0112      	lsls	r2, r2, #4
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d822      	bhi.n	8002f7a <UART_SetConfig+0x172>
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d004      	beq.n	8002f42 <UART_SetConfig+0x13a>
 8002f38:	2280      	movs	r2, #128	; 0x80
 8002f3a:	00d2      	lsls	r2, r2, #3
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d00e      	beq.n	8002f5e <UART_SetConfig+0x156>
 8002f40:	e01b      	b.n	8002f7a <UART_SetConfig+0x172>
 8002f42:	231b      	movs	r3, #27
 8002f44:	2218      	movs	r2, #24
 8002f46:	189b      	adds	r3, r3, r2
 8002f48:	19db      	adds	r3, r3, r7
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	701a      	strb	r2, [r3, #0]
 8002f4e:	e021      	b.n	8002f94 <UART_SetConfig+0x18c>
 8002f50:	231b      	movs	r3, #27
 8002f52:	2218      	movs	r2, #24
 8002f54:	189b      	adds	r3, r3, r2
 8002f56:	19db      	adds	r3, r3, r7
 8002f58:	2202      	movs	r2, #2
 8002f5a:	701a      	strb	r2, [r3, #0]
 8002f5c:	e01a      	b.n	8002f94 <UART_SetConfig+0x18c>
 8002f5e:	231b      	movs	r3, #27
 8002f60:	2218      	movs	r2, #24
 8002f62:	189b      	adds	r3, r3, r2
 8002f64:	19db      	adds	r3, r3, r7
 8002f66:	2204      	movs	r2, #4
 8002f68:	701a      	strb	r2, [r3, #0]
 8002f6a:	e013      	b.n	8002f94 <UART_SetConfig+0x18c>
 8002f6c:	231b      	movs	r3, #27
 8002f6e:	2218      	movs	r2, #24
 8002f70:	189b      	adds	r3, r3, r2
 8002f72:	19db      	adds	r3, r3, r7
 8002f74:	2208      	movs	r2, #8
 8002f76:	701a      	strb	r2, [r3, #0]
 8002f78:	e00c      	b.n	8002f94 <UART_SetConfig+0x18c>
 8002f7a:	231b      	movs	r3, #27
 8002f7c:	2218      	movs	r2, #24
 8002f7e:	189b      	adds	r3, r3, r2
 8002f80:	19db      	adds	r3, r3, r7
 8002f82:	2210      	movs	r2, #16
 8002f84:	701a      	strb	r2, [r3, #0]
 8002f86:	e005      	b.n	8002f94 <UART_SetConfig+0x18c>
 8002f88:	231b      	movs	r3, #27
 8002f8a:	2218      	movs	r2, #24
 8002f8c:	189b      	adds	r3, r3, r2
 8002f8e:	19db      	adds	r3, r3, r7
 8002f90:	2210      	movs	r2, #16
 8002f92:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a5e      	ldr	r2, [pc, #376]	; (8003114 <UART_SetConfig+0x30c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d000      	beq.n	8002fa0 <UART_SetConfig+0x198>
 8002f9e:	e084      	b.n	80030aa <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002fa0:	231b      	movs	r3, #27
 8002fa2:	2218      	movs	r2, #24
 8002fa4:	189b      	adds	r3, r3, r2
 8002fa6:	19db      	adds	r3, r3, r7
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b08      	cmp	r3, #8
 8002fac:	d01d      	beq.n	8002fea <UART_SetConfig+0x1e2>
 8002fae:	dc20      	bgt.n	8002ff2 <UART_SetConfig+0x1ea>
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d015      	beq.n	8002fe0 <UART_SetConfig+0x1d8>
 8002fb4:	dc1d      	bgt.n	8002ff2 <UART_SetConfig+0x1ea>
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d002      	beq.n	8002fc0 <UART_SetConfig+0x1b8>
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d005      	beq.n	8002fca <UART_SetConfig+0x1c2>
 8002fbe:	e018      	b.n	8002ff2 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fc0:	f7ff f806 	bl	8001fd0 <HAL_RCC_GetPCLK1Freq>
 8002fc4:	0003      	movs	r3, r0
 8002fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fc8:	e01c      	b.n	8003004 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fca:	4b55      	ldr	r3, [pc, #340]	; (8003120 <UART_SetConfig+0x318>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2210      	movs	r2, #16
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d002      	beq.n	8002fda <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002fd4:	4b53      	ldr	r3, [pc, #332]	; (8003124 <UART_SetConfig+0x31c>)
 8002fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002fd8:	e014      	b.n	8003004 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8002fda:	4b53      	ldr	r3, [pc, #332]	; (8003128 <UART_SetConfig+0x320>)
 8002fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fde:	e011      	b.n	8003004 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fe0:	f7fe ff46 	bl	8001e70 <HAL_RCC_GetSysClockFreq>
 8002fe4:	0003      	movs	r3, r0
 8002fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fe8:	e00c      	b.n	8003004 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fea:	2380      	movs	r3, #128	; 0x80
 8002fec:	021b      	lsls	r3, r3, #8
 8002fee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ff0:	e008      	b.n	8003004 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002ff6:	231a      	movs	r3, #26
 8002ff8:	2218      	movs	r2, #24
 8002ffa:	189b      	adds	r3, r3, r2
 8002ffc:	19db      	adds	r3, r3, r7
 8002ffe:	2201      	movs	r2, #1
 8003000:	701a      	strb	r2, [r3, #0]
        break;
 8003002:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003006:	2b00      	cmp	r3, #0
 8003008:	d100      	bne.n	800300c <UART_SetConfig+0x204>
 800300a:	e130      	b.n	800326e <UART_SetConfig+0x466>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	0013      	movs	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	189b      	adds	r3, r3, r2
 8003016:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003018:	429a      	cmp	r2, r3
 800301a:	d305      	bcc.n	8003028 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003022:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003024:	429a      	cmp	r2, r3
 8003026:	d906      	bls.n	8003036 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8003028:	231a      	movs	r3, #26
 800302a:	2218      	movs	r2, #24
 800302c:	189b      	adds	r3, r3, r2
 800302e:	19db      	adds	r3, r3, r7
 8003030:	2201      	movs	r2, #1
 8003032:	701a      	strb	r2, [r3, #0]
 8003034:	e11b      	b.n	800326e <UART_SetConfig+0x466>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003038:	613b      	str	r3, [r7, #16]
 800303a:	2300      	movs	r3, #0
 800303c:	617b      	str	r3, [r7, #20]
 800303e:	6939      	ldr	r1, [r7, #16]
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	000b      	movs	r3, r1
 8003044:	0e1b      	lsrs	r3, r3, #24
 8003046:	0010      	movs	r0, r2
 8003048:	0205      	lsls	r5, r0, #8
 800304a:	431d      	orrs	r5, r3
 800304c:	000b      	movs	r3, r1
 800304e:	021c      	lsls	r4, r3, #8
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	085b      	lsrs	r3, r3, #1
 8003056:	60bb      	str	r3, [r7, #8]
 8003058:	2300      	movs	r3, #0
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	68b8      	ldr	r0, [r7, #8]
 800305e:	68f9      	ldr	r1, [r7, #12]
 8003060:	1900      	adds	r0, r0, r4
 8003062:	4169      	adcs	r1, r5
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	603b      	str	r3, [r7, #0]
 800306a:	2300      	movs	r3, #0
 800306c:	607b      	str	r3, [r7, #4]
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f7fd f8dd 	bl	8000230 <__aeabi_uldivmod>
 8003076:	0002      	movs	r2, r0
 8003078:	000b      	movs	r3, r1
 800307a:	0013      	movs	r3, r2
 800307c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800307e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003080:	23c0      	movs	r3, #192	; 0xc0
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	429a      	cmp	r2, r3
 8003086:	d309      	bcc.n	800309c <UART_SetConfig+0x294>
 8003088:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800308a:	2380      	movs	r3, #128	; 0x80
 800308c:	035b      	lsls	r3, r3, #13
 800308e:	429a      	cmp	r2, r3
 8003090:	d204      	bcs.n	800309c <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003098:	60da      	str	r2, [r3, #12]
 800309a:	e0e8      	b.n	800326e <UART_SetConfig+0x466>
        }
        else
        {
          ret = HAL_ERROR;
 800309c:	231a      	movs	r3, #26
 800309e:	2218      	movs	r2, #24
 80030a0:	189b      	adds	r3, r3, r2
 80030a2:	19db      	adds	r3, r3, r7
 80030a4:	2201      	movs	r2, #1
 80030a6:	701a      	strb	r2, [r3, #0]
 80030a8:	e0e1      	b.n	800326e <UART_SetConfig+0x466>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	69da      	ldr	r2, [r3, #28]
 80030ae:	2380      	movs	r3, #128	; 0x80
 80030b0:	021b      	lsls	r3, r3, #8
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d000      	beq.n	80030b8 <UART_SetConfig+0x2b0>
 80030b6:	e083      	b.n	80031c0 <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 80030b8:	231b      	movs	r3, #27
 80030ba:	2218      	movs	r2, #24
 80030bc:	189b      	adds	r3, r3, r2
 80030be:	19db      	adds	r3, r3, r7
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b08      	cmp	r3, #8
 80030c4:	d834      	bhi.n	8003130 <UART_SetConfig+0x328>
 80030c6:	009a      	lsls	r2, r3, #2
 80030c8:	4b18      	ldr	r3, [pc, #96]	; (800312c <UART_SetConfig+0x324>)
 80030ca:	18d3      	adds	r3, r2, r3
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030d0:	f7fe ff7e 	bl	8001fd0 <HAL_RCC_GetPCLK1Freq>
 80030d4:	0003      	movs	r3, r0
 80030d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030d8:	e033      	b.n	8003142 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030da:	f7fe ff8f 	bl	8001ffc <HAL_RCC_GetPCLK2Freq>
 80030de:	0003      	movs	r3, r0
 80030e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030e2:	e02e      	b.n	8003142 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030e4:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <UART_SetConfig+0x318>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2210      	movs	r2, #16
 80030ea:	4013      	ands	r3, r2
 80030ec:	d002      	beq.n	80030f4 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80030ee:	4b0d      	ldr	r3, [pc, #52]	; (8003124 <UART_SetConfig+0x31c>)
 80030f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80030f2:	e026      	b.n	8003142 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 80030f4:	4b0c      	ldr	r3, [pc, #48]	; (8003128 <UART_SetConfig+0x320>)
 80030f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030f8:	e023      	b.n	8003142 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030fa:	f7fe feb9 	bl	8001e70 <HAL_RCC_GetSysClockFreq>
 80030fe:	0003      	movs	r3, r0
 8003100:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003102:	e01e      	b.n	8003142 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003104:	2380      	movs	r3, #128	; 0x80
 8003106:	021b      	lsls	r3, r3, #8
 8003108:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800310a:	e01a      	b.n	8003142 <UART_SetConfig+0x33a>
 800310c:	efff69f3 	.word	0xefff69f3
 8003110:	ffffcfff 	.word	0xffffcfff
 8003114:	40004800 	.word	0x40004800
 8003118:	fffff4ff 	.word	0xfffff4ff
 800311c:	40004400 	.word	0x40004400
 8003120:	40021000 	.word	0x40021000
 8003124:	003d0900 	.word	0x003d0900
 8003128:	00f42400 	.word	0x00f42400
 800312c:	08003c80 	.word	0x08003c80
      default:
        pclk = 0U;
 8003130:	2300      	movs	r3, #0
 8003132:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003134:	231a      	movs	r3, #26
 8003136:	2218      	movs	r2, #24
 8003138:	189b      	adds	r3, r3, r2
 800313a:	19db      	adds	r3, r3, r7
 800313c:	2201      	movs	r2, #1
 800313e:	701a      	strb	r2, [r3, #0]
        break;
 8003140:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003144:	2b00      	cmp	r3, #0
 8003146:	d100      	bne.n	800314a <UART_SetConfig+0x342>
 8003148:	e091      	b.n	800326e <UART_SetConfig+0x466>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800314a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314c:	005a      	lsls	r2, r3, #1
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	085b      	lsrs	r3, r3, #1
 8003154:	18d2      	adds	r2, r2, r3
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	0019      	movs	r1, r3
 800315c:	0010      	movs	r0, r2
 800315e:	f7fc ffdb 	bl	8000118 <__udivsi3>
 8003162:	0003      	movs	r3, r0
 8003164:	b29b      	uxth	r3, r3
 8003166:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316a:	2b0f      	cmp	r3, #15
 800316c:	d921      	bls.n	80031b2 <UART_SetConfig+0x3aa>
 800316e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003170:	2380      	movs	r3, #128	; 0x80
 8003172:	025b      	lsls	r3, r3, #9
 8003174:	429a      	cmp	r2, r3
 8003176:	d21c      	bcs.n	80031b2 <UART_SetConfig+0x3aa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317a:	b29a      	uxth	r2, r3
 800317c:	200e      	movs	r0, #14
 800317e:	2418      	movs	r4, #24
 8003180:	1903      	adds	r3, r0, r4
 8003182:	19db      	adds	r3, r3, r7
 8003184:	210f      	movs	r1, #15
 8003186:	438a      	bics	r2, r1
 8003188:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800318a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318c:	085b      	lsrs	r3, r3, #1
 800318e:	b29b      	uxth	r3, r3
 8003190:	2207      	movs	r2, #7
 8003192:	4013      	ands	r3, r2
 8003194:	b299      	uxth	r1, r3
 8003196:	1903      	adds	r3, r0, r4
 8003198:	19db      	adds	r3, r3, r7
 800319a:	1902      	adds	r2, r0, r4
 800319c:	19d2      	adds	r2, r2, r7
 800319e:	8812      	ldrh	r2, [r2, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	1902      	adds	r2, r0, r4
 80031aa:	19d2      	adds	r2, r2, r7
 80031ac:	8812      	ldrh	r2, [r2, #0]
 80031ae:	60da      	str	r2, [r3, #12]
 80031b0:	e05d      	b.n	800326e <UART_SetConfig+0x466>
      }
      else
      {
        ret = HAL_ERROR;
 80031b2:	231a      	movs	r3, #26
 80031b4:	2218      	movs	r2, #24
 80031b6:	189b      	adds	r3, r3, r2
 80031b8:	19db      	adds	r3, r3, r7
 80031ba:	2201      	movs	r2, #1
 80031bc:	701a      	strb	r2, [r3, #0]
 80031be:	e056      	b.n	800326e <UART_SetConfig+0x466>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031c0:	231b      	movs	r3, #27
 80031c2:	2218      	movs	r2, #24
 80031c4:	189b      	adds	r3, r3, r2
 80031c6:	19db      	adds	r3, r3, r7
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d822      	bhi.n	8003214 <UART_SetConfig+0x40c>
 80031ce:	009a      	lsls	r2, r3, #2
 80031d0:	4b2e      	ldr	r3, [pc, #184]	; (800328c <UART_SetConfig+0x484>)
 80031d2:	18d3      	adds	r3, r2, r3
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031d8:	f7fe fefa 	bl	8001fd0 <HAL_RCC_GetPCLK1Freq>
 80031dc:	0003      	movs	r3, r0
 80031de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80031e0:	e021      	b.n	8003226 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031e2:	f7fe ff0b 	bl	8001ffc <HAL_RCC_GetPCLK2Freq>
 80031e6:	0003      	movs	r3, r0
 80031e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80031ea:	e01c      	b.n	8003226 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031ec:	4b28      	ldr	r3, [pc, #160]	; (8003290 <UART_SetConfig+0x488>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2210      	movs	r2, #16
 80031f2:	4013      	ands	r3, r2
 80031f4:	d002      	beq.n	80031fc <UART_SetConfig+0x3f4>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80031f6:	4b27      	ldr	r3, [pc, #156]	; (8003294 <UART_SetConfig+0x48c>)
 80031f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80031fa:	e014      	b.n	8003226 <UART_SetConfig+0x41e>
          pclk = (uint32_t) HSI_VALUE;
 80031fc:	4b26      	ldr	r3, [pc, #152]	; (8003298 <UART_SetConfig+0x490>)
 80031fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003200:	e011      	b.n	8003226 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003202:	f7fe fe35 	bl	8001e70 <HAL_RCC_GetSysClockFreq>
 8003206:	0003      	movs	r3, r0
 8003208:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800320a:	e00c      	b.n	8003226 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800320c:	2380      	movs	r3, #128	; 0x80
 800320e:	021b      	lsls	r3, r3, #8
 8003210:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003212:	e008      	b.n	8003226 <UART_SetConfig+0x41e>
      default:
        pclk = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003218:	231a      	movs	r3, #26
 800321a:	2218      	movs	r2, #24
 800321c:	189b      	adds	r3, r3, r2
 800321e:	19db      	adds	r3, r3, r7
 8003220:	2201      	movs	r2, #1
 8003222:	701a      	strb	r2, [r3, #0]
        break;
 8003224:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003228:	2b00      	cmp	r3, #0
 800322a:	d020      	beq.n	800326e <UART_SetConfig+0x466>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	085a      	lsrs	r2, r3, #1
 8003232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003234:	18d2      	adds	r2, r2, r3
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	0019      	movs	r1, r3
 800323c:	0010      	movs	r0, r2
 800323e:	f7fc ff6b 	bl	8000118 <__udivsi3>
 8003242:	0003      	movs	r3, r0
 8003244:	b29b      	uxth	r3, r3
 8003246:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324a:	2b0f      	cmp	r3, #15
 800324c:	d909      	bls.n	8003262 <UART_SetConfig+0x45a>
 800324e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003250:	2380      	movs	r3, #128	; 0x80
 8003252:	025b      	lsls	r3, r3, #9
 8003254:	429a      	cmp	r2, r3
 8003256:	d204      	bcs.n	8003262 <UART_SetConfig+0x45a>
      {
        huart->Instance->BRR = usartdiv;
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800325e:	60da      	str	r2, [r3, #12]
 8003260:	e005      	b.n	800326e <UART_SetConfig+0x466>
      }
      else
      {
        ret = HAL_ERROR;
 8003262:	231a      	movs	r3, #26
 8003264:	2218      	movs	r2, #24
 8003266:	189b      	adds	r3, r3, r2
 8003268:	19db      	adds	r3, r3, r7
 800326a:	2201      	movs	r2, #1
 800326c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	2200      	movs	r2, #0
 8003272:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	2200      	movs	r2, #0
 8003278:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800327a:	231a      	movs	r3, #26
 800327c:	2218      	movs	r2, #24
 800327e:	189b      	adds	r3, r3, r2
 8003280:	19db      	adds	r3, r3, r7
 8003282:	781b      	ldrb	r3, [r3, #0]
}
 8003284:	0018      	movs	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	b00e      	add	sp, #56	; 0x38
 800328a:	bdb0      	pop	{r4, r5, r7, pc}
 800328c:	08003ca4 	.word	0x08003ca4
 8003290:	40021000 	.word	0x40021000
 8003294:	003d0900 	.word	0x003d0900
 8003298:	00f42400 	.word	0x00f42400

0800329c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	2201      	movs	r2, #1
 80032aa:	4013      	ands	r3, r2
 80032ac:	d00b      	beq.n	80032c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	4a4a      	ldr	r2, [pc, #296]	; (80033e0 <UART_AdvFeatureConfig+0x144>)
 80032b6:	4013      	ands	r3, r2
 80032b8:	0019      	movs	r1, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	2202      	movs	r2, #2
 80032cc:	4013      	ands	r3, r2
 80032ce:	d00b      	beq.n	80032e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	4a43      	ldr	r2, [pc, #268]	; (80033e4 <UART_AdvFeatureConfig+0x148>)
 80032d8:	4013      	ands	r3, r2
 80032da:	0019      	movs	r1, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	2204      	movs	r2, #4
 80032ee:	4013      	ands	r3, r2
 80032f0:	d00b      	beq.n	800330a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	4a3b      	ldr	r2, [pc, #236]	; (80033e8 <UART_AdvFeatureConfig+0x14c>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	0019      	movs	r1, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	2208      	movs	r2, #8
 8003310:	4013      	ands	r3, r2
 8003312:	d00b      	beq.n	800332c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	4a34      	ldr	r2, [pc, #208]	; (80033ec <UART_AdvFeatureConfig+0x150>)
 800331c:	4013      	ands	r3, r2
 800331e:	0019      	movs	r1, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	2210      	movs	r2, #16
 8003332:	4013      	ands	r3, r2
 8003334:	d00b      	beq.n	800334e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	4a2c      	ldr	r2, [pc, #176]	; (80033f0 <UART_AdvFeatureConfig+0x154>)
 800333e:	4013      	ands	r3, r2
 8003340:	0019      	movs	r1, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	2220      	movs	r2, #32
 8003354:	4013      	ands	r3, r2
 8003356:	d00b      	beq.n	8003370 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	4a25      	ldr	r2, [pc, #148]	; (80033f4 <UART_AdvFeatureConfig+0x158>)
 8003360:	4013      	ands	r3, r2
 8003362:	0019      	movs	r1, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	2240      	movs	r2, #64	; 0x40
 8003376:	4013      	ands	r3, r2
 8003378:	d01d      	beq.n	80033b6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	4a1d      	ldr	r2, [pc, #116]	; (80033f8 <UART_AdvFeatureConfig+0x15c>)
 8003382:	4013      	ands	r3, r2
 8003384:	0019      	movs	r1, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003396:	2380      	movs	r3, #128	; 0x80
 8003398:	035b      	lsls	r3, r3, #13
 800339a:	429a      	cmp	r2, r3
 800339c:	d10b      	bne.n	80033b6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	4a15      	ldr	r2, [pc, #84]	; (80033fc <UART_AdvFeatureConfig+0x160>)
 80033a6:	4013      	ands	r3, r2
 80033a8:	0019      	movs	r1, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	2280      	movs	r2, #128	; 0x80
 80033bc:	4013      	ands	r3, r2
 80033be:	d00b      	beq.n	80033d8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	4a0e      	ldr	r2, [pc, #56]	; (8003400 <UART_AdvFeatureConfig+0x164>)
 80033c8:	4013      	ands	r3, r2
 80033ca:	0019      	movs	r1, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	605a      	str	r2, [r3, #4]
  }
}
 80033d8:	46c0      	nop			; (mov r8, r8)
 80033da:	46bd      	mov	sp, r7
 80033dc:	b002      	add	sp, #8
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	fffdffff 	.word	0xfffdffff
 80033e4:	fffeffff 	.word	0xfffeffff
 80033e8:	fffbffff 	.word	0xfffbffff
 80033ec:	ffff7fff 	.word	0xffff7fff
 80033f0:	ffffefff 	.word	0xffffefff
 80033f4:	ffffdfff 	.word	0xffffdfff
 80033f8:	ffefffff 	.word	0xffefffff
 80033fc:	ff9fffff 	.word	0xff9fffff
 8003400:	fff7ffff 	.word	0xfff7ffff

08003404 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af02      	add	r7, sp, #8
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2280      	movs	r2, #128	; 0x80
 8003410:	2100      	movs	r1, #0
 8003412:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003414:	f7fd fd50 	bl	8000eb8 <HAL_GetTick>
 8003418:	0003      	movs	r3, r0
 800341a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2208      	movs	r2, #8
 8003424:	4013      	ands	r3, r2
 8003426:	2b08      	cmp	r3, #8
 8003428:	d10c      	bne.n	8003444 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2280      	movs	r2, #128	; 0x80
 800342e:	0391      	lsls	r1, r2, #14
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	4a17      	ldr	r2, [pc, #92]	; (8003490 <UART_CheckIdleState+0x8c>)
 8003434:	9200      	str	r2, [sp, #0]
 8003436:	2200      	movs	r2, #0
 8003438:	f000 f82c 	bl	8003494 <UART_WaitOnFlagUntilTimeout>
 800343c:	1e03      	subs	r3, r0, #0
 800343e:	d001      	beq.n	8003444 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e021      	b.n	8003488 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2204      	movs	r2, #4
 800344c:	4013      	ands	r3, r2
 800344e:	2b04      	cmp	r3, #4
 8003450:	d10c      	bne.n	800346c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2280      	movs	r2, #128	; 0x80
 8003456:	03d1      	lsls	r1, r2, #15
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	4a0d      	ldr	r2, [pc, #52]	; (8003490 <UART_CheckIdleState+0x8c>)
 800345c:	9200      	str	r2, [sp, #0]
 800345e:	2200      	movs	r2, #0
 8003460:	f000 f818 	bl	8003494 <UART_WaitOnFlagUntilTimeout>
 8003464:	1e03      	subs	r3, r0, #0
 8003466:	d001      	beq.n	800346c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e00d      	b.n	8003488 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2220      	movs	r2, #32
 8003470:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2220      	movs	r2, #32
 8003476:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2274      	movs	r2, #116	; 0x74
 8003482:	2100      	movs	r1, #0
 8003484:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	0018      	movs	r0, r3
 800348a:	46bd      	mov	sp, r7
 800348c:	b004      	add	sp, #16
 800348e:	bd80      	pop	{r7, pc}
 8003490:	01ffffff 	.word	0x01ffffff

08003494 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b094      	sub	sp, #80	; 0x50
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	1dfb      	adds	r3, r7, #7
 80034a2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034a4:	e0a3      	b.n	80035ee <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034a8:	3301      	adds	r3, #1
 80034aa:	d100      	bne.n	80034ae <UART_WaitOnFlagUntilTimeout+0x1a>
 80034ac:	e09f      	b.n	80035ee <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ae:	f7fd fd03 	bl	8000eb8 <HAL_GetTick>
 80034b2:	0002      	movs	r2, r0
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d302      	bcc.n	80034c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80034be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d13d      	bne.n	8003540 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034c4:	f3ef 8310 	mrs	r3, PRIMASK
 80034c8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80034ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034cc:	647b      	str	r3, [r7, #68]	; 0x44
 80034ce:	2301      	movs	r3, #1
 80034d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d4:	f383 8810 	msr	PRIMASK, r3
}
 80034d8:	46c0      	nop			; (mov r8, r8)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	494c      	ldr	r1, [pc, #304]	; (8003618 <UART_WaitOnFlagUntilTimeout+0x184>)
 80034e6:	400a      	ands	r2, r1
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ec:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f0:	f383 8810 	msr	PRIMASK, r3
}
 80034f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034f6:	f3ef 8310 	mrs	r3, PRIMASK
 80034fa:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80034fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034fe:	643b      	str	r3, [r7, #64]	; 0x40
 8003500:	2301      	movs	r3, #1
 8003502:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003506:	f383 8810 	msr	PRIMASK, r3
}
 800350a:	46c0      	nop			; (mov r8, r8)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689a      	ldr	r2, [r3, #8]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2101      	movs	r1, #1
 8003518:	438a      	bics	r2, r1
 800351a:	609a      	str	r2, [r3, #8]
 800351c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800351e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003522:	f383 8810 	msr	PRIMASK, r3
}
 8003526:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2220      	movs	r2, #32
 800352c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2220      	movs	r2, #32
 8003532:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2274      	movs	r2, #116	; 0x74
 8003538:	2100      	movs	r1, #0
 800353a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e067      	b.n	8003610 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2204      	movs	r2, #4
 8003548:	4013      	ands	r3, r2
 800354a:	d050      	beq.n	80035ee <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	69da      	ldr	r2, [r3, #28]
 8003552:	2380      	movs	r3, #128	; 0x80
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	401a      	ands	r2, r3
 8003558:	2380      	movs	r3, #128	; 0x80
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	429a      	cmp	r2, r3
 800355e:	d146      	bne.n	80035ee <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2280      	movs	r2, #128	; 0x80
 8003566:	0112      	lsls	r2, r2, #4
 8003568:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800356a:	f3ef 8310 	mrs	r3, PRIMASK
 800356e:	613b      	str	r3, [r7, #16]
  return(result);
 8003570:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003572:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003574:	2301      	movs	r3, #1
 8003576:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f383 8810 	msr	PRIMASK, r3
}
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4923      	ldr	r1, [pc, #140]	; (8003618 <UART_WaitOnFlagUntilTimeout+0x184>)
 800358c:	400a      	ands	r2, r1
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003592:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	f383 8810 	msr	PRIMASK, r3
}
 800359a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800359c:	f3ef 8310 	mrs	r3, PRIMASK
 80035a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80035a2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80035a6:	2301      	movs	r3, #1
 80035a8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	f383 8810 	msr	PRIMASK, r3
}
 80035b0:	46c0      	nop			; (mov r8, r8)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2101      	movs	r1, #1
 80035be:	438a      	bics	r2, r1
 80035c0:	609a      	str	r2, [r3, #8]
 80035c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035c4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	f383 8810 	msr	PRIMASK, r3
}
 80035cc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2220      	movs	r2, #32
 80035d2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2220      	movs	r2, #32
 80035d8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2280      	movs	r2, #128	; 0x80
 80035de:	2120      	movs	r1, #32
 80035e0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2274      	movs	r2, #116	; 0x74
 80035e6:	2100      	movs	r1, #0
 80035e8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e010      	b.n	8003610 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	69db      	ldr	r3, [r3, #28]
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	4013      	ands	r3, r2
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	425a      	negs	r2, r3
 80035fe:	4153      	adcs	r3, r2
 8003600:	b2db      	uxtb	r3, r3
 8003602:	001a      	movs	r2, r3
 8003604:	1dfb      	adds	r3, r7, #7
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	429a      	cmp	r2, r3
 800360a:	d100      	bne.n	800360e <UART_WaitOnFlagUntilTimeout+0x17a>
 800360c:	e74b      	b.n	80034a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	0018      	movs	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	b014      	add	sp, #80	; 0x50
 8003616:	bd80      	pop	{r7, pc}
 8003618:	fffffe5f 	.word	0xfffffe5f

0800361c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08c      	sub	sp, #48	; 0x30
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	1dbb      	adds	r3, r7, #6
 8003628:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	1dba      	adds	r2, r7, #6
 8003634:	2158      	movs	r1, #88	; 0x58
 8003636:	8812      	ldrh	r2, [r2, #0]
 8003638:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	1dba      	adds	r2, r7, #6
 800363e:	215a      	movs	r1, #90	; 0x5a
 8003640:	8812      	ldrh	r2, [r2, #0]
 8003642:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	2380      	movs	r3, #128	; 0x80
 8003650:	015b      	lsls	r3, r3, #5
 8003652:	429a      	cmp	r2, r3
 8003654:	d10d      	bne.n	8003672 <UART_Start_Receive_IT+0x56>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d104      	bne.n	8003668 <UART_Start_Receive_IT+0x4c>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	225c      	movs	r2, #92	; 0x5c
 8003662:	4943      	ldr	r1, [pc, #268]	; (8003770 <UART_Start_Receive_IT+0x154>)
 8003664:	5299      	strh	r1, [r3, r2]
 8003666:	e02e      	b.n	80036c6 <UART_Start_Receive_IT+0xaa>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	225c      	movs	r2, #92	; 0x5c
 800366c:	21ff      	movs	r1, #255	; 0xff
 800366e:	5299      	strh	r1, [r3, r2]
 8003670:	e029      	b.n	80036c6 <UART_Start_Receive_IT+0xaa>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10d      	bne.n	8003696 <UART_Start_Receive_IT+0x7a>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d104      	bne.n	800368c <UART_Start_Receive_IT+0x70>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	225c      	movs	r2, #92	; 0x5c
 8003686:	21ff      	movs	r1, #255	; 0xff
 8003688:	5299      	strh	r1, [r3, r2]
 800368a:	e01c      	b.n	80036c6 <UART_Start_Receive_IT+0xaa>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	225c      	movs	r2, #92	; 0x5c
 8003690:	217f      	movs	r1, #127	; 0x7f
 8003692:	5299      	strh	r1, [r3, r2]
 8003694:	e017      	b.n	80036c6 <UART_Start_Receive_IT+0xaa>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	2380      	movs	r3, #128	; 0x80
 800369c:	055b      	lsls	r3, r3, #21
 800369e:	429a      	cmp	r2, r3
 80036a0:	d10d      	bne.n	80036be <UART_Start_Receive_IT+0xa2>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d104      	bne.n	80036b4 <UART_Start_Receive_IT+0x98>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	225c      	movs	r2, #92	; 0x5c
 80036ae:	217f      	movs	r1, #127	; 0x7f
 80036b0:	5299      	strh	r1, [r3, r2]
 80036b2:	e008      	b.n	80036c6 <UART_Start_Receive_IT+0xaa>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	225c      	movs	r2, #92	; 0x5c
 80036b8:	213f      	movs	r1, #63	; 0x3f
 80036ba:	5299      	strh	r1, [r3, r2]
 80036bc:	e003      	b.n	80036c6 <UART_Start_Receive_IT+0xaa>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	225c      	movs	r2, #92	; 0x5c
 80036c2:	2100      	movs	r1, #0
 80036c4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2280      	movs	r2, #128	; 0x80
 80036ca:	2100      	movs	r1, #0
 80036cc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2222      	movs	r2, #34	; 0x22
 80036d2:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036d4:	f3ef 8310 	mrs	r3, PRIMASK
 80036d8:	61fb      	str	r3, [r7, #28]
  return(result);
 80036da:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036de:	2301      	movs	r3, #1
 80036e0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	f383 8810 	msr	PRIMASK, r3
}
 80036e8:	46c0      	nop			; (mov r8, r8)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2101      	movs	r1, #1
 80036f6:	430a      	orrs	r2, r1
 80036f8:	609a      	str	r2, [r3, #8]
 80036fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	f383 8810 	msr	PRIMASK, r3
}
 8003704:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	689a      	ldr	r2, [r3, #8]
 800370a:	2380      	movs	r3, #128	; 0x80
 800370c:	015b      	lsls	r3, r3, #5
 800370e:	429a      	cmp	r2, r3
 8003710:	d107      	bne.n	8003722 <UART_Start_Receive_IT+0x106>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d103      	bne.n	8003722 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	4a15      	ldr	r2, [pc, #84]	; (8003774 <UART_Start_Receive_IT+0x158>)
 800371e:	665a      	str	r2, [r3, #100]	; 0x64
 8003720:	e002      	b.n	8003728 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4a14      	ldr	r2, [pc, #80]	; (8003778 <UART_Start_Receive_IT+0x15c>)
 8003726:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2274      	movs	r2, #116	; 0x74
 800372c:	2100      	movs	r1, #0
 800372e:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003730:	f3ef 8310 	mrs	r3, PRIMASK
 8003734:	613b      	str	r3, [r7, #16]
  return(result);
 8003736:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003738:	62bb      	str	r3, [r7, #40]	; 0x28
 800373a:	2301      	movs	r3, #1
 800373c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f383 8810 	msr	PRIMASK, r3
}
 8003744:	46c0      	nop			; (mov r8, r8)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2190      	movs	r1, #144	; 0x90
 8003752:	0049      	lsls	r1, r1, #1
 8003754:	430a      	orrs	r2, r1
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	f383 8810 	msr	PRIMASK, r3
}
 8003762:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	0018      	movs	r0, r3
 8003768:	46bd      	mov	sp, r7
 800376a:	b00c      	add	sp, #48	; 0x30
 800376c:	bd80      	pop	{r7, pc}
 800376e:	46c0      	nop			; (mov r8, r8)
 8003770:	000001ff 	.word	0x000001ff
 8003774:	08003a2d 	.word	0x08003a2d
 8003778:	080038c5 	.word	0x080038c5

0800377c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b08e      	sub	sp, #56	; 0x38
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003784:	f3ef 8310 	mrs	r3, PRIMASK
 8003788:	617b      	str	r3, [r7, #20]
  return(result);
 800378a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800378c:	637b      	str	r3, [r7, #52]	; 0x34
 800378e:	2301      	movs	r3, #1
 8003790:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	f383 8810 	msr	PRIMASK, r3
}
 8003798:	46c0      	nop			; (mov r8, r8)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4925      	ldr	r1, [pc, #148]	; (800383c <UART_EndRxTransfer+0xc0>)
 80037a6:	400a      	ands	r2, r1
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	f383 8810 	msr	PRIMASK, r3
}
 80037b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037b6:	f3ef 8310 	mrs	r3, PRIMASK
 80037ba:	623b      	str	r3, [r7, #32]
  return(result);
 80037bc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037be:	633b      	str	r3, [r7, #48]	; 0x30
 80037c0:	2301      	movs	r3, #1
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	f383 8810 	msr	PRIMASK, r3
}
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2101      	movs	r1, #1
 80037d8:	438a      	bics	r2, r1
 80037da:	609a      	str	r2, [r3, #8]
 80037dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037de:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e2:	f383 8810 	msr	PRIMASK, r3
}
 80037e6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d118      	bne.n	8003822 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037f0:	f3ef 8310 	mrs	r3, PRIMASK
 80037f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80037f6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037fa:	2301      	movs	r3, #1
 80037fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f383 8810 	msr	PRIMASK, r3
}
 8003804:	46c0      	nop			; (mov r8, r8)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2110      	movs	r1, #16
 8003812:	438a      	bics	r2, r1
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003818:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f383 8810 	msr	PRIMASK, r3
}
 8003820:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2220      	movs	r2, #32
 8003826:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003834:	46c0      	nop			; (mov r8, r8)
 8003836:	46bd      	mov	sp, r7
 8003838:	b00e      	add	sp, #56	; 0x38
 800383a:	bd80      	pop	{r7, pc}
 800383c:	fffffedf 	.word	0xfffffedf

08003840 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	225a      	movs	r2, #90	; 0x5a
 8003852:	2100      	movs	r1, #0
 8003854:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2252      	movs	r2, #82	; 0x52
 800385a:	2100      	movs	r1, #0
 800385c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	0018      	movs	r0, r3
 8003862:	f7ff fabd 	bl	8002de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003866:	46c0      	nop			; (mov r8, r8)
 8003868:	46bd      	mov	sp, r7
 800386a:	b004      	add	sp, #16
 800386c:	bd80      	pop	{r7, pc}

0800386e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b086      	sub	sp, #24
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003876:	f3ef 8310 	mrs	r3, PRIMASK
 800387a:	60bb      	str	r3, [r7, #8]
  return(result);
 800387c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800387e:	617b      	str	r3, [r7, #20]
 8003880:	2301      	movs	r3, #1
 8003882:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f383 8810 	msr	PRIMASK, r3
}
 800388a:	46c0      	nop			; (mov r8, r8)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2140      	movs	r1, #64	; 0x40
 8003898:	438a      	bics	r2, r1
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	f383 8810 	msr	PRIMASK, r3
}
 80038a6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2220      	movs	r2, #32
 80038ac:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	0018      	movs	r0, r3
 80038b8:	f7fd f942 	bl	8000b40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038bc:	46c0      	nop			; (mov r8, r8)
 80038be:	46bd      	mov	sp, r7
 80038c0:	b006      	add	sp, #24
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b090      	sub	sp, #64	; 0x40
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80038cc:	203e      	movs	r0, #62	; 0x3e
 80038ce:	183b      	adds	r3, r7, r0
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	215c      	movs	r1, #92	; 0x5c
 80038d4:	5a52      	ldrh	r2, [r2, r1]
 80038d6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038dc:	2b22      	cmp	r3, #34	; 0x22
 80038de:	d000      	beq.n	80038e2 <UART_RxISR_8BIT+0x1e>
 80038e0:	e095      	b.n	8003a0e <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038e8:	213c      	movs	r1, #60	; 0x3c
 80038ea:	187b      	adds	r3, r7, r1
 80038ec:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80038ee:	187b      	adds	r3, r7, r1
 80038f0:	881b      	ldrh	r3, [r3, #0]
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	183b      	adds	r3, r7, r0
 80038f6:	881b      	ldrh	r3, [r3, #0]
 80038f8:	b2d9      	uxtb	r1, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fe:	400a      	ands	r2, r1
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	225a      	movs	r2, #90	; 0x5a
 8003912:	5a9b      	ldrh	r3, [r3, r2]
 8003914:	b29b      	uxth	r3, r3
 8003916:	3b01      	subs	r3, #1
 8003918:	b299      	uxth	r1, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	225a      	movs	r2, #90	; 0x5a
 800391e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	225a      	movs	r2, #90	; 0x5a
 8003924:	5a9b      	ldrh	r3, [r3, r2]
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d178      	bne.n	8003a1e <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800392c:	f3ef 8310 	mrs	r3, PRIMASK
 8003930:	61bb      	str	r3, [r7, #24]
  return(result);
 8003932:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003934:	63bb      	str	r3, [r7, #56]	; 0x38
 8003936:	2301      	movs	r3, #1
 8003938:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	f383 8810 	msr	PRIMASK, r3
}
 8003940:	46c0      	nop			; (mov r8, r8)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4936      	ldr	r1, [pc, #216]	; (8003a28 <UART_RxISR_8BIT+0x164>)
 800394e:	400a      	ands	r2, r1
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003954:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	f383 8810 	msr	PRIMASK, r3
}
 800395c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800395e:	f3ef 8310 	mrs	r3, PRIMASK
 8003962:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003966:	637b      	str	r3, [r7, #52]	; 0x34
 8003968:	2301      	movs	r3, #1
 800396a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800396c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396e:	f383 8810 	msr	PRIMASK, r3
}
 8003972:	46c0      	nop			; (mov r8, r8)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689a      	ldr	r2, [r3, #8]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2101      	movs	r1, #1
 8003980:	438a      	bics	r2, r1
 8003982:	609a      	str	r2, [r3, #8]
 8003984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003986:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398a:	f383 8810 	msr	PRIMASK, r3
}
 800398e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2220      	movs	r2, #32
 8003994:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d12f      	bne.n	8003a04 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039aa:	f3ef 8310 	mrs	r3, PRIMASK
 80039ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80039b0:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039b2:	633b      	str	r3, [r7, #48]	; 0x30
 80039b4:	2301      	movs	r3, #1
 80039b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f383 8810 	msr	PRIMASK, r3
}
 80039be:	46c0      	nop			; (mov r8, r8)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2110      	movs	r1, #16
 80039cc:	438a      	bics	r2, r1
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f383 8810 	msr	PRIMASK, r3
}
 80039da:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	2210      	movs	r2, #16
 80039e4:	4013      	ands	r3, r2
 80039e6:	2b10      	cmp	r3, #16
 80039e8:	d103      	bne.n	80039f2 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2210      	movs	r2, #16
 80039f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2258      	movs	r2, #88	; 0x58
 80039f6:	5a9a      	ldrh	r2, [r3, r2]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	0011      	movs	r1, r2
 80039fc:	0018      	movs	r0, r3
 80039fe:	f7ff f9f7 	bl	8002df0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003a02:	e00c      	b.n	8003a1e <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	0018      	movs	r0, r3
 8003a08:	f7fd f886 	bl	8000b18 <HAL_UART_RxCpltCallback>
}
 8003a0c:	e007      	b.n	8003a1e <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	699a      	ldr	r2, [r3, #24]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2108      	movs	r1, #8
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	619a      	str	r2, [r3, #24]
}
 8003a1e:	46c0      	nop			; (mov r8, r8)
 8003a20:	46bd      	mov	sp, r7
 8003a22:	b010      	add	sp, #64	; 0x40
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	46c0      	nop			; (mov r8, r8)
 8003a28:	fffffedf 	.word	0xfffffedf

08003a2c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b090      	sub	sp, #64	; 0x40
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003a34:	203e      	movs	r0, #62	; 0x3e
 8003a36:	183b      	adds	r3, r7, r0
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	215c      	movs	r1, #92	; 0x5c
 8003a3c:	5a52      	ldrh	r2, [r2, r1]
 8003a3e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a44:	2b22      	cmp	r3, #34	; 0x22
 8003a46:	d000      	beq.n	8003a4a <UART_RxISR_16BIT+0x1e>
 8003a48:	e095      	b.n	8003b76 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a50:	213c      	movs	r1, #60	; 0x3c
 8003a52:	187b      	adds	r3, r7, r1
 8003a54:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5a:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8003a5c:	187b      	adds	r3, r7, r1
 8003a5e:	183a      	adds	r2, r7, r0
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	8812      	ldrh	r2, [r2, #0]
 8003a64:	4013      	ands	r3, r2
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a6a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a70:	1c9a      	adds	r2, r3, #2
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	225a      	movs	r2, #90	; 0x5a
 8003a7a:	5a9b      	ldrh	r3, [r3, r2]
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	b299      	uxth	r1, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	225a      	movs	r2, #90	; 0x5a
 8003a86:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	225a      	movs	r2, #90	; 0x5a
 8003a8c:	5a9b      	ldrh	r3, [r3, r2]
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d178      	bne.n	8003b86 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a94:	f3ef 8310 	mrs	r3, PRIMASK
 8003a98:	617b      	str	r3, [r7, #20]
  return(result);
 8003a9a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	f383 8810 	msr	PRIMASK, r3
}
 8003aa8:	46c0      	nop			; (mov r8, r8)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4936      	ldr	r1, [pc, #216]	; (8003b90 <UART_RxISR_16BIT+0x164>)
 8003ab6:	400a      	ands	r2, r1
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003abc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	f383 8810 	msr	PRIMASK, r3
}
 8003ac4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8003aca:	623b      	str	r3, [r7, #32]
  return(result);
 8003acc:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ace:	633b      	str	r3, [r7, #48]	; 0x30
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	f383 8810 	msr	PRIMASK, r3
}
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	438a      	bics	r2, r1
 8003aea:	609a      	str	r2, [r3, #8]
 8003aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af2:	f383 8810 	msr	PRIMASK, r3
}
 8003af6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d12f      	bne.n	8003b6c <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b12:	f3ef 8310 	mrs	r3, PRIMASK
 8003b16:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b18:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f383 8810 	msr	PRIMASK, r3
}
 8003b26:	46c0      	nop			; (mov r8, r8)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2110      	movs	r1, #16
 8003b34:	438a      	bics	r2, r1
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	f383 8810 	msr	PRIMASK, r3
}
 8003b42:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	2210      	movs	r2, #16
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	2b10      	cmp	r3, #16
 8003b50:	d103      	bne.n	8003b5a <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2210      	movs	r2, #16
 8003b58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2258      	movs	r2, #88	; 0x58
 8003b5e:	5a9a      	ldrh	r2, [r3, r2]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	0011      	movs	r1, r2
 8003b64:	0018      	movs	r0, r3
 8003b66:	f7ff f943 	bl	8002df0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b6a:	e00c      	b.n	8003b86 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f7fc ffd2 	bl	8000b18 <HAL_UART_RxCpltCallback>
}
 8003b74:	e007      	b.n	8003b86 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	699a      	ldr	r2, [r3, #24]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2108      	movs	r1, #8
 8003b82:	430a      	orrs	r2, r1
 8003b84:	619a      	str	r2, [r3, #24]
}
 8003b86:	46c0      	nop			; (mov r8, r8)
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	b010      	add	sp, #64	; 0x40
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	fffffedf 	.word	0xfffffedf

08003b94 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003b9c:	46c0      	nop			; (mov r8, r8)
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	b002      	add	sp, #8
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <__libc_init_array>:
 8003ba4:	b570      	push	{r4, r5, r6, lr}
 8003ba6:	2600      	movs	r6, #0
 8003ba8:	4d0c      	ldr	r5, [pc, #48]	; (8003bdc <__libc_init_array+0x38>)
 8003baa:	4c0d      	ldr	r4, [pc, #52]	; (8003be0 <__libc_init_array+0x3c>)
 8003bac:	1b64      	subs	r4, r4, r5
 8003bae:	10a4      	asrs	r4, r4, #2
 8003bb0:	42a6      	cmp	r6, r4
 8003bb2:	d109      	bne.n	8003bc8 <__libc_init_array+0x24>
 8003bb4:	2600      	movs	r6, #0
 8003bb6:	f000 f821 	bl	8003bfc <_init>
 8003bba:	4d0a      	ldr	r5, [pc, #40]	; (8003be4 <__libc_init_array+0x40>)
 8003bbc:	4c0a      	ldr	r4, [pc, #40]	; (8003be8 <__libc_init_array+0x44>)
 8003bbe:	1b64      	subs	r4, r4, r5
 8003bc0:	10a4      	asrs	r4, r4, #2
 8003bc2:	42a6      	cmp	r6, r4
 8003bc4:	d105      	bne.n	8003bd2 <__libc_init_array+0x2e>
 8003bc6:	bd70      	pop	{r4, r5, r6, pc}
 8003bc8:	00b3      	lsls	r3, r6, #2
 8003bca:	58eb      	ldr	r3, [r5, r3]
 8003bcc:	4798      	blx	r3
 8003bce:	3601      	adds	r6, #1
 8003bd0:	e7ee      	b.n	8003bb0 <__libc_init_array+0xc>
 8003bd2:	00b3      	lsls	r3, r6, #2
 8003bd4:	58eb      	ldr	r3, [r5, r3]
 8003bd6:	4798      	blx	r3
 8003bd8:	3601      	adds	r6, #1
 8003bda:	e7f2      	b.n	8003bc2 <__libc_init_array+0x1e>
 8003bdc:	08003cd0 	.word	0x08003cd0
 8003be0:	08003cd0 	.word	0x08003cd0
 8003be4:	08003cd0 	.word	0x08003cd0
 8003be8:	08003cd4 	.word	0x08003cd4

08003bec <memset>:
 8003bec:	0003      	movs	r3, r0
 8003bee:	1882      	adds	r2, r0, r2
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d100      	bne.n	8003bf6 <memset+0xa>
 8003bf4:	4770      	bx	lr
 8003bf6:	7019      	strb	r1, [r3, #0]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	e7f9      	b.n	8003bf0 <memset+0x4>

08003bfc <_init>:
 8003bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bfe:	46c0      	nop			; (mov r8, r8)
 8003c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c02:	bc08      	pop	{r3}
 8003c04:	469e      	mov	lr, r3
 8003c06:	4770      	bx	lr

08003c08 <_fini>:
 8003c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c0e:	bc08      	pop	{r3}
 8003c10:	469e      	mov	lr, r3
 8003c12:	4770      	bx	lr
