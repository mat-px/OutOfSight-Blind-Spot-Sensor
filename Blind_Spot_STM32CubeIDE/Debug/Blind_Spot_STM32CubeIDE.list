
Blind_Spot_STM32CubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037f8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080038b8  080038b8  000138b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800394c  0800394c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800394c  0800394c  0001394c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003954  08003954  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003954  08003954  00013954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003958  08003958  00013958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800395c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000010  0800396c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  0800396c  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b59a  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bac  00000000  00000000  0002b5d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000920  00000000  00000000  0002d180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000878  00000000  00000000  0002daa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010d11  00000000  00000000  0002e318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb4f  00000000  00000000  0003f029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000647e1  00000000  00000000  0004ab78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000af359  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020b8  00000000  00000000  000af3ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080038a0 	.word	0x080038a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080038a0 	.word	0x080038a0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);
void send_command(uint8_t command[]);
char* hex_to_char(uint8_t hex);

int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  HAL_Init();
 80004ac:	f000 fb7a 	bl	8000ba4 <HAL_Init>
  SystemClock_Config();
 80004b0:	f000 f8c8 	bl	8000644 <SystemClock_Config>
  MX_GPIO_Init();
 80004b4:	f000 f99a 	bl	80007ec <MX_GPIO_Init>
  MX_SPI1_Init();
 80004b8:	f000 f930 	bl	800071c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80004bc:	f000 f966 	bl	800078c <MX_USART2_UART_Init>

  //Enable UART
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 80004c0:	2201      	movs	r2, #1
 80004c2:	2100      	movs	r1, #0
 80004c4:	201c      	movs	r0, #28
 80004c6:	f000 fcad 	bl	8000e24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80004ca:	201c      	movs	r0, #28
 80004cc:	f000 fcbf 	bl	8000e4e <HAL_NVIC_EnableIRQ>
//  USART2_IRQHandler();

  // Start transmission
  HAL_UART_Receive_IT(&huart2, rx_buffer, sizeof(rx_buffer));
 80004d0:	4907      	ldr	r1, [pc, #28]	; (80004f0 <main+0x48>)
 80004d2:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <main+0x4c>)
 80004d4:	2208      	movs	r2, #8
 80004d6:	0018      	movs	r0, r3
 80004d8:	f001 ff2e 	bl	8002338 <HAL_UART_Receive_IT>
//  HAL_Delay(1000);
//  HAL_GPIO_WritePin(LED_OUT_GPIO_Port, LED_OUT_Pin, GPIO_PIN_RESET);

  while (1)
  {
	  send_command(soft_reset);
 80004dc:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <main+0x50>)
 80004de:	0018      	movs	r0, r3
 80004e0:	f000 f81e 	bl	8000520 <send_command>
	  HAL_Delay(500);
 80004e4:	23fa      	movs	r3, #250	; 0xfa
 80004e6:	005b      	lsls	r3, r3, #1
 80004e8:	0018      	movs	r0, r3
 80004ea:	f000 fbcb 	bl	8000c84 <HAL_Delay>
	  send_command(soft_reset);
 80004ee:	e7f5      	b.n	80004dc <main+0x34>
 80004f0:	20000108 	.word	0x20000108
 80004f4:	20000084 	.word	0x20000084
 80004f8:	20000000 	.word	0x20000000

080004fc <hex_to_char>:
//	  lidar_trigger();          // trigger detection
//	  HAL_Delay(1000);          // wait for detection to complete
  }
}

char* hex_to_char(uint8_t hex){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	0002      	movs	r2, r0
 8000504:	1dfb      	adds	r3, r7, #7
 8000506:	701a      	strb	r2, [r3, #0]
	char* tmp[1];
	itoa(hex, tmp[1], 16);
 8000508:	1dfb      	adds	r3, r7, #7
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	6939      	ldr	r1, [r7, #16]
 800050e:	2210      	movs	r2, #16
 8000510:	0018      	movs	r0, r3
 8000512:	f003 f979 	bl	8003808 <itoa>
//	sprintf(tmp[1], "%x", hex); // Not enough storage
	return tmp[1];
 8000516:	693b      	ldr	r3, [r7, #16]
}
 8000518:	0018      	movs	r0, r3
 800051a:	46bd      	mov	sp, r7
 800051c:	b004      	add	sp, #16
 800051e:	bd80      	pop	{r7, pc}

08000520 <send_command>:

void send_command(uint8_t command[]){
 8000520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000522:	b08d      	sub	sp, #52	; 0x34
 8000524:	af00      	add	r7, sp, #0
 8000526:	61f8      	str	r0, [r7, #28]
 8000528:	4669      	mov	r1, sp
 800052a:	000e      	movs	r6, r1
	int SIZE = sizeof(&command);
 800052c:	2104      	movs	r1, #4
 800052e:	62b9      	str	r1, [r7, #40]	; 0x28
	char* tmp[SIZE];
 8000530:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000532:	1e48      	subs	r0, r1, #1
 8000534:	6278      	str	r0, [r7, #36]	; 0x24
 8000536:	0008      	movs	r0, r1
 8000538:	6138      	str	r0, [r7, #16]
 800053a:	2000      	movs	r0, #0
 800053c:	6178      	str	r0, [r7, #20]
 800053e:	693a      	ldr	r2, [r7, #16]
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	0010      	movs	r0, r2
 8000544:	0ec0      	lsrs	r0, r0, #27
 8000546:	613a      	str	r2, [r7, #16]
 8000548:	617b      	str	r3, [r7, #20]
 800054a:	015d      	lsls	r5, r3, #5
 800054c:	4305      	orrs	r5, r0
 800054e:	693b      	ldr	r3, [r7, #16]
 8000550:	015c      	lsls	r4, r3, #5
 8000552:	0008      	movs	r0, r1
 8000554:	6038      	str	r0, [r7, #0]
 8000556:	2000      	movs	r0, #0
 8000558:	6078      	str	r0, [r7, #4]
 800055a:	683c      	ldr	r4, [r7, #0]
 800055c:	687d      	ldr	r5, [r7, #4]
 800055e:	0023      	movs	r3, r4
 8000560:	0ed8      	lsrs	r0, r3, #27
 8000562:	002b      	movs	r3, r5
 8000564:	015b      	lsls	r3, r3, #5
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	4303      	orrs	r3, r0
 800056c:	60fb      	str	r3, [r7, #12]
 800056e:	0023      	movs	r3, r4
 8000570:	015b      	lsls	r3, r3, #5
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	000b      	movs	r3, r1
 8000576:	009b      	lsls	r3, r3, #2
 8000578:	3307      	adds	r3, #7
 800057a:	08db      	lsrs	r3, r3, #3
 800057c:	00db      	lsls	r3, r3, #3
 800057e:	466a      	mov	r2, sp
 8000580:	1ad3      	subs	r3, r2, r3
 8000582:	469d      	mov	sp, r3
 8000584:	466b      	mov	r3, sp
 8000586:	3303      	adds	r3, #3
 8000588:	089b      	lsrs	r3, r3, #2
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < sizeof(&command); i++){
 800058e:	2300      	movs	r3, #0
 8000590:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000592:	e00e      	b.n	80005b2 <send_command+0x92>
		tmp[i] = hex_to_char(command[i]);
 8000594:	69fa      	ldr	r2, [r7, #28]
 8000596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000598:	18d3      	adds	r3, r2, r3
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	0018      	movs	r0, r3
 800059e:	f7ff ffad 	bl	80004fc <hex_to_char>
 80005a2:	0001      	movs	r1, r0
 80005a4:	6a3b      	ldr	r3, [r7, #32]
 80005a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80005a8:	0092      	lsls	r2, r2, #2
 80005aa:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < sizeof(&command); i++){
 80005ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005ae:	3301      	adds	r3, #1
 80005b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005b4:	2b03      	cmp	r3, #3
 80005b6:	d9ed      	bls.n	8000594 <send_command+0x74>
	}
	HAL_UART_Transmit(&huart2, (uint8_t*)&tmp, SIZE, HAL_MAX_DELAY);
 80005b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005ba:	b29a      	uxth	r2, r3
 80005bc:	2301      	movs	r3, #1
 80005be:	425b      	negs	r3, r3
 80005c0:	6a39      	ldr	r1, [r7, #32]
 80005c2:	4804      	ldr	r0, [pc, #16]	; (80005d4 <send_command+0xb4>)
 80005c4:	f001 fe10 	bl	80021e8 <HAL_UART_Transmit>
 80005c8:	46b5      	mov	sp, r6
}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	b00d      	add	sp, #52	; 0x34
 80005d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	20000084 	.word	0x20000084

080005d8 <HAL_UART_RxCpltCallback>:

void lidar_trigger() {
//  HAL_UART_Transmit(&huart2, trig_cmd, sizeof(trig_cmd), 100);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	//float distance_m;
	//uint16_t distance_cm;
	HAL_GPIO_WritePin(LED_OUT_GPIO_Port, LED_OUT_Pin, GPIO_PIN_SET);
 80005e0:	2380      	movs	r3, #128	; 0x80
 80005e2:	01d9      	lsls	r1, r3, #7
 80005e4:	23a0      	movs	r3, #160	; 0xa0
 80005e6:	05db      	lsls	r3, r3, #23
 80005e8:	2201      	movs	r2, #1
 80005ea:	0018      	movs	r0, r3
 80005ec:	f000 fe3a 	bl	8001264 <HAL_GPIO_WritePin>

	if(huart->Instance == huart2.Instance){
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	4b11      	ldr	r3, [pc, #68]	; (800063c <HAL_UART_RxCpltCallback+0x64>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d11a      	bne.n	8000632 <HAL_UART_RxCpltCallback+0x5a>
		HAL_GPIO_WritePin(LED_OUT_GPIO_Port, LED_OUT_Pin, GPIO_PIN_SET);
 80005fc:	2380      	movs	r3, #128	; 0x80
 80005fe:	01d9      	lsls	r1, r3, #7
 8000600:	23a0      	movs	r3, #160	; 0xa0
 8000602:	05db      	lsls	r3, r3, #23
 8000604:	2201      	movs	r2, #1
 8000606:	0018      	movs	r0, r3
 8000608:	f000 fe2c 	bl	8001264 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800060c:	23fa      	movs	r3, #250	; 0xfa
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	0018      	movs	r0, r3
 8000612:	f000 fb37 	bl	8000c84 <HAL_Delay>
		HAL_GPIO_WritePin(LED_OUT_GPIO_Port, LED_OUT_Pin, GPIO_PIN_RESET);
 8000616:	2380      	movs	r3, #128	; 0x80
 8000618:	01d9      	lsls	r1, r3, #7
 800061a:	23a0      	movs	r3, #160	; 0xa0
 800061c:	05db      	lsls	r3, r3, #23
 800061e:	2200      	movs	r2, #0
 8000620:	0018      	movs	r0, r3
 8000622:	f000 fe1f 	bl	8001264 <HAL_GPIO_WritePin>
		HAL_UART_Receive_IT(&huart2, rx_buffer, sizeof(rx_buffer));
 8000626:	4906      	ldr	r1, [pc, #24]	; (8000640 <HAL_UART_RxCpltCallback+0x68>)
 8000628:	4b04      	ldr	r3, [pc, #16]	; (800063c <HAL_UART_RxCpltCallback+0x64>)
 800062a:	2208      	movs	r2, #8
 800062c:	0018      	movs	r0, r3
 800062e:	f001 fe83 	bl	8002338 <HAL_UART_Receive_IT>
//    	  HAL_GPIO_WritePin(LED_OUT_GPIO_Port, LED_OUT_Pin, GPIO_PIN_RESET);
//      }
//    }
//    HAL_UART_Receive_IT(&huart2, rx_buffer, 9);  // start another reception
//  }
}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	46bd      	mov	sp, r7
 8000636:	b002      	add	sp, #8
 8000638:	bd80      	pop	{r7, pc}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	20000084 	.word	0x20000084
 8000640:	20000108 	.word	0x20000108

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b099      	sub	sp, #100	; 0x64
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	242c      	movs	r4, #44	; 0x2c
 800064c:	193b      	adds	r3, r7, r4
 800064e:	0018      	movs	r0, r3
 8000650:	2334      	movs	r3, #52	; 0x34
 8000652:	001a      	movs	r2, r3
 8000654:	2100      	movs	r1, #0
 8000656:	f003 f8db 	bl	8003810 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065a:	2318      	movs	r3, #24
 800065c:	18fb      	adds	r3, r7, r3
 800065e:	0018      	movs	r0, r3
 8000660:	2314      	movs	r3, #20
 8000662:	001a      	movs	r2, r3
 8000664:	2100      	movs	r1, #0
 8000666:	f003 f8d3 	bl	8003810 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800066a:	003b      	movs	r3, r7
 800066c:	0018      	movs	r0, r3
 800066e:	2318      	movs	r3, #24
 8000670:	001a      	movs	r2, r3
 8000672:	2100      	movs	r1, #0
 8000674:	f003 f8cc 	bl	8003810 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000678:	4b26      	ldr	r3, [pc, #152]	; (8000714 <SystemClock_Config+0xd0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a26      	ldr	r2, [pc, #152]	; (8000718 <SystemClock_Config+0xd4>)
 800067e:	401a      	ands	r2, r3
 8000680:	4b24      	ldr	r3, [pc, #144]	; (8000714 <SystemClock_Config+0xd0>)
 8000682:	2180      	movs	r1, #128	; 0x80
 8000684:	0109      	lsls	r1, r1, #4
 8000686:	430a      	orrs	r2, r1
 8000688:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800068a:	0021      	movs	r1, r4
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2210      	movs	r2, #16
 8000690:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2201      	movs	r2, #1
 8000696:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	22a0      	movs	r2, #160	; 0xa0
 80006a2:	0212      	lsls	r2, r2, #8
 80006a4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2200      	movs	r2, #0
 80006aa:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	0018      	movs	r0, r3
 80006b0:	f000 fdf6 	bl	80012a0 <HAL_RCC_OscConfig>
 80006b4:	1e03      	subs	r3, r0, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x78>
  {
    Error_Handler();
 80006b8:	f000 f948 	bl	800094c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	2118      	movs	r1, #24
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	220f      	movs	r2, #15
 80006c2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2200      	movs	r2, #0
 80006c8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2100      	movs	r1, #0
 80006e0:	0018      	movs	r0, r3
 80006e2:	f001 f959 	bl	8001998 <HAL_RCC_ClockConfig>
 80006e6:	1e03      	subs	r3, r0, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006ea:	f000 f92f 	bl	800094c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006ee:	003b      	movs	r3, r7
 80006f0:	2202      	movs	r2, #2
 80006f2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006f4:	003b      	movs	r3, r7
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006fa:	003b      	movs	r3, r7
 80006fc:	0018      	movs	r0, r3
 80006fe:	f001 fb6f 	bl	8001de0 <HAL_RCCEx_PeriphCLKConfig>
 8000702:	1e03      	subs	r3, r0, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000706:	f000 f921 	bl	800094c <Error_Handler>
  }
}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	46bd      	mov	sp, r7
 800070e:	b019      	add	sp, #100	; 0x64
 8000710:	bd90      	pop	{r4, r7, pc}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	40007000 	.word	0x40007000
 8000718:	ffffe7ff 	.word	0xffffe7ff

0800071c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000720:	4b18      	ldr	r3, [pc, #96]	; (8000784 <MX_SPI1_Init+0x68>)
 8000722:	4a19      	ldr	r2, [pc, #100]	; (8000788 <MX_SPI1_Init+0x6c>)
 8000724:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000726:	4b17      	ldr	r3, [pc, #92]	; (8000784 <MX_SPI1_Init+0x68>)
 8000728:	2282      	movs	r2, #130	; 0x82
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_SPI1_Init+0x68>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000734:	4b13      	ldr	r3, [pc, #76]	; (8000784 <MX_SPI1_Init+0x68>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <MX_SPI1_Init+0x68>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000740:	4b10      	ldr	r3, [pc, #64]	; (8000784 <MX_SPI1_Init+0x68>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_SPI1_Init+0x68>)
 8000748:	2280      	movs	r2, #128	; 0x80
 800074a:	0092      	lsls	r2, r2, #2
 800074c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800074e:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <MX_SPI1_Init+0x68>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000754:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_SPI1_Init+0x68>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800075a:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <MX_SPI1_Init+0x68>)
 800075c:	2200      	movs	r2, #0
 800075e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MX_SPI1_Init+0x68>)
 8000762:	2200      	movs	r2, #0
 8000764:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000766:	4b07      	ldr	r3, [pc, #28]	; (8000784 <MX_SPI1_Init+0x68>)
 8000768:	2207      	movs	r2, #7
 800076a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <MX_SPI1_Init+0x68>)
 800076e:	0018      	movs	r0, r3
 8000770:	f001 fc5c 	bl	800202c <HAL_SPI_Init>
 8000774:	1e03      	subs	r3, r0, #0
 8000776:	d001      	beq.n	800077c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000778:	f000 f8e8 	bl	800094c <Error_Handler>
  }
}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	2000002c 	.word	0x2000002c
 8000788:	40013000 	.word	0x40013000

0800078c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000790:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 8000792:	4a15      	ldr	r2, [pc, #84]	; (80007e8 <MX_USART2_UART_Init+0x5c>)
 8000794:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000796:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 8000798:	22e1      	movs	r2, #225	; 0xe1
 800079a:	0252      	lsls	r2, r2, #9
 800079c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ce:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 80007d0:	0018      	movs	r0, r3
 80007d2:	f001 fcb5 	bl	8002140 <HAL_UART_Init>
 80007d6:	1e03      	subs	r3, r0, #0
 80007d8:	d001      	beq.n	80007de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007da:	f000 f8b7 	bl	800094c <Error_Handler>
  }
}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000084 	.word	0x20000084
 80007e8:	40004400 	.word	0x40004400

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b590      	push	{r4, r7, lr}
 80007ee:	b089      	sub	sp, #36	; 0x24
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	240c      	movs	r4, #12
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	0018      	movs	r0, r3
 80007f8:	2314      	movs	r3, #20
 80007fa:	001a      	movs	r2, r3
 80007fc:	2100      	movs	r1, #0
 80007fe:	f003 f807 	bl	8003810 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	4b4c      	ldr	r3, [pc, #304]	; (8000934 <MX_GPIO_Init+0x148>)
 8000804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000806:	4b4b      	ldr	r3, [pc, #300]	; (8000934 <MX_GPIO_Init+0x148>)
 8000808:	2104      	movs	r1, #4
 800080a:	430a      	orrs	r2, r1
 800080c:	62da      	str	r2, [r3, #44]	; 0x2c
 800080e:	4b49      	ldr	r3, [pc, #292]	; (8000934 <MX_GPIO_Init+0x148>)
 8000810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000812:	2204      	movs	r2, #4
 8000814:	4013      	ands	r3, r2
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	4b46      	ldr	r3, [pc, #280]	; (8000934 <MX_GPIO_Init+0x148>)
 800081c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800081e:	4b45      	ldr	r3, [pc, #276]	; (8000934 <MX_GPIO_Init+0x148>)
 8000820:	2101      	movs	r1, #1
 8000822:	430a      	orrs	r2, r1
 8000824:	62da      	str	r2, [r3, #44]	; 0x2c
 8000826:	4b43      	ldr	r3, [pc, #268]	; (8000934 <MX_GPIO_Init+0x148>)
 8000828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800082a:	2201      	movs	r2, #1
 800082c:	4013      	ands	r3, r2
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	4b40      	ldr	r3, [pc, #256]	; (8000934 <MX_GPIO_Init+0x148>)
 8000834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000836:	4b3f      	ldr	r3, [pc, #252]	; (8000934 <MX_GPIO_Init+0x148>)
 8000838:	2102      	movs	r1, #2
 800083a:	430a      	orrs	r2, r1
 800083c:	62da      	str	r2, [r3, #44]	; 0x2c
 800083e:	4b3d      	ldr	r3, [pc, #244]	; (8000934 <MX_GPIO_Init+0x148>)
 8000840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000842:	2202      	movs	r2, #2
 8000844:	4013      	ands	r3, r2
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MISC_GPIO3_Pin|MISC_GPIO4_Pin, GPIO_PIN_RESET);
 800084a:	23c0      	movs	r3, #192	; 0xc0
 800084c:	021b      	lsls	r3, r3, #8
 800084e:	483a      	ldr	r0, [pc, #232]	; (8000938 <MX_GPIO_Init+0x14c>)
 8000850:	2200      	movs	r2, #0
 8000852:	0019      	movs	r1, r3
 8000854:	f000 fd06 	bl	8001264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ACCEL_SPI1_CS_Pin|GPIO_PIN_4|GPIO_PIN_13|LED_OUT_Pin, GPIO_PIN_RESET);
 8000858:	4938      	ldr	r1, [pc, #224]	; (800093c <MX_GPIO_Init+0x150>)
 800085a:	23a0      	movs	r3, #160	; 0xa0
 800085c:	05db      	lsls	r3, r3, #23
 800085e:	2200      	movs	r2, #0
 8000860:	0018      	movs	r0, r3
 8000862:	f000 fcff 	bl	8001264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MISC_GPIO2_GPIO_Port, MISC_GPIO2_Pin, GPIO_PIN_RESET);
 8000866:	4b36      	ldr	r3, [pc, #216]	; (8000940 <MX_GPIO_Init+0x154>)
 8000868:	2200      	movs	r2, #0
 800086a:	2102      	movs	r1, #2
 800086c:	0018      	movs	r0, r3
 800086e:	f000 fcf9 	bl	8001264 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MISC_GPIO3_Pin MISC_GPIO4_Pin */
  GPIO_InitStruct.Pin = MISC_GPIO3_Pin|MISC_GPIO4_Pin;
 8000872:	193b      	adds	r3, r7, r4
 8000874:	22c0      	movs	r2, #192	; 0xc0
 8000876:	0212      	lsls	r2, r2, #8
 8000878:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	193b      	adds	r3, r7, r4
 800087c:	2201      	movs	r2, #1
 800087e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	193b      	adds	r3, r7, r4
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	193b      	adds	r3, r7, r4
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800088c:	193b      	adds	r3, r7, r4
 800088e:	4a2a      	ldr	r2, [pc, #168]	; (8000938 <MX_GPIO_Init+0x14c>)
 8000890:	0019      	movs	r1, r3
 8000892:	0010      	movs	r0, r2
 8000894:	f000 fb80 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : ON_OFF_MODE_Pin ACCEL_INT2_Pin ACCEL_INT1_Pin */
  GPIO_InitStruct.Pin = ON_OFF_MODE_Pin|ACCEL_INT2_Pin|ACCEL_INT1_Pin;
 8000898:	193b      	adds	r3, r7, r4
 800089a:	4a2a      	ldr	r2, [pc, #168]	; (8000944 <MX_GPIO_Init+0x158>)
 800089c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089e:	193b      	adds	r3, r7, r4
 80008a0:	2200      	movs	r2, #0
 80008a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	193a      	adds	r2, r7, r4
 80008ac:	23a0      	movs	r3, #160	; 0xa0
 80008ae:	05db      	lsls	r3, r3, #23
 80008b0:	0011      	movs	r1, r2
 80008b2:	0018      	movs	r0, r3
 80008b4:	f000 fb70 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_SPI1_CS_Pin PA4 PA13 */
  GPIO_InitStruct.Pin = ACCEL_SPI1_CS_Pin|GPIO_PIN_4|GPIO_PIN_13;
 80008b8:	193b      	adds	r3, r7, r4
 80008ba:	4a23      	ldr	r2, [pc, #140]	; (8000948 <MX_GPIO_Init+0x15c>)
 80008bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	193b      	adds	r3, r7, r4
 80008c0:	2201      	movs	r2, #1
 80008c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	193b      	adds	r3, r7, r4
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	193b      	adds	r3, r7, r4
 80008cc:	2200      	movs	r2, #0
 80008ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d0:	193a      	adds	r2, r7, r4
 80008d2:	23a0      	movs	r3, #160	; 0xa0
 80008d4:	05db      	lsls	r3, r3, #23
 80008d6:	0011      	movs	r1, r2
 80008d8:	0018      	movs	r0, r3
 80008da:	f000 fb5d 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : MISC_GPIO2_Pin */
  GPIO_InitStruct.Pin = MISC_GPIO2_Pin;
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	2202      	movs	r2, #2
 80008e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	2201      	movs	r2, #1
 80008e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	193b      	adds	r3, r7, r4
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	193b      	adds	r3, r7, r4
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MISC_GPIO2_GPIO_Port, &GPIO_InitStruct);
 80008f6:	193b      	adds	r3, r7, r4
 80008f8:	4a11      	ldr	r2, [pc, #68]	; (8000940 <MX_GPIO_Init+0x154>)
 80008fa:	0019      	movs	r1, r3
 80008fc:	0010      	movs	r0, r2
 80008fe:	f000 fb4b 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_OUT_Pin */
  GPIO_InitStruct.Pin = LED_OUT_Pin;
 8000902:	0021      	movs	r1, r4
 8000904:	187b      	adds	r3, r7, r1
 8000906:	2280      	movs	r2, #128	; 0x80
 8000908:	01d2      	lsls	r2, r2, #7
 800090a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	187b      	adds	r3, r7, r1
 800090e:	2201      	movs	r2, #1
 8000910:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000912:	187b      	adds	r3, r7, r1
 8000914:	2201      	movs	r2, #1
 8000916:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	187b      	adds	r3, r7, r1
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_OUT_GPIO_Port, &GPIO_InitStruct);
 800091e:	187a      	adds	r2, r7, r1
 8000920:	23a0      	movs	r3, #160	; 0xa0
 8000922:	05db      	lsls	r3, r3, #23
 8000924:	0011      	movs	r1, r2
 8000926:	0018      	movs	r0, r3
 8000928:	f000 fb36 	bl	8000f98 <HAL_GPIO_Init>

}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	b009      	add	sp, #36	; 0x24
 8000932:	bd90      	pop	{r4, r7, pc}
 8000934:	40021000 	.word	0x40021000
 8000938:	50000800 	.word	0x50000800
 800093c:	00006018 	.word	0x00006018
 8000940:	50000400 	.word	0x50000400
 8000944:	00000602 	.word	0x00000602
 8000948:	00002018 	.word	0x00002018

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
}
 8000952:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000954:	e7fe      	b.n	8000954 <Error_Handler+0x8>
	...

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095c:	4b07      	ldr	r3, [pc, #28]	; (800097c <HAL_MspInit+0x24>)
 800095e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_MspInit+0x24>)
 8000962:	2101      	movs	r1, #1
 8000964:	430a      	orrs	r2, r1
 8000966:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000968:	4b04      	ldr	r3, [pc, #16]	; (800097c <HAL_MspInit+0x24>)
 800096a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800096c:	4b03      	ldr	r3, [pc, #12]	; (800097c <HAL_MspInit+0x24>)
 800096e:	2180      	movs	r1, #128	; 0x80
 8000970:	0549      	lsls	r1, r1, #21
 8000972:	430a      	orrs	r2, r1
 8000974:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40021000 	.word	0x40021000

08000980 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000980:	b590      	push	{r4, r7, lr}
 8000982:	b089      	sub	sp, #36	; 0x24
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	240c      	movs	r4, #12
 800098a:	193b      	adds	r3, r7, r4
 800098c:	0018      	movs	r0, r3
 800098e:	2314      	movs	r3, #20
 8000990:	001a      	movs	r2, r3
 8000992:	2100      	movs	r1, #0
 8000994:	f002 ff3c 	bl	8003810 <memset>
  if(hspi->Instance==SPI1)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a18      	ldr	r2, [pc, #96]	; (8000a00 <HAL_SPI_MspInit+0x80>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d129      	bne.n	80009f6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009a2:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <HAL_SPI_MspInit+0x84>)
 80009a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009a6:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <HAL_SPI_MspInit+0x84>)
 80009a8:	2180      	movs	r1, #128	; 0x80
 80009aa:	0149      	lsls	r1, r1, #5
 80009ac:	430a      	orrs	r2, r1
 80009ae:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <HAL_SPI_MspInit+0x84>)
 80009b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009b4:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <HAL_SPI_MspInit+0x84>)
 80009b6:	2101      	movs	r1, #1
 80009b8:	430a      	orrs	r2, r1
 80009ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80009bc:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <HAL_SPI_MspInit+0x84>)
 80009be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c0:	2201      	movs	r2, #1
 80009c2:	4013      	ands	r3, r2
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80009c8:	0021      	movs	r1, r4
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	22e0      	movs	r2, #224	; 0xe0
 80009ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	2202      	movs	r2, #2
 80009d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	187b      	adds	r3, r7, r1
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2203      	movs	r2, #3
 80009e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e8:	187a      	adds	r2, r7, r1
 80009ea:	23a0      	movs	r3, #160	; 0xa0
 80009ec:	05db      	lsls	r3, r3, #23
 80009ee:	0011      	movs	r1, r2
 80009f0:	0018      	movs	r0, r3
 80009f2:	f000 fad1 	bl	8000f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	b009      	add	sp, #36	; 0x24
 80009fc:	bd90      	pop	{r4, r7, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	40013000 	.word	0x40013000
 8000a04:	40021000 	.word	0x40021000

08000a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a08:	b590      	push	{r4, r7, lr}
 8000a0a:	b089      	sub	sp, #36	; 0x24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	240c      	movs	r4, #12
 8000a12:	193b      	adds	r3, r7, r4
 8000a14:	0018      	movs	r0, r3
 8000a16:	2314      	movs	r3, #20
 8000a18:	001a      	movs	r2, r3
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	f002 fef8 	bl	8003810 <memset>
  if(huart->Instance==USART2)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a27      	ldr	r2, [pc, #156]	; (8000ac4 <HAL_UART_MspInit+0xbc>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d147      	bne.n	8000aba <HAL_UART_MspInit+0xb2>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a2a:	4b27      	ldr	r3, [pc, #156]	; (8000ac8 <HAL_UART_MspInit+0xc0>)
 8000a2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a2e:	4b26      	ldr	r3, [pc, #152]	; (8000ac8 <HAL_UART_MspInit+0xc0>)
 8000a30:	2180      	movs	r1, #128	; 0x80
 8000a32:	0289      	lsls	r1, r1, #10
 8000a34:	430a      	orrs	r2, r1
 8000a36:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a38:	4b23      	ldr	r3, [pc, #140]	; (8000ac8 <HAL_UART_MspInit+0xc0>)
 8000a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a3c:	4b22      	ldr	r3, [pc, #136]	; (8000ac8 <HAL_UART_MspInit+0xc0>)
 8000a3e:	2101      	movs	r1, #1
 8000a40:	430a      	orrs	r2, r1
 8000a42:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a44:	4b20      	ldr	r3, [pc, #128]	; (8000ac8 <HAL_UART_MspInit+0xc0>)
 8000a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a48:	2201      	movs	r2, #1
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA0-CK_IN     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a50:	193b      	adds	r3, r7, r4
 8000a52:	2201      	movs	r2, #1
 8000a54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	193b      	adds	r3, r7, r4
 8000a58:	2202      	movs	r2, #2
 8000a5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	193b      	adds	r3, r7, r4
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	2203      	movs	r2, #3
 8000a66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 8000a68:	193b      	adds	r3, r7, r4
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	193a      	adds	r2, r7, r4
 8000a70:	23a0      	movs	r3, #160	; 0xa0
 8000a72:	05db      	lsls	r3, r3, #23
 8000a74:	0011      	movs	r1, r2
 8000a76:	0018      	movs	r0, r3
 8000a78:	f000 fa8e 	bl	8000f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a7c:	0021      	movs	r1, r4
 8000a7e:	187b      	adds	r3, r7, r1
 8000a80:	2204      	movs	r2, #4
 8000a82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2202      	movs	r2, #2
 8000a88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	2203      	movs	r2, #3
 8000a94:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2204      	movs	r2, #4
 8000a9a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	187a      	adds	r2, r7, r1
 8000a9e:	23a0      	movs	r3, #160	; 0xa0
 8000aa0:	05db      	lsls	r3, r3, #23
 8000aa2:	0011      	movs	r1, r2
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f000 fa77 	bl	8000f98 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2100      	movs	r1, #0
 8000aae:	201c      	movs	r0, #28
 8000ab0:	f000 f9b8 	bl	8000e24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ab4:	201c      	movs	r0, #28
 8000ab6:	f000 f9ca 	bl	8000e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	46bd      	mov	sp, r7
 8000abe:	b009      	add	sp, #36	; 0x24
 8000ac0:	bd90      	pop	{r4, r7, pc}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	40004400 	.word	0x40004400
 8000ac8:	40021000 	.word	0x40021000

08000acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <NMI_Handler+0x4>

08000ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <HardFault_Handler+0x4>

08000ad8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000adc:	46c0      	nop			; (mov r8, r8)
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af0:	f000 f8ac 	bl	8000c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af4:	46c0      	nop			; (mov r8, r8)
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <USART2_IRQHandler+0x14>)
 8000b02:	0018      	movs	r0, r3
 8000b04:	f001 fc80 	bl	8002408 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	20000084 	.word	0x20000084

08000b14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b18:	46c0      	nop			; (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000b20:	4813      	ldr	r0, [pc, #76]	; (8000b70 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000b22:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000b24:	4813      	ldr	r0, [pc, #76]	; (8000b74 <LoopForever+0x6>)
    LDR R1, [R0]
 8000b26:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000b28:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000b2a:	4a13      	ldr	r2, [pc, #76]	; (8000b78 <LoopForever+0xa>)
    CMP R1, R2
 8000b2c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000b2e:	d105      	bne.n	8000b3c <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000b30:	4812      	ldr	r0, [pc, #72]	; (8000b7c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000b32:	4913      	ldr	r1, [pc, #76]	; (8000b80 <LoopForever+0x12>)
    STR R1, [R0]
 8000b34:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000b36:	4813      	ldr	r0, [pc, #76]	; (8000b84 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000b38:	4913      	ldr	r1, [pc, #76]	; (8000b88 <LoopForever+0x1a>)
    STR R1, [R0]
 8000b3a:	6001      	str	r1, [r0, #0]

08000b3c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b3c:	4813      	ldr	r0, [pc, #76]	; (8000b8c <LoopForever+0x1e>)
  ldr r1, =_edata
 8000b3e:	4914      	ldr	r1, [pc, #80]	; (8000b90 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000b40:	4a14      	ldr	r2, [pc, #80]	; (8000b94 <LoopForever+0x26>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b44:	e002      	b.n	8000b4c <LoopCopyDataInit>

08000b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4a:	3304      	adds	r3, #4

08000b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b50:	d3f9      	bcc.n	8000b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b52:	4a11      	ldr	r2, [pc, #68]	; (8000b98 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000b54:	4c11      	ldr	r4, [pc, #68]	; (8000b9c <LoopForever+0x2e>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b58:	e001      	b.n	8000b5e <LoopFillZerobss>

08000b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b5c:	3204      	adds	r2, #4

08000b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b60:	d3fb      	bcc.n	8000b5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b62:	f7ff ffd7 	bl	8000b14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b66:	f002 fe13 	bl	8003790 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b6a:	f7ff fc9d 	bl	80004a8 <main>

08000b6e <LoopForever>:

LoopForever:
    b LoopForever
 8000b6e:	e7fe      	b.n	8000b6e <LoopForever>
   ldr   r0, =_estack
 8000b70:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000b74:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000b78:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000b7c:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000b80:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000b84:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000b88:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b90:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b94:	0800395c 	.word	0x0800395c
  ldr r2, =_sbss
 8000b98:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b9c:	20000114 	.word	0x20000114

08000ba0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <ADC1_IRQHandler>
	...

08000ba4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000baa:	1dfb      	adds	r3, r7, #7
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <HAL_Init+0x3c>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <HAL_Init+0x3c>)
 8000bb6:	2140      	movs	r1, #64	; 0x40
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bbc:	2003      	movs	r0, #3
 8000bbe:	f000 f811 	bl	8000be4 <HAL_InitTick>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d003      	beq.n	8000bce <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000bc6:	1dfb      	adds	r3, r7, #7
 8000bc8:	2201      	movs	r2, #1
 8000bca:	701a      	strb	r2, [r3, #0]
 8000bcc:	e001      	b.n	8000bd2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bce:	f7ff fec3 	bl	8000958 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bd2:	1dfb      	adds	r3, r7, #7
 8000bd4:	781b      	ldrb	r3, [r3, #0]
}
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	b002      	add	sp, #8
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	40022000 	.word	0x40022000

08000be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be4:	b590      	push	{r4, r7, lr}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <HAL_InitTick+0x5c>)
 8000bee:	681c      	ldr	r4, [r3, #0]
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <HAL_InitTick+0x60>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	0019      	movs	r1, r3
 8000bf6:	23fa      	movs	r3, #250	; 0xfa
 8000bf8:	0098      	lsls	r0, r3, #2
 8000bfa:	f7ff fa85 	bl	8000108 <__udivsi3>
 8000bfe:	0003      	movs	r3, r0
 8000c00:	0019      	movs	r1, r3
 8000c02:	0020      	movs	r0, r4
 8000c04:	f7ff fa80 	bl	8000108 <__udivsi3>
 8000c08:	0003      	movs	r3, r0
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f000 f92f 	bl	8000e6e <HAL_SYSTICK_Config>
 8000c10:	1e03      	subs	r3, r0, #0
 8000c12:	d001      	beq.n	8000c18 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	e00f      	b.n	8000c38 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2b03      	cmp	r3, #3
 8000c1c:	d80b      	bhi.n	8000c36 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	2301      	movs	r3, #1
 8000c22:	425b      	negs	r3, r3
 8000c24:	2200      	movs	r2, #0
 8000c26:	0018      	movs	r0, r3
 8000c28:	f000 f8fc 	bl	8000e24 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_InitTick+0x64>)
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c32:	2300      	movs	r3, #0
 8000c34:	e000      	b.n	8000c38 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
}
 8000c38:	0018      	movs	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b003      	add	sp, #12
 8000c3e:	bd90      	pop	{r4, r7, pc}
 8000c40:	20000004 	.word	0x20000004
 8000c44:	2000000c 	.word	0x2000000c
 8000c48:	20000008 	.word	0x20000008

08000c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <HAL_IncTick+0x1c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	001a      	movs	r2, r3
 8000c56:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <HAL_IncTick+0x20>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	18d2      	adds	r2, r2, r3
 8000c5c:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <HAL_IncTick+0x20>)
 8000c5e:	601a      	str	r2, [r3, #0]
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	2000000c 	.word	0x2000000c
 8000c6c:	20000110 	.word	0x20000110

08000c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  return uwTick;
 8000c74:	4b02      	ldr	r3, [pc, #8]	; (8000c80 <HAL_GetTick+0x10>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	0018      	movs	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	20000110 	.word	0x20000110

08000c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c8c:	f7ff fff0 	bl	8000c70 <HAL_GetTick>
 8000c90:	0003      	movs	r3, r0
 8000c92:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	d005      	beq.n	8000caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <HAL_Delay+0x44>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	001a      	movs	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	189b      	adds	r3, r3, r2
 8000ca8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	f7ff ffe0 	bl	8000c70 <HAL_GetTick>
 8000cb0:	0002      	movs	r2, r0
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d8f7      	bhi.n	8000cac <HAL_Delay+0x28>
  {
  }
}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	b004      	add	sp, #16
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	2000000c 	.word	0x2000000c

08000ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	0002      	movs	r2, r0
 8000cd4:	1dfb      	adds	r3, r7, #7
 8000cd6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cd8:	1dfb      	adds	r3, r7, #7
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b7f      	cmp	r3, #127	; 0x7f
 8000cde:	d809      	bhi.n	8000cf4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce0:	1dfb      	adds	r3, r7, #7
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	001a      	movs	r2, r3
 8000ce6:	231f      	movs	r3, #31
 8000ce8:	401a      	ands	r2, r3
 8000cea:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <__NVIC_EnableIRQ+0x30>)
 8000cec:	2101      	movs	r1, #1
 8000cee:	4091      	lsls	r1, r2
 8000cf0:	000a      	movs	r2, r1
 8000cf2:	601a      	str	r2, [r3, #0]
  }
}
 8000cf4:	46c0      	nop			; (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	b002      	add	sp, #8
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	e000e100 	.word	0xe000e100

08000d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d00:	b590      	push	{r4, r7, lr}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	0002      	movs	r2, r0
 8000d08:	6039      	str	r1, [r7, #0]
 8000d0a:	1dfb      	adds	r3, r7, #7
 8000d0c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d0e:	1dfb      	adds	r3, r7, #7
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b7f      	cmp	r3, #127	; 0x7f
 8000d14:	d828      	bhi.n	8000d68 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d16:	4a2f      	ldr	r2, [pc, #188]	; (8000dd4 <__NVIC_SetPriority+0xd4>)
 8000d18:	1dfb      	adds	r3, r7, #7
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b25b      	sxtb	r3, r3
 8000d1e:	089b      	lsrs	r3, r3, #2
 8000d20:	33c0      	adds	r3, #192	; 0xc0
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	589b      	ldr	r3, [r3, r2]
 8000d26:	1dfa      	adds	r2, r7, #7
 8000d28:	7812      	ldrb	r2, [r2, #0]
 8000d2a:	0011      	movs	r1, r2
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	400a      	ands	r2, r1
 8000d30:	00d2      	lsls	r2, r2, #3
 8000d32:	21ff      	movs	r1, #255	; 0xff
 8000d34:	4091      	lsls	r1, r2
 8000d36:	000a      	movs	r2, r1
 8000d38:	43d2      	mvns	r2, r2
 8000d3a:	401a      	ands	r2, r3
 8000d3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	019b      	lsls	r3, r3, #6
 8000d42:	22ff      	movs	r2, #255	; 0xff
 8000d44:	401a      	ands	r2, r3
 8000d46:	1dfb      	adds	r3, r7, #7
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	4003      	ands	r3, r0
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d54:	481f      	ldr	r0, [pc, #124]	; (8000dd4 <__NVIC_SetPriority+0xd4>)
 8000d56:	1dfb      	adds	r3, r7, #7
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	b25b      	sxtb	r3, r3
 8000d5c:	089b      	lsrs	r3, r3, #2
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	33c0      	adds	r3, #192	; 0xc0
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d66:	e031      	b.n	8000dcc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d68:	4a1b      	ldr	r2, [pc, #108]	; (8000dd8 <__NVIC_SetPriority+0xd8>)
 8000d6a:	1dfb      	adds	r3, r7, #7
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	0019      	movs	r1, r3
 8000d70:	230f      	movs	r3, #15
 8000d72:	400b      	ands	r3, r1
 8000d74:	3b08      	subs	r3, #8
 8000d76:	089b      	lsrs	r3, r3, #2
 8000d78:	3306      	adds	r3, #6
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	18d3      	adds	r3, r2, r3
 8000d7e:	3304      	adds	r3, #4
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	1dfa      	adds	r2, r7, #7
 8000d84:	7812      	ldrb	r2, [r2, #0]
 8000d86:	0011      	movs	r1, r2
 8000d88:	2203      	movs	r2, #3
 8000d8a:	400a      	ands	r2, r1
 8000d8c:	00d2      	lsls	r2, r2, #3
 8000d8e:	21ff      	movs	r1, #255	; 0xff
 8000d90:	4091      	lsls	r1, r2
 8000d92:	000a      	movs	r2, r1
 8000d94:	43d2      	mvns	r2, r2
 8000d96:	401a      	ands	r2, r3
 8000d98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	019b      	lsls	r3, r3, #6
 8000d9e:	22ff      	movs	r2, #255	; 0xff
 8000da0:	401a      	ands	r2, r3
 8000da2:	1dfb      	adds	r3, r7, #7
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	0018      	movs	r0, r3
 8000da8:	2303      	movs	r3, #3
 8000daa:	4003      	ands	r3, r0
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000db0:	4809      	ldr	r0, [pc, #36]	; (8000dd8 <__NVIC_SetPriority+0xd8>)
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	001c      	movs	r4, r3
 8000db8:	230f      	movs	r3, #15
 8000dba:	4023      	ands	r3, r4
 8000dbc:	3b08      	subs	r3, #8
 8000dbe:	089b      	lsrs	r3, r3, #2
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	3306      	adds	r3, #6
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	18c3      	adds	r3, r0, r3
 8000dc8:	3304      	adds	r3, #4
 8000dca:	601a      	str	r2, [r3, #0]
}
 8000dcc:	46c0      	nop			; (mov r8, r8)
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	b003      	add	sp, #12
 8000dd2:	bd90      	pop	{r4, r7, pc}
 8000dd4:	e000e100 	.word	0xe000e100
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	1e5a      	subs	r2, r3, #1
 8000de8:	2380      	movs	r3, #128	; 0x80
 8000dea:	045b      	lsls	r3, r3, #17
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d301      	bcc.n	8000df4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df0:	2301      	movs	r3, #1
 8000df2:	e010      	b.n	8000e16 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df4:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <SysTick_Config+0x44>)
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	3a01      	subs	r2, #1
 8000dfa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	425b      	negs	r3, r3
 8000e00:	2103      	movs	r1, #3
 8000e02:	0018      	movs	r0, r3
 8000e04:	f7ff ff7c 	bl	8000d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <SysTick_Config+0x44>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <SysTick_Config+0x44>)
 8000e10:	2207      	movs	r2, #7
 8000e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	0018      	movs	r0, r3
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	b002      	add	sp, #8
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	e000e010 	.word	0xe000e010

08000e24 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
 8000e2e:	210f      	movs	r1, #15
 8000e30:	187b      	adds	r3, r7, r1
 8000e32:	1c02      	adds	r2, r0, #0
 8000e34:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	b25b      	sxtb	r3, r3
 8000e3e:	0011      	movs	r1, r2
 8000e40:	0018      	movs	r0, r3
 8000e42:	f7ff ff5d 	bl	8000d00 <__NVIC_SetPriority>
}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	b004      	add	sp, #16
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	0002      	movs	r2, r0
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e5a:	1dfb      	adds	r3, r7, #7
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	b25b      	sxtb	r3, r3
 8000e60:	0018      	movs	r0, r3
 8000e62:	f7ff ff33 	bl	8000ccc <__NVIC_EnableIRQ>
}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	b002      	add	sp, #8
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f7ff ffaf 	bl	8000ddc <SysTick_Config>
 8000e7e:	0003      	movs	r3, r0
}
 8000e80:	0018      	movs	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	b002      	add	sp, #8
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e90:	230f      	movs	r3, #15
 8000e92:	18fb      	adds	r3, r7, r3
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2225      	movs	r2, #37	; 0x25
 8000e9c:	5c9b      	ldrb	r3, [r3, r2]
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d008      	beq.n	8000eb6 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2204      	movs	r2, #4
 8000ea8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2224      	movs	r2, #36	; 0x24
 8000eae:	2100      	movs	r1, #0
 8000eb0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e024      	b.n	8000f00 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	210e      	movs	r1, #14
 8000ec2:	438a      	bics	r2, r1
 8000ec4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	438a      	bics	r2, r1
 8000ed4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	221c      	movs	r2, #28
 8000edc:	401a      	ands	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	4091      	lsls	r1, r2
 8000ee6:	000a      	movs	r2, r1
 8000ee8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2225      	movs	r2, #37	; 0x25
 8000eee:	2101      	movs	r1, #1
 8000ef0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2224      	movs	r2, #36	; 0x24
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	5499      	strb	r1, [r3, r2]

    return status;
 8000efa:	230f      	movs	r3, #15
 8000efc:	18fb      	adds	r3, r7, r3
 8000efe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8000f00:	0018      	movs	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b004      	add	sp, #16
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f10:	210f      	movs	r1, #15
 8000f12:	187b      	adds	r3, r7, r1
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2225      	movs	r2, #37	; 0x25
 8000f1c:	5c9b      	ldrb	r3, [r3, r2]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d006      	beq.n	8000f32 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2204      	movs	r2, #4
 8000f28:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000f2a:	187b      	adds	r3, r7, r1
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]
 8000f30:	e02a      	b.n	8000f88 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	210e      	movs	r1, #14
 8000f3e:	438a      	bics	r2, r1
 8000f40:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	438a      	bics	r2, r1
 8000f50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	221c      	movs	r2, #28
 8000f58:	401a      	ands	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	2101      	movs	r1, #1
 8000f60:	4091      	lsls	r1, r2
 8000f62:	000a      	movs	r2, r1
 8000f64:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2225      	movs	r2, #37	; 0x25
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2224      	movs	r2, #36	; 0x24
 8000f72:	2100      	movs	r1, #0
 8000f74:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d004      	beq.n	8000f88 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	0010      	movs	r0, r2
 8000f86:	4798      	blx	r3
    }
  }
  return status;
 8000f88:	230f      	movs	r3, #15
 8000f8a:	18fb      	adds	r3, r7, r3
 8000f8c:	781b      	ldrb	r3, [r3, #0]
}
 8000f8e:	0018      	movs	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	b004      	add	sp, #16
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000fae:	e143      	b.n	8001238 <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	4091      	lsls	r1, r2
 8000fba:	000a      	movs	r2, r1
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d100      	bne.n	8000fc8 <HAL_GPIO_Init+0x30>
 8000fc6:	e134      	b.n	8001232 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2203      	movs	r2, #3
 8000fce:	4013      	ands	r3, r2
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d005      	beq.n	8000fe0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	2203      	movs	r2, #3
 8000fda:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d130      	bne.n	8001042 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	2203      	movs	r2, #3
 8000fec:	409a      	lsls	r2, r3
 8000fee:	0013      	movs	r3, r2
 8000ff0:	43da      	mvns	r2, r3
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	68da      	ldr	r2, [r3, #12]
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	409a      	lsls	r2, r3
 8001002:	0013      	movs	r3, r2
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4313      	orrs	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001016:	2201      	movs	r2, #1
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	409a      	lsls	r2, r3
 800101c:	0013      	movs	r3, r2
 800101e:	43da      	mvns	r2, r3
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	091b      	lsrs	r3, r3, #4
 800102c:	2201      	movs	r2, #1
 800102e:	401a      	ands	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	409a      	lsls	r2, r3
 8001034:	0013      	movs	r3, r2
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	2203      	movs	r2, #3
 8001048:	4013      	ands	r3, r2
 800104a:	2b03      	cmp	r3, #3
 800104c:	d017      	beq.n	800107e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	2203      	movs	r2, #3
 800105a:	409a      	lsls	r2, r3
 800105c:	0013      	movs	r3, r2
 800105e:	43da      	mvns	r2, r3
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	689a      	ldr	r2, [r3, #8]
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	409a      	lsls	r2, r3
 8001070:	0013      	movs	r3, r2
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2203      	movs	r2, #3
 8001084:	4013      	ands	r3, r2
 8001086:	2b02      	cmp	r3, #2
 8001088:	d123      	bne.n	80010d2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	08da      	lsrs	r2, r3, #3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3208      	adds	r2, #8
 8001092:	0092      	lsls	r2, r2, #2
 8001094:	58d3      	ldr	r3, [r2, r3]
 8001096:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	2207      	movs	r2, #7
 800109c:	4013      	ands	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	220f      	movs	r2, #15
 80010a2:	409a      	lsls	r2, r3
 80010a4:	0013      	movs	r3, r2
 80010a6:	43da      	mvns	r2, r3
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	691a      	ldr	r2, [r3, #16]
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	2107      	movs	r1, #7
 80010b6:	400b      	ands	r3, r1
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	409a      	lsls	r2, r3
 80010bc:	0013      	movs	r3, r2
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	08da      	lsrs	r2, r3, #3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3208      	adds	r2, #8
 80010cc:	0092      	lsls	r2, r2, #2
 80010ce:	6939      	ldr	r1, [r7, #16]
 80010d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	2203      	movs	r2, #3
 80010de:	409a      	lsls	r2, r3
 80010e0:	0013      	movs	r3, r2
 80010e2:	43da      	mvns	r2, r3
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2203      	movs	r2, #3
 80010f0:	401a      	ands	r2, r3
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	409a      	lsls	r2, r3
 80010f8:	0013      	movs	r3, r2
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	23c0      	movs	r3, #192	; 0xc0
 800110c:	029b      	lsls	r3, r3, #10
 800110e:	4013      	ands	r3, r2
 8001110:	d100      	bne.n	8001114 <HAL_GPIO_Init+0x17c>
 8001112:	e08e      	b.n	8001232 <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001114:	4b4e      	ldr	r3, [pc, #312]	; (8001250 <HAL_GPIO_Init+0x2b8>)
 8001116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001118:	4b4d      	ldr	r3, [pc, #308]	; (8001250 <HAL_GPIO_Init+0x2b8>)
 800111a:	2101      	movs	r1, #1
 800111c:	430a      	orrs	r2, r1
 800111e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001120:	4a4c      	ldr	r2, [pc, #304]	; (8001254 <HAL_GPIO_Init+0x2bc>)
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	089b      	lsrs	r3, r3, #2
 8001126:	3302      	adds	r3, #2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	589b      	ldr	r3, [r3, r2]
 800112c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	2203      	movs	r2, #3
 8001132:	4013      	ands	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	220f      	movs	r2, #15
 8001138:	409a      	lsls	r2, r3
 800113a:	0013      	movs	r3, r2
 800113c:	43da      	mvns	r2, r3
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	23a0      	movs	r3, #160	; 0xa0
 8001148:	05db      	lsls	r3, r3, #23
 800114a:	429a      	cmp	r2, r3
 800114c:	d00d      	beq.n	800116a <HAL_GPIO_Init+0x1d2>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a41      	ldr	r2, [pc, #260]	; (8001258 <HAL_GPIO_Init+0x2c0>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d007      	beq.n	8001166 <HAL_GPIO_Init+0x1ce>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a40      	ldr	r2, [pc, #256]	; (800125c <HAL_GPIO_Init+0x2c4>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d101      	bne.n	8001162 <HAL_GPIO_Init+0x1ca>
 800115e:	2302      	movs	r3, #2
 8001160:	e004      	b.n	800116c <HAL_GPIO_Init+0x1d4>
 8001162:	2306      	movs	r3, #6
 8001164:	e002      	b.n	800116c <HAL_GPIO_Init+0x1d4>
 8001166:	2301      	movs	r3, #1
 8001168:	e000      	b.n	800116c <HAL_GPIO_Init+0x1d4>
 800116a:	2300      	movs	r3, #0
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	2103      	movs	r1, #3
 8001170:	400a      	ands	r2, r1
 8001172:	0092      	lsls	r2, r2, #2
 8001174:	4093      	lsls	r3, r2
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800117c:	4935      	ldr	r1, [pc, #212]	; (8001254 <HAL_GPIO_Init+0x2bc>)
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	089b      	lsrs	r3, r3, #2
 8001182:	3302      	adds	r3, #2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800118a:	4b35      	ldr	r3, [pc, #212]	; (8001260 <HAL_GPIO_Init+0x2c8>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	43da      	mvns	r2, r3
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4013      	ands	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	2380      	movs	r3, #128	; 0x80
 80011a0:	025b      	lsls	r3, r3, #9
 80011a2:	4013      	ands	r3, r2
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011ae:	4b2c      	ldr	r3, [pc, #176]	; (8001260 <HAL_GPIO_Init+0x2c8>)
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80011b4:	4b2a      	ldr	r3, [pc, #168]	; (8001260 <HAL_GPIO_Init+0x2c8>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	43da      	mvns	r2, r3
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	2380      	movs	r3, #128	; 0x80
 80011ca:	029b      	lsls	r3, r3, #10
 80011cc:	4013      	ands	r3, r2
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011d8:	4b21      	ldr	r3, [pc, #132]	; (8001260 <HAL_GPIO_Init+0x2c8>)
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011de:	4b20      	ldr	r3, [pc, #128]	; (8001260 <HAL_GPIO_Init+0x2c8>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	43da      	mvns	r2, r3
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	2380      	movs	r3, #128	; 0x80
 80011f4:	035b      	lsls	r3, r3, #13
 80011f6:	4013      	ands	r3, r2
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <HAL_GPIO_Init+0x2c8>)
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001208:	4b15      	ldr	r3, [pc, #84]	; (8001260 <HAL_GPIO_Init+0x2c8>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	43da      	mvns	r2, r3
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	2380      	movs	r3, #128	; 0x80
 800121e:	039b      	lsls	r3, r3, #14
 8001220:	4013      	ands	r3, r2
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <HAL_GPIO_Init+0x2c8>)
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	3301      	adds	r3, #1
 8001236:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	40da      	lsrs	r2, r3
 8001240:	1e13      	subs	r3, r2, #0
 8001242:	d000      	beq.n	8001246 <HAL_GPIO_Init+0x2ae>
 8001244:	e6b4      	b.n	8000fb0 <HAL_GPIO_Init+0x18>
  }
}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	46c0      	nop			; (mov r8, r8)
 800124a:	46bd      	mov	sp, r7
 800124c:	b006      	add	sp, #24
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40021000 	.word	0x40021000
 8001254:	40010000 	.word	0x40010000
 8001258:	50000400 	.word	0x50000400
 800125c:	50000800 	.word	0x50000800
 8001260:	40010400 	.word	0x40010400

08001264 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	0008      	movs	r0, r1
 800126e:	0011      	movs	r1, r2
 8001270:	1cbb      	adds	r3, r7, #2
 8001272:	1c02      	adds	r2, r0, #0
 8001274:	801a      	strh	r2, [r3, #0]
 8001276:	1c7b      	adds	r3, r7, #1
 8001278:	1c0a      	adds	r2, r1, #0
 800127a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800127c:	1c7b      	adds	r3, r7, #1
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d004      	beq.n	800128e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001284:	1cbb      	adds	r3, r7, #2
 8001286:	881a      	ldrh	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800128c:	e003      	b.n	8001296 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800128e:	1cbb      	adds	r3, r7, #2
 8001290:	881a      	ldrh	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	46bd      	mov	sp, r7
 800129a:	b002      	add	sp, #8
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a0:	b5b0      	push	{r4, r5, r7, lr}
 80012a2:	b08a      	sub	sp, #40	; 0x28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d102      	bne.n	80012b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	f000 fb6c 	bl	800198c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012b4:	4bc8      	ldr	r3, [pc, #800]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	220c      	movs	r2, #12
 80012ba:	4013      	ands	r3, r2
 80012bc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012be:	4bc6      	ldr	r3, [pc, #792]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80012c0:	68da      	ldr	r2, [r3, #12]
 80012c2:	2380      	movs	r3, #128	; 0x80
 80012c4:	025b      	lsls	r3, r3, #9
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2201      	movs	r2, #1
 80012d0:	4013      	ands	r3, r2
 80012d2:	d100      	bne.n	80012d6 <HAL_RCC_OscConfig+0x36>
 80012d4:	e07d      	b.n	80013d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	2b08      	cmp	r3, #8
 80012da:	d007      	beq.n	80012ec <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	2b0c      	cmp	r3, #12
 80012e0:	d112      	bne.n	8001308 <HAL_RCC_OscConfig+0x68>
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	025b      	lsls	r3, r3, #9
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d10d      	bne.n	8001308 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ec:	4bba      	ldr	r3, [pc, #744]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	2380      	movs	r3, #128	; 0x80
 80012f2:	029b      	lsls	r3, r3, #10
 80012f4:	4013      	ands	r3, r2
 80012f6:	d100      	bne.n	80012fa <HAL_RCC_OscConfig+0x5a>
 80012f8:	e06a      	b.n	80013d0 <HAL_RCC_OscConfig+0x130>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d166      	bne.n	80013d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	f000 fb42 	bl	800198c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	025b      	lsls	r3, r3, #9
 8001310:	429a      	cmp	r2, r3
 8001312:	d107      	bne.n	8001324 <HAL_RCC_OscConfig+0x84>
 8001314:	4bb0      	ldr	r3, [pc, #704]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4baf      	ldr	r3, [pc, #700]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800131a:	2180      	movs	r1, #128	; 0x80
 800131c:	0249      	lsls	r1, r1, #9
 800131e:	430a      	orrs	r2, r1
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	e027      	b.n	8001374 <HAL_RCC_OscConfig+0xd4>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	23a0      	movs	r3, #160	; 0xa0
 800132a:	02db      	lsls	r3, r3, #11
 800132c:	429a      	cmp	r2, r3
 800132e:	d10e      	bne.n	800134e <HAL_RCC_OscConfig+0xae>
 8001330:	4ba9      	ldr	r3, [pc, #676]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4ba8      	ldr	r3, [pc, #672]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001336:	2180      	movs	r1, #128	; 0x80
 8001338:	02c9      	lsls	r1, r1, #11
 800133a:	430a      	orrs	r2, r1
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	4ba6      	ldr	r3, [pc, #664]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	4ba5      	ldr	r3, [pc, #660]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001344:	2180      	movs	r1, #128	; 0x80
 8001346:	0249      	lsls	r1, r1, #9
 8001348:	430a      	orrs	r2, r1
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	e012      	b.n	8001374 <HAL_RCC_OscConfig+0xd4>
 800134e:	4ba2      	ldr	r3, [pc, #648]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	4ba1      	ldr	r3, [pc, #644]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001354:	49a1      	ldr	r1, [pc, #644]	; (80015dc <HAL_RCC_OscConfig+0x33c>)
 8001356:	400a      	ands	r2, r1
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	4b9f      	ldr	r3, [pc, #636]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	2380      	movs	r3, #128	; 0x80
 8001360:	025b      	lsls	r3, r3, #9
 8001362:	4013      	ands	r3, r2
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4b9b      	ldr	r3, [pc, #620]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4b9a      	ldr	r3, [pc, #616]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800136e:	499c      	ldr	r1, [pc, #624]	; (80015e0 <HAL_RCC_OscConfig+0x340>)
 8001370:	400a      	ands	r2, r1
 8001372:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d014      	beq.n	80013a6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137c:	f7ff fc78 	bl	8000c70 <HAL_GetTick>
 8001380:	0003      	movs	r3, r0
 8001382:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001386:	f7ff fc73 	bl	8000c70 <HAL_GetTick>
 800138a:	0002      	movs	r2, r0
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b64      	cmp	r3, #100	; 0x64
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e2f9      	b.n	800198c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001398:	4b8f      	ldr	r3, [pc, #572]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	2380      	movs	r3, #128	; 0x80
 800139e:	029b      	lsls	r3, r3, #10
 80013a0:	4013      	ands	r3, r2
 80013a2:	d0f0      	beq.n	8001386 <HAL_RCC_OscConfig+0xe6>
 80013a4:	e015      	b.n	80013d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a6:	f7ff fc63 	bl	8000c70 <HAL_GetTick>
 80013aa:	0003      	movs	r3, r0
 80013ac:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b0:	f7ff fc5e 	bl	8000c70 <HAL_GetTick>
 80013b4:	0002      	movs	r2, r0
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b64      	cmp	r3, #100	; 0x64
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e2e4      	b.n	800198c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013c2:	4b85      	ldr	r3, [pc, #532]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	2380      	movs	r3, #128	; 0x80
 80013c8:	029b      	lsls	r3, r3, #10
 80013ca:	4013      	ands	r3, r2
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0x110>
 80013ce:	e000      	b.n	80013d2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2202      	movs	r2, #2
 80013d8:	4013      	ands	r3, r2
 80013da:	d100      	bne.n	80013de <HAL_RCC_OscConfig+0x13e>
 80013dc:	e099      	b.n	8001512 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e6:	2220      	movs	r2, #32
 80013e8:	4013      	ands	r3, r2
 80013ea:	d009      	beq.n	8001400 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80013ec:	4b7a      	ldr	r3, [pc, #488]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b79      	ldr	r3, [pc, #484]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80013f2:	2120      	movs	r1, #32
 80013f4:	430a      	orrs	r2, r1
 80013f6:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	2220      	movs	r2, #32
 80013fc:	4393      	bics	r3, r2
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	2b04      	cmp	r3, #4
 8001404:	d005      	beq.n	8001412 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	2b0c      	cmp	r3, #12
 800140a:	d13e      	bne.n	800148a <HAL_RCC_OscConfig+0x1ea>
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d13b      	bne.n	800148a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001412:	4b71      	ldr	r3, [pc, #452]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2204      	movs	r2, #4
 8001418:	4013      	ands	r3, r2
 800141a:	d004      	beq.n	8001426 <HAL_RCC_OscConfig+0x186>
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e2b2      	b.n	800198c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001426:	4b6c      	ldr	r3, [pc, #432]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	4a6e      	ldr	r2, [pc, #440]	; (80015e4 <HAL_RCC_OscConfig+0x344>)
 800142c:	4013      	ands	r3, r2
 800142e:	0019      	movs	r1, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	691b      	ldr	r3, [r3, #16]
 8001434:	021a      	lsls	r2, r3, #8
 8001436:	4b68      	ldr	r3, [pc, #416]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001438:	430a      	orrs	r2, r1
 800143a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800143c:	4b66      	ldr	r3, [pc, #408]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2209      	movs	r2, #9
 8001442:	4393      	bics	r3, r2
 8001444:	0019      	movs	r1, r3
 8001446:	4b64      	ldr	r3, [pc, #400]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800144a:	430a      	orrs	r2, r1
 800144c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800144e:	f000 fbeb 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 8001452:	0001      	movs	r1, r0
 8001454:	4b60      	ldr	r3, [pc, #384]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	091b      	lsrs	r3, r3, #4
 800145a:	220f      	movs	r2, #15
 800145c:	4013      	ands	r3, r2
 800145e:	4a62      	ldr	r2, [pc, #392]	; (80015e8 <HAL_RCC_OscConfig+0x348>)
 8001460:	5cd3      	ldrb	r3, [r2, r3]
 8001462:	000a      	movs	r2, r1
 8001464:	40da      	lsrs	r2, r3
 8001466:	4b61      	ldr	r3, [pc, #388]	; (80015ec <HAL_RCC_OscConfig+0x34c>)
 8001468:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800146a:	4b61      	ldr	r3, [pc, #388]	; (80015f0 <HAL_RCC_OscConfig+0x350>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2513      	movs	r5, #19
 8001470:	197c      	adds	r4, r7, r5
 8001472:	0018      	movs	r0, r3
 8001474:	f7ff fbb6 	bl	8000be4 <HAL_InitTick>
 8001478:	0003      	movs	r3, r0
 800147a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800147c:	197b      	adds	r3, r7, r5
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d046      	beq.n	8001512 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001484:	197b      	adds	r3, r7, r5
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	e280      	b.n	800198c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	2b00      	cmp	r3, #0
 800148e:	d027      	beq.n	80014e0 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001490:	4b51      	ldr	r3, [pc, #324]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2209      	movs	r2, #9
 8001496:	4393      	bics	r3, r2
 8001498:	0019      	movs	r1, r3
 800149a:	4b4f      	ldr	r3, [pc, #316]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800149c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800149e:	430a      	orrs	r2, r1
 80014a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a2:	f7ff fbe5 	bl	8000c70 <HAL_GetTick>
 80014a6:	0003      	movs	r3, r0
 80014a8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ac:	f7ff fbe0 	bl	8000c70 <HAL_GetTick>
 80014b0:	0002      	movs	r2, r0
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e266      	b.n	800198c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014be:	4b46      	ldr	r3, [pc, #280]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2204      	movs	r2, #4
 80014c4:	4013      	ands	r3, r2
 80014c6:	d0f1      	beq.n	80014ac <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c8:	4b43      	ldr	r3, [pc, #268]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	4a45      	ldr	r2, [pc, #276]	; (80015e4 <HAL_RCC_OscConfig+0x344>)
 80014ce:	4013      	ands	r3, r2
 80014d0:	0019      	movs	r1, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	021a      	lsls	r2, r3, #8
 80014d8:	4b3f      	ldr	r3, [pc, #252]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80014da:	430a      	orrs	r2, r1
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	e018      	b.n	8001512 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014e0:	4b3d      	ldr	r3, [pc, #244]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b3c      	ldr	r3, [pc, #240]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80014e6:	2101      	movs	r1, #1
 80014e8:	438a      	bics	r2, r1
 80014ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ec:	f7ff fbc0 	bl	8000c70 <HAL_GetTick>
 80014f0:	0003      	movs	r3, r0
 80014f2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014f6:	f7ff fbbb 	bl	8000c70 <HAL_GetTick>
 80014fa:	0002      	movs	r2, r0
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e241      	b.n	800198c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001508:	4b33      	ldr	r3, [pc, #204]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2204      	movs	r2, #4
 800150e:	4013      	ands	r3, r2
 8001510:	d1f1      	bne.n	80014f6 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2210      	movs	r2, #16
 8001518:	4013      	ands	r3, r2
 800151a:	d100      	bne.n	800151e <HAL_RCC_OscConfig+0x27e>
 800151c:	e0a1      	b.n	8001662 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d140      	bne.n	80015a6 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001524:	4b2c      	ldr	r3, [pc, #176]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	2380      	movs	r3, #128	; 0x80
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4013      	ands	r3, r2
 800152e:	d005      	beq.n	800153c <HAL_RCC_OscConfig+0x29c>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e227      	b.n	800198c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800153c:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	4a2c      	ldr	r2, [pc, #176]	; (80015f4 <HAL_RCC_OscConfig+0x354>)
 8001542:	4013      	ands	r3, r2
 8001544:	0019      	movs	r1, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a1a      	ldr	r2, [r3, #32]
 800154a:	4b23      	ldr	r3, [pc, #140]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800154c:	430a      	orrs	r2, r1
 800154e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001550:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	0a19      	lsrs	r1, r3, #8
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69db      	ldr	r3, [r3, #28]
 800155c:	061a      	lsls	r2, r3, #24
 800155e:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001560:	430a      	orrs	r2, r1
 8001562:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	0b5b      	lsrs	r3, r3, #13
 800156a:	3301      	adds	r3, #1
 800156c:	2280      	movs	r2, #128	; 0x80
 800156e:	0212      	lsls	r2, r2, #8
 8001570:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001572:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	091b      	lsrs	r3, r3, #4
 8001578:	210f      	movs	r1, #15
 800157a:	400b      	ands	r3, r1
 800157c:	491a      	ldr	r1, [pc, #104]	; (80015e8 <HAL_RCC_OscConfig+0x348>)
 800157e:	5ccb      	ldrb	r3, [r1, r3]
 8001580:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001582:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <HAL_RCC_OscConfig+0x34c>)
 8001584:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001586:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <HAL_RCC_OscConfig+0x350>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2513      	movs	r5, #19
 800158c:	197c      	adds	r4, r7, r5
 800158e:	0018      	movs	r0, r3
 8001590:	f7ff fb28 	bl	8000be4 <HAL_InitTick>
 8001594:	0003      	movs	r3, r0
 8001596:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001598:	197b      	adds	r3, r7, r5
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d060      	beq.n	8001662 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80015a0:	197b      	adds	r3, r7, r5
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	e1f2      	b.n	800198c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d03f      	beq.n	800162e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80015b4:	2180      	movs	r1, #128	; 0x80
 80015b6:	0049      	lsls	r1, r1, #1
 80015b8:	430a      	orrs	r2, r1
 80015ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015bc:	f7ff fb58 	bl	8000c70 <HAL_GetTick>
 80015c0:	0003      	movs	r3, r0
 80015c2:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015c4:	e018      	b.n	80015f8 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015c6:	f7ff fb53 	bl	8000c70 <HAL_GetTick>
 80015ca:	0002      	movs	r2, r0
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d911      	bls.n	80015f8 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e1d9      	b.n	800198c <HAL_RCC_OscConfig+0x6ec>
 80015d8:	40021000 	.word	0x40021000
 80015dc:	fffeffff 	.word	0xfffeffff
 80015e0:	fffbffff 	.word	0xfffbffff
 80015e4:	ffffe0ff 	.word	0xffffe0ff
 80015e8:	080038b8 	.word	0x080038b8
 80015ec:	20000004 	.word	0x20000004
 80015f0:	20000008 	.word	0x20000008
 80015f4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015f8:	4bc9      	ldr	r3, [pc, #804]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	2380      	movs	r3, #128	; 0x80
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4013      	ands	r3, r2
 8001602:	d0e0      	beq.n	80015c6 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001604:	4bc6      	ldr	r3, [pc, #792]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	4ac6      	ldr	r2, [pc, #792]	; (8001924 <HAL_RCC_OscConfig+0x684>)
 800160a:	4013      	ands	r3, r2
 800160c:	0019      	movs	r1, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a1a      	ldr	r2, [r3, #32]
 8001612:	4bc3      	ldr	r3, [pc, #780]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 8001614:	430a      	orrs	r2, r1
 8001616:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001618:	4bc1      	ldr	r3, [pc, #772]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	021b      	lsls	r3, r3, #8
 800161e:	0a19      	lsrs	r1, r3, #8
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	69db      	ldr	r3, [r3, #28]
 8001624:	061a      	lsls	r2, r3, #24
 8001626:	4bbe      	ldr	r3, [pc, #760]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 8001628:	430a      	orrs	r2, r1
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	e019      	b.n	8001662 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800162e:	4bbc      	ldr	r3, [pc, #752]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	4bbb      	ldr	r3, [pc, #748]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 8001634:	49bc      	ldr	r1, [pc, #752]	; (8001928 <HAL_RCC_OscConfig+0x688>)
 8001636:	400a      	ands	r2, r1
 8001638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163a:	f7ff fb19 	bl	8000c70 <HAL_GetTick>
 800163e:	0003      	movs	r3, r0
 8001640:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001644:	f7ff fb14 	bl	8000c70 <HAL_GetTick>
 8001648:	0002      	movs	r2, r0
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e19a      	b.n	800198c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001656:	4bb2      	ldr	r3, [pc, #712]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	2380      	movs	r3, #128	; 0x80
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4013      	ands	r3, r2
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2208      	movs	r2, #8
 8001668:	4013      	ands	r3, r2
 800166a:	d036      	beq.n	80016da <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d019      	beq.n	80016a8 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001674:	4baa      	ldr	r3, [pc, #680]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 8001676:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001678:	4ba9      	ldr	r3, [pc, #676]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 800167a:	2101      	movs	r1, #1
 800167c:	430a      	orrs	r2, r1
 800167e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001680:	f7ff faf6 	bl	8000c70 <HAL_GetTick>
 8001684:	0003      	movs	r3, r0
 8001686:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800168a:	f7ff faf1 	bl	8000c70 <HAL_GetTick>
 800168e:	0002      	movs	r2, r0
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e177      	b.n	800198c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800169c:	4ba0      	ldr	r3, [pc, #640]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 800169e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016a0:	2202      	movs	r2, #2
 80016a2:	4013      	ands	r3, r2
 80016a4:	d0f1      	beq.n	800168a <HAL_RCC_OscConfig+0x3ea>
 80016a6:	e018      	b.n	80016da <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016a8:	4b9d      	ldr	r3, [pc, #628]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 80016aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016ac:	4b9c      	ldr	r3, [pc, #624]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 80016ae:	2101      	movs	r1, #1
 80016b0:	438a      	bics	r2, r1
 80016b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b4:	f7ff fadc 	bl	8000c70 <HAL_GetTick>
 80016b8:	0003      	movs	r3, r0
 80016ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016be:	f7ff fad7 	bl	8000c70 <HAL_GetTick>
 80016c2:	0002      	movs	r2, r0
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e15d      	b.n	800198c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016d0:	4b93      	ldr	r3, [pc, #588]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 80016d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016d4:	2202      	movs	r2, #2
 80016d6:	4013      	ands	r3, r2
 80016d8:	d1f1      	bne.n	80016be <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2204      	movs	r2, #4
 80016e0:	4013      	ands	r3, r2
 80016e2:	d100      	bne.n	80016e6 <HAL_RCC_OscConfig+0x446>
 80016e4:	e0ae      	b.n	8001844 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016e6:	2023      	movs	r0, #35	; 0x23
 80016e8:	183b      	adds	r3, r7, r0
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ee:	4b8c      	ldr	r3, [pc, #560]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 80016f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	055b      	lsls	r3, r3, #21
 80016f6:	4013      	ands	r3, r2
 80016f8:	d109      	bne.n	800170e <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016fa:	4b89      	ldr	r3, [pc, #548]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 80016fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016fe:	4b88      	ldr	r3, [pc, #544]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 8001700:	2180      	movs	r1, #128	; 0x80
 8001702:	0549      	lsls	r1, r1, #21
 8001704:	430a      	orrs	r2, r1
 8001706:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001708:	183b      	adds	r3, r7, r0
 800170a:	2201      	movs	r2, #1
 800170c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800170e:	4b87      	ldr	r3, [pc, #540]	; (800192c <HAL_RCC_OscConfig+0x68c>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	2380      	movs	r3, #128	; 0x80
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4013      	ands	r3, r2
 8001718:	d11a      	bne.n	8001750 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800171a:	4b84      	ldr	r3, [pc, #528]	; (800192c <HAL_RCC_OscConfig+0x68c>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	4b83      	ldr	r3, [pc, #524]	; (800192c <HAL_RCC_OscConfig+0x68c>)
 8001720:	2180      	movs	r1, #128	; 0x80
 8001722:	0049      	lsls	r1, r1, #1
 8001724:	430a      	orrs	r2, r1
 8001726:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001728:	f7ff faa2 	bl	8000c70 <HAL_GetTick>
 800172c:	0003      	movs	r3, r0
 800172e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001732:	f7ff fa9d 	bl	8000c70 <HAL_GetTick>
 8001736:	0002      	movs	r2, r0
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b64      	cmp	r3, #100	; 0x64
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e123      	b.n	800198c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001744:	4b79      	ldr	r3, [pc, #484]	; (800192c <HAL_RCC_OscConfig+0x68c>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	4013      	ands	r3, r2
 800174e:	d0f0      	beq.n	8001732 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	2380      	movs	r3, #128	; 0x80
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	429a      	cmp	r2, r3
 800175a:	d107      	bne.n	800176c <HAL_RCC_OscConfig+0x4cc>
 800175c:	4b70      	ldr	r3, [pc, #448]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 800175e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001760:	4b6f      	ldr	r3, [pc, #444]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 8001762:	2180      	movs	r1, #128	; 0x80
 8001764:	0049      	lsls	r1, r1, #1
 8001766:	430a      	orrs	r2, r1
 8001768:	651a      	str	r2, [r3, #80]	; 0x50
 800176a:	e031      	b.n	80017d0 <HAL_RCC_OscConfig+0x530>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d10c      	bne.n	800178e <HAL_RCC_OscConfig+0x4ee>
 8001774:	4b6a      	ldr	r3, [pc, #424]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 8001776:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001778:	4b69      	ldr	r3, [pc, #420]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 800177a:	496b      	ldr	r1, [pc, #428]	; (8001928 <HAL_RCC_OscConfig+0x688>)
 800177c:	400a      	ands	r2, r1
 800177e:	651a      	str	r2, [r3, #80]	; 0x50
 8001780:	4b67      	ldr	r3, [pc, #412]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 8001782:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001784:	4b66      	ldr	r3, [pc, #408]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 8001786:	496a      	ldr	r1, [pc, #424]	; (8001930 <HAL_RCC_OscConfig+0x690>)
 8001788:	400a      	ands	r2, r1
 800178a:	651a      	str	r2, [r3, #80]	; 0x50
 800178c:	e020      	b.n	80017d0 <HAL_RCC_OscConfig+0x530>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	23a0      	movs	r3, #160	; 0xa0
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	429a      	cmp	r2, r3
 8001798:	d10e      	bne.n	80017b8 <HAL_RCC_OscConfig+0x518>
 800179a:	4b61      	ldr	r3, [pc, #388]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 800179c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800179e:	4b60      	ldr	r3, [pc, #384]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 80017a0:	2180      	movs	r1, #128	; 0x80
 80017a2:	00c9      	lsls	r1, r1, #3
 80017a4:	430a      	orrs	r2, r1
 80017a6:	651a      	str	r2, [r3, #80]	; 0x50
 80017a8:	4b5d      	ldr	r3, [pc, #372]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 80017aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017ac:	4b5c      	ldr	r3, [pc, #368]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 80017ae:	2180      	movs	r1, #128	; 0x80
 80017b0:	0049      	lsls	r1, r1, #1
 80017b2:	430a      	orrs	r2, r1
 80017b4:	651a      	str	r2, [r3, #80]	; 0x50
 80017b6:	e00b      	b.n	80017d0 <HAL_RCC_OscConfig+0x530>
 80017b8:	4b59      	ldr	r3, [pc, #356]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 80017ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017bc:	4b58      	ldr	r3, [pc, #352]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 80017be:	495a      	ldr	r1, [pc, #360]	; (8001928 <HAL_RCC_OscConfig+0x688>)
 80017c0:	400a      	ands	r2, r1
 80017c2:	651a      	str	r2, [r3, #80]	; 0x50
 80017c4:	4b56      	ldr	r3, [pc, #344]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 80017c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017c8:	4b55      	ldr	r3, [pc, #340]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 80017ca:	4959      	ldr	r1, [pc, #356]	; (8001930 <HAL_RCC_OscConfig+0x690>)
 80017cc:	400a      	ands	r2, r1
 80017ce:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d015      	beq.n	8001804 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d8:	f7ff fa4a 	bl	8000c70 <HAL_GetTick>
 80017dc:	0003      	movs	r3, r0
 80017de:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017e0:	e009      	b.n	80017f6 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017e2:	f7ff fa45 	bl	8000c70 <HAL_GetTick>
 80017e6:	0002      	movs	r2, r0
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	4a51      	ldr	r2, [pc, #324]	; (8001934 <HAL_RCC_OscConfig+0x694>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e0ca      	b.n	800198c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017f6:	4b4a      	ldr	r3, [pc, #296]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 80017f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017fa:	2380      	movs	r3, #128	; 0x80
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4013      	ands	r3, r2
 8001800:	d0ef      	beq.n	80017e2 <HAL_RCC_OscConfig+0x542>
 8001802:	e014      	b.n	800182e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001804:	f7ff fa34 	bl	8000c70 <HAL_GetTick>
 8001808:	0003      	movs	r3, r0
 800180a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800180c:	e009      	b.n	8001822 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800180e:	f7ff fa2f 	bl	8000c70 <HAL_GetTick>
 8001812:	0002      	movs	r2, r0
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	4a46      	ldr	r2, [pc, #280]	; (8001934 <HAL_RCC_OscConfig+0x694>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e0b4      	b.n	800198c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001822:	4b3f      	ldr	r3, [pc, #252]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 8001824:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001826:	2380      	movs	r3, #128	; 0x80
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4013      	ands	r3, r2
 800182c:	d1ef      	bne.n	800180e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800182e:	2323      	movs	r3, #35	; 0x23
 8001830:	18fb      	adds	r3, r7, r3
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d105      	bne.n	8001844 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001838:	4b39      	ldr	r3, [pc, #228]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 800183a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800183c:	4b38      	ldr	r3, [pc, #224]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 800183e:	493e      	ldr	r1, [pc, #248]	; (8001938 <HAL_RCC_OscConfig+0x698>)
 8001840:	400a      	ands	r2, r1
 8001842:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001848:	2b00      	cmp	r3, #0
 800184a:	d100      	bne.n	800184e <HAL_RCC_OscConfig+0x5ae>
 800184c:	e09d      	b.n	800198a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	2b0c      	cmp	r3, #12
 8001852:	d100      	bne.n	8001856 <HAL_RCC_OscConfig+0x5b6>
 8001854:	e076      	b.n	8001944 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185a:	2b02      	cmp	r3, #2
 800185c:	d145      	bne.n	80018ea <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185e:	4b30      	ldr	r3, [pc, #192]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	4b2f      	ldr	r3, [pc, #188]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 8001864:	4935      	ldr	r1, [pc, #212]	; (800193c <HAL_RCC_OscConfig+0x69c>)
 8001866:	400a      	ands	r2, r1
 8001868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186a:	f7ff fa01 	bl	8000c70 <HAL_GetTick>
 800186e:	0003      	movs	r3, r0
 8001870:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001874:	f7ff f9fc 	bl	8000c70 <HAL_GetTick>
 8001878:	0002      	movs	r2, r0
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e082      	b.n	800198c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001886:	4b26      	ldr	r3, [pc, #152]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	2380      	movs	r3, #128	; 0x80
 800188c:	049b      	lsls	r3, r3, #18
 800188e:	4013      	ands	r3, r2
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001892:	4b23      	ldr	r3, [pc, #140]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	4a2a      	ldr	r2, [pc, #168]	; (8001940 <HAL_RCC_OscConfig+0x6a0>)
 8001898:	4013      	ands	r3, r2
 800189a:	0019      	movs	r1, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	431a      	orrs	r2, r3
 80018ac:	4b1c      	ldr	r3, [pc, #112]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 80018ae:	430a      	orrs	r2, r1
 80018b0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018b2:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 80018b8:	2180      	movs	r1, #128	; 0x80
 80018ba:	0449      	lsls	r1, r1, #17
 80018bc:	430a      	orrs	r2, r1
 80018be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c0:	f7ff f9d6 	bl	8000c70 <HAL_GetTick>
 80018c4:	0003      	movs	r3, r0
 80018c6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ca:	f7ff f9d1 	bl	8000c70 <HAL_GetTick>
 80018ce:	0002      	movs	r2, r0
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e057      	b.n	800198c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80018dc:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	049b      	lsls	r3, r3, #18
 80018e4:	4013      	ands	r3, r2
 80018e6:	d0f0      	beq.n	80018ca <HAL_RCC_OscConfig+0x62a>
 80018e8:	e04f      	b.n	800198a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ea:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 80018f0:	4912      	ldr	r1, [pc, #72]	; (800193c <HAL_RCC_OscConfig+0x69c>)
 80018f2:	400a      	ands	r2, r1
 80018f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f6:	f7ff f9bb 	bl	8000c70 <HAL_GetTick>
 80018fa:	0003      	movs	r3, r0
 80018fc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001900:	f7ff f9b6 	bl	8000c70 <HAL_GetTick>
 8001904:	0002      	movs	r2, r0
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e03c      	b.n	800198c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001912:	4b03      	ldr	r3, [pc, #12]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	2380      	movs	r3, #128	; 0x80
 8001918:	049b      	lsls	r3, r3, #18
 800191a:	4013      	ands	r3, r2
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x660>
 800191e:	e034      	b.n	800198a <HAL_RCC_OscConfig+0x6ea>
 8001920:	40021000 	.word	0x40021000
 8001924:	ffff1fff 	.word	0xffff1fff
 8001928:	fffffeff 	.word	0xfffffeff
 800192c:	40007000 	.word	0x40007000
 8001930:	fffffbff 	.word	0xfffffbff
 8001934:	00001388 	.word	0x00001388
 8001938:	efffffff 	.word	0xefffffff
 800193c:	feffffff 	.word	0xfeffffff
 8001940:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001948:	2b01      	cmp	r3, #1
 800194a:	d101      	bne.n	8001950 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e01d      	b.n	800198c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001950:	4b10      	ldr	r3, [pc, #64]	; (8001994 <HAL_RCC_OscConfig+0x6f4>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	025b      	lsls	r3, r3, #9
 800195c:	401a      	ands	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001962:	429a      	cmp	r2, r3
 8001964:	d10f      	bne.n	8001986 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	23f0      	movs	r3, #240	; 0xf0
 800196a:	039b      	lsls	r3, r3, #14
 800196c:	401a      	ands	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001972:	429a      	cmp	r2, r3
 8001974:	d107      	bne.n	8001986 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	23c0      	movs	r3, #192	; 0xc0
 800197a:	041b      	lsls	r3, r3, #16
 800197c:	401a      	ands	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001982:	429a      	cmp	r2, r3
 8001984:	d001      	beq.n	800198a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e000      	b.n	800198c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	0018      	movs	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	b00a      	add	sp, #40	; 0x28
 8001992:	bdb0      	pop	{r4, r5, r7, pc}
 8001994:	40021000 	.word	0x40021000

08001998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001998:	b5b0      	push	{r4, r5, r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e128      	b.n	8001bfe <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019ac:	4b96      	ldr	r3, [pc, #600]	; (8001c08 <HAL_RCC_ClockConfig+0x270>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2201      	movs	r2, #1
 80019b2:	4013      	ands	r3, r2
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d91e      	bls.n	80019f8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ba:	4b93      	ldr	r3, [pc, #588]	; (8001c08 <HAL_RCC_ClockConfig+0x270>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2201      	movs	r2, #1
 80019c0:	4393      	bics	r3, r2
 80019c2:	0019      	movs	r1, r3
 80019c4:	4b90      	ldr	r3, [pc, #576]	; (8001c08 <HAL_RCC_ClockConfig+0x270>)
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019cc:	f7ff f950 	bl	8000c70 <HAL_GetTick>
 80019d0:	0003      	movs	r3, r0
 80019d2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d4:	e009      	b.n	80019ea <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d6:	f7ff f94b 	bl	8000c70 <HAL_GetTick>
 80019da:	0002      	movs	r2, r0
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	4a8a      	ldr	r2, [pc, #552]	; (8001c0c <HAL_RCC_ClockConfig+0x274>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e109      	b.n	8001bfe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ea:	4b87      	ldr	r3, [pc, #540]	; (8001c08 <HAL_RCC_ClockConfig+0x270>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2201      	movs	r2, #1
 80019f0:	4013      	ands	r3, r2
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d1ee      	bne.n	80019d6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2202      	movs	r2, #2
 80019fe:	4013      	ands	r3, r2
 8001a00:	d009      	beq.n	8001a16 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a02:	4b83      	ldr	r3, [pc, #524]	; (8001c10 <HAL_RCC_ClockConfig+0x278>)
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	22f0      	movs	r2, #240	; 0xf0
 8001a08:	4393      	bics	r3, r2
 8001a0a:	0019      	movs	r1, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	4b7f      	ldr	r3, [pc, #508]	; (8001c10 <HAL_RCC_ClockConfig+0x278>)
 8001a12:	430a      	orrs	r2, r1
 8001a14:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d100      	bne.n	8001a22 <HAL_RCC_ClockConfig+0x8a>
 8001a20:	e089      	b.n	8001b36 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d107      	bne.n	8001a3a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a2a:	4b79      	ldr	r3, [pc, #484]	; (8001c10 <HAL_RCC_ClockConfig+0x278>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	2380      	movs	r3, #128	; 0x80
 8001a30:	029b      	lsls	r3, r3, #10
 8001a32:	4013      	ands	r3, r2
 8001a34:	d120      	bne.n	8001a78 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e0e1      	b.n	8001bfe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b03      	cmp	r3, #3
 8001a40:	d107      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a42:	4b73      	ldr	r3, [pc, #460]	; (8001c10 <HAL_RCC_ClockConfig+0x278>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	049b      	lsls	r3, r3, #18
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d114      	bne.n	8001a78 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e0d5      	b.n	8001bfe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d106      	bne.n	8001a68 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a5a:	4b6d      	ldr	r3, [pc, #436]	; (8001c10 <HAL_RCC_ClockConfig+0x278>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2204      	movs	r2, #4
 8001a60:	4013      	ands	r3, r2
 8001a62:	d109      	bne.n	8001a78 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e0ca      	b.n	8001bfe <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a68:	4b69      	ldr	r3, [pc, #420]	; (8001c10 <HAL_RCC_ClockConfig+0x278>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	2380      	movs	r3, #128	; 0x80
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4013      	ands	r3, r2
 8001a72:	d101      	bne.n	8001a78 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e0c2      	b.n	8001bfe <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a78:	4b65      	ldr	r3, [pc, #404]	; (8001c10 <HAL_RCC_ClockConfig+0x278>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	4393      	bics	r3, r2
 8001a80:	0019      	movs	r1, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	4b62      	ldr	r3, [pc, #392]	; (8001c10 <HAL_RCC_ClockConfig+0x278>)
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a8c:	f7ff f8f0 	bl	8000c70 <HAL_GetTick>
 8001a90:	0003      	movs	r3, r0
 8001a92:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d111      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a9c:	e009      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a9e:	f7ff f8e7 	bl	8000c70 <HAL_GetTick>
 8001aa2:	0002      	movs	r2, r0
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	4a58      	ldr	r2, [pc, #352]	; (8001c0c <HAL_RCC_ClockConfig+0x274>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e0a5      	b.n	8001bfe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ab2:	4b57      	ldr	r3, [pc, #348]	; (8001c10 <HAL_RCC_ClockConfig+0x278>)
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	220c      	movs	r2, #12
 8001ab8:	4013      	ands	r3, r2
 8001aba:	2b08      	cmp	r3, #8
 8001abc:	d1ef      	bne.n	8001a9e <HAL_RCC_ClockConfig+0x106>
 8001abe:	e03a      	b.n	8001b36 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b03      	cmp	r3, #3
 8001ac6:	d111      	bne.n	8001aec <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ac8:	e009      	b.n	8001ade <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aca:	f7ff f8d1 	bl	8000c70 <HAL_GetTick>
 8001ace:	0002      	movs	r2, r0
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	4a4d      	ldr	r2, [pc, #308]	; (8001c0c <HAL_RCC_ClockConfig+0x274>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e08f      	b.n	8001bfe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ade:	4b4c      	ldr	r3, [pc, #304]	; (8001c10 <HAL_RCC_ClockConfig+0x278>)
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	220c      	movs	r2, #12
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2b0c      	cmp	r3, #12
 8001ae8:	d1ef      	bne.n	8001aca <HAL_RCC_ClockConfig+0x132>
 8001aea:	e024      	b.n	8001b36 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d11b      	bne.n	8001b2c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001af4:	e009      	b.n	8001b0a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af6:	f7ff f8bb 	bl	8000c70 <HAL_GetTick>
 8001afa:	0002      	movs	r2, r0
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	4a42      	ldr	r2, [pc, #264]	; (8001c0c <HAL_RCC_ClockConfig+0x274>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e079      	b.n	8001bfe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b0a:	4b41      	ldr	r3, [pc, #260]	; (8001c10 <HAL_RCC_ClockConfig+0x278>)
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	220c      	movs	r2, #12
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d1ef      	bne.n	8001af6 <HAL_RCC_ClockConfig+0x15e>
 8001b16:	e00e      	b.n	8001b36 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b18:	f7ff f8aa 	bl	8000c70 <HAL_GetTick>
 8001b1c:	0002      	movs	r2, r0
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	4a3a      	ldr	r2, [pc, #232]	; (8001c0c <HAL_RCC_ClockConfig+0x274>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e068      	b.n	8001bfe <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b2c:	4b38      	ldr	r3, [pc, #224]	; (8001c10 <HAL_RCC_ClockConfig+0x278>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	220c      	movs	r2, #12
 8001b32:	4013      	ands	r3, r2
 8001b34:	d1f0      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b36:	4b34      	ldr	r3, [pc, #208]	; (8001c08 <HAL_RCC_ClockConfig+0x270>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d21e      	bcs.n	8001b82 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b44:	4b30      	ldr	r3, [pc, #192]	; (8001c08 <HAL_RCC_ClockConfig+0x270>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	4393      	bics	r3, r2
 8001b4c:	0019      	movs	r1, r3
 8001b4e:	4b2e      	ldr	r3, [pc, #184]	; (8001c08 <HAL_RCC_ClockConfig+0x270>)
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	430a      	orrs	r2, r1
 8001b54:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b56:	f7ff f88b 	bl	8000c70 <HAL_GetTick>
 8001b5a:	0003      	movs	r3, r0
 8001b5c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5e:	e009      	b.n	8001b74 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b60:	f7ff f886 	bl	8000c70 <HAL_GetTick>
 8001b64:	0002      	movs	r2, r0
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	4a28      	ldr	r2, [pc, #160]	; (8001c0c <HAL_RCC_ClockConfig+0x274>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e044      	b.n	8001bfe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b74:	4b24      	ldr	r3, [pc, #144]	; (8001c08 <HAL_RCC_ClockConfig+0x270>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d1ee      	bne.n	8001b60 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2204      	movs	r2, #4
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d009      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b8c:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <HAL_RCC_ClockConfig+0x278>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	4a20      	ldr	r2, [pc, #128]	; (8001c14 <HAL_RCC_ClockConfig+0x27c>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	0019      	movs	r1, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68da      	ldr	r2, [r3, #12]
 8001b9a:	4b1d      	ldr	r3, [pc, #116]	; (8001c10 <HAL_RCC_ClockConfig+0x278>)
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2208      	movs	r2, #8
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d00a      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001baa:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <HAL_RCC_ClockConfig+0x278>)
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	4a1a      	ldr	r2, [pc, #104]	; (8001c18 <HAL_RCC_ClockConfig+0x280>)
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	0019      	movs	r1, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	00da      	lsls	r2, r3, #3
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <HAL_RCC_ClockConfig+0x278>)
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bc0:	f000 f832 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 8001bc4:	0001      	movs	r1, r0
 8001bc6:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <HAL_RCC_ClockConfig+0x278>)
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	091b      	lsrs	r3, r3, #4
 8001bcc:	220f      	movs	r2, #15
 8001bce:	4013      	ands	r3, r2
 8001bd0:	4a12      	ldr	r2, [pc, #72]	; (8001c1c <HAL_RCC_ClockConfig+0x284>)
 8001bd2:	5cd3      	ldrb	r3, [r2, r3]
 8001bd4:	000a      	movs	r2, r1
 8001bd6:	40da      	lsrs	r2, r3
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <HAL_RCC_ClockConfig+0x288>)
 8001bda:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <HAL_RCC_ClockConfig+0x28c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	250b      	movs	r5, #11
 8001be2:	197c      	adds	r4, r7, r5
 8001be4:	0018      	movs	r0, r3
 8001be6:	f7fe fffd 	bl	8000be4 <HAL_InitTick>
 8001bea:	0003      	movs	r3, r0
 8001bec:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001bee:	197b      	adds	r3, r7, r5
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d002      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001bf6:	197b      	adds	r3, r7, r5
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	e000      	b.n	8001bfe <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	0018      	movs	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b004      	add	sp, #16
 8001c04:	bdb0      	pop	{r4, r5, r7, pc}
 8001c06:	46c0      	nop			; (mov r8, r8)
 8001c08:	40022000 	.word	0x40022000
 8001c0c:	00001388 	.word	0x00001388
 8001c10:	40021000 	.word	0x40021000
 8001c14:	fffff8ff 	.word	0xfffff8ff
 8001c18:	ffffc7ff 	.word	0xffffc7ff
 8001c1c:	080038b8 	.word	0x080038b8
 8001c20:	20000004 	.word	0x20000004
 8001c24:	20000008 	.word	0x20000008

08001c28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c28:	b5b0      	push	{r4, r5, r7, lr}
 8001c2a:	b08e      	sub	sp, #56	; 0x38
 8001c2c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001c2e:	4b4c      	ldr	r3, [pc, #304]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c36:	230c      	movs	r3, #12
 8001c38:	4013      	ands	r3, r2
 8001c3a:	2b0c      	cmp	r3, #12
 8001c3c:	d014      	beq.n	8001c68 <HAL_RCC_GetSysClockFreq+0x40>
 8001c3e:	d900      	bls.n	8001c42 <HAL_RCC_GetSysClockFreq+0x1a>
 8001c40:	e07b      	b.n	8001d3a <HAL_RCC_GetSysClockFreq+0x112>
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	d002      	beq.n	8001c4c <HAL_RCC_GetSysClockFreq+0x24>
 8001c46:	2b08      	cmp	r3, #8
 8001c48:	d00b      	beq.n	8001c62 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c4a:	e076      	b.n	8001d3a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c4c:	4b44      	ldr	r3, [pc, #272]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2210      	movs	r2, #16
 8001c52:	4013      	ands	r3, r2
 8001c54:	d002      	beq.n	8001c5c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001c56:	4b43      	ldr	r3, [pc, #268]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c58:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001c5a:	e07c      	b.n	8001d56 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001c5c:	4b42      	ldr	r3, [pc, #264]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x140>)
 8001c5e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c60:	e079      	b.n	8001d56 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c62:	4b42      	ldr	r3, [pc, #264]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x144>)
 8001c64:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c66:	e076      	b.n	8001d56 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c6a:	0c9a      	lsrs	r2, r3, #18
 8001c6c:	230f      	movs	r3, #15
 8001c6e:	401a      	ands	r2, r3
 8001c70:	4b3f      	ldr	r3, [pc, #252]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x148>)
 8001c72:	5c9b      	ldrb	r3, [r3, r2]
 8001c74:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c78:	0d9a      	lsrs	r2, r3, #22
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	3301      	adds	r3, #1
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c82:	4b37      	ldr	r3, [pc, #220]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	2380      	movs	r3, #128	; 0x80
 8001c88:	025b      	lsls	r3, r3, #9
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d01a      	beq.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c90:	61bb      	str	r3, [r7, #24]
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
 8001c96:	4a35      	ldr	r2, [pc, #212]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x144>)
 8001c98:	2300      	movs	r3, #0
 8001c9a:	69b8      	ldr	r0, [r7, #24]
 8001c9c:	69f9      	ldr	r1, [r7, #28]
 8001c9e:	f7fe fadf 	bl	8000260 <__aeabi_lmul>
 8001ca2:	0002      	movs	r2, r0
 8001ca4:	000b      	movs	r3, r1
 8001ca6:	0010      	movs	r0, r2
 8001ca8:	0019      	movs	r1, r3
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	f7fe fab3 	bl	8000220 <__aeabi_uldivmod>
 8001cba:	0002      	movs	r2, r0
 8001cbc:	000b      	movs	r3, r1
 8001cbe:	0013      	movs	r3, r2
 8001cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8001cc2:	e037      	b.n	8001d34 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001cc4:	4b26      	ldr	r3, [pc, #152]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x138>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2210      	movs	r2, #16
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d01a      	beq.n	8001d04 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	4a23      	ldr	r2, [pc, #140]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001cd8:	2300      	movs	r3, #0
 8001cda:	68b8      	ldr	r0, [r7, #8]
 8001cdc:	68f9      	ldr	r1, [r7, #12]
 8001cde:	f7fe fabf 	bl	8000260 <__aeabi_lmul>
 8001ce2:	0002      	movs	r2, r0
 8001ce4:	000b      	movs	r3, r1
 8001ce6:	0010      	movs	r0, r2
 8001ce8:	0019      	movs	r1, r3
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	603b      	str	r3, [r7, #0]
 8001cee:	2300      	movs	r3, #0
 8001cf0:	607b      	str	r3, [r7, #4]
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f7fe fa93 	bl	8000220 <__aeabi_uldivmod>
 8001cfa:	0002      	movs	r2, r0
 8001cfc:	000b      	movs	r3, r1
 8001cfe:	0013      	movs	r3, r2
 8001d00:	637b      	str	r3, [r7, #52]	; 0x34
 8001d02:	e017      	b.n	8001d34 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d06:	0018      	movs	r0, r3
 8001d08:	2300      	movs	r3, #0
 8001d0a:	0019      	movs	r1, r3
 8001d0c:	4a16      	ldr	r2, [pc, #88]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x140>)
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f7fe faa6 	bl	8000260 <__aeabi_lmul>
 8001d14:	0002      	movs	r2, r0
 8001d16:	000b      	movs	r3, r1
 8001d18:	0010      	movs	r0, r2
 8001d1a:	0019      	movs	r1, r3
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	001c      	movs	r4, r3
 8001d20:	2300      	movs	r3, #0
 8001d22:	001d      	movs	r5, r3
 8001d24:	0022      	movs	r2, r4
 8001d26:	002b      	movs	r3, r5
 8001d28:	f7fe fa7a 	bl	8000220 <__aeabi_uldivmod>
 8001d2c:	0002      	movs	r2, r0
 8001d2e:	000b      	movs	r3, r1
 8001d30:	0013      	movs	r3, r2
 8001d32:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d36:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d38:	e00d      	b.n	8001d56 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001d3a:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	0b5b      	lsrs	r3, r3, #13
 8001d40:	2207      	movs	r2, #7
 8001d42:	4013      	ands	r3, r2
 8001d44:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001d46:	6a3b      	ldr	r3, [r7, #32]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	2280      	movs	r2, #128	; 0x80
 8001d4c:	0212      	lsls	r2, r2, #8
 8001d4e:	409a      	lsls	r2, r3
 8001d50:	0013      	movs	r3, r2
 8001d52:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d54:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001d58:	0018      	movs	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	b00e      	add	sp, #56	; 0x38
 8001d5e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d60:	40021000 	.word	0x40021000
 8001d64:	003d0900 	.word	0x003d0900
 8001d68:	00f42400 	.word	0x00f42400
 8001d6c:	007a1200 	.word	0x007a1200
 8001d70:	080038d0 	.word	0x080038d0

08001d74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d78:	4b02      	ldr	r3, [pc, #8]	; (8001d84 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
}
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	20000004 	.word	0x20000004

08001d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d8c:	f7ff fff2 	bl	8001d74 <HAL_RCC_GetHCLKFreq>
 8001d90:	0001      	movs	r1, r0
 8001d92:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	0a1b      	lsrs	r3, r3, #8
 8001d98:	2207      	movs	r2, #7
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	4a04      	ldr	r2, [pc, #16]	; (8001db0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d9e:	5cd3      	ldrb	r3, [r2, r3]
 8001da0:	40d9      	lsrs	r1, r3
 8001da2:	000b      	movs	r3, r1
}
 8001da4:	0018      	movs	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	40021000 	.word	0x40021000
 8001db0:	080038c8 	.word	0x080038c8

08001db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001db8:	f7ff ffdc 	bl	8001d74 <HAL_RCC_GetHCLKFreq>
 8001dbc:	0001      	movs	r1, r0
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	0adb      	lsrs	r3, r3, #11
 8001dc4:	2207      	movs	r2, #7
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dca:	5cd3      	ldrb	r3, [r2, r3]
 8001dcc:	40d9      	lsrs	r1, r3
 8001dce:	000b      	movs	r3, r1
}
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	080038c8 	.word	0x080038c8

08001de0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001de8:	2017      	movs	r0, #23
 8001dea:	183b      	adds	r3, r7, r0
 8001dec:	2200      	movs	r2, #0
 8001dee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2220      	movs	r2, #32
 8001df6:	4013      	ands	r3, r2
 8001df8:	d100      	bne.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001dfa:	e0c2      	b.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dfc:	4b81      	ldr	r3, [pc, #516]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001dfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e00:	2380      	movs	r3, #128	; 0x80
 8001e02:	055b      	lsls	r3, r3, #21
 8001e04:	4013      	ands	r3, r2
 8001e06:	d109      	bne.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e08:	4b7e      	ldr	r3, [pc, #504]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e0c:	4b7d      	ldr	r3, [pc, #500]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e0e:	2180      	movs	r1, #128	; 0x80
 8001e10:	0549      	lsls	r1, r1, #21
 8001e12:	430a      	orrs	r2, r1
 8001e14:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001e16:	183b      	adds	r3, r7, r0
 8001e18:	2201      	movs	r2, #1
 8001e1a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1c:	4b7a      	ldr	r3, [pc, #488]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4013      	ands	r3, r2
 8001e26:	d11a      	bne.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e28:	4b77      	ldr	r3, [pc, #476]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4b76      	ldr	r3, [pc, #472]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001e2e:	2180      	movs	r1, #128	; 0x80
 8001e30:	0049      	lsls	r1, r1, #1
 8001e32:	430a      	orrs	r2, r1
 8001e34:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e36:	f7fe ff1b 	bl	8000c70 <HAL_GetTick>
 8001e3a:	0003      	movs	r3, r0
 8001e3c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3e:	e008      	b.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e40:	f7fe ff16 	bl	8000c70 <HAL_GetTick>
 8001e44:	0002      	movs	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b64      	cmp	r3, #100	; 0x64
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e0d4      	b.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e52:	4b6d      	ldr	r3, [pc, #436]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d0f0      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001e5e:	4b69      	ldr	r3, [pc, #420]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	23c0      	movs	r3, #192	; 0xc0
 8001e64:	039b      	lsls	r3, r3, #14
 8001e66:	4013      	ands	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	23c0      	movs	r3, #192	; 0xc0
 8001e70:	039b      	lsls	r3, r3, #14
 8001e72:	4013      	ands	r3, r2
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d013      	beq.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	23c0      	movs	r3, #192	; 0xc0
 8001e80:	029b      	lsls	r3, r3, #10
 8001e82:	401a      	ands	r2, r3
 8001e84:	23c0      	movs	r3, #192	; 0xc0
 8001e86:	029b      	lsls	r3, r3, #10
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d10a      	bne.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001e8c:	4b5d      	ldr	r3, [pc, #372]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	2380      	movs	r3, #128	; 0x80
 8001e92:	029b      	lsls	r3, r3, #10
 8001e94:	401a      	ands	r2, r3
 8001e96:	2380      	movs	r3, #128	; 0x80
 8001e98:	029b      	lsls	r3, r3, #10
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d101      	bne.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e0ac      	b.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001ea2:	4b58      	ldr	r3, [pc, #352]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ea4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ea6:	23c0      	movs	r3, #192	; 0xc0
 8001ea8:	029b      	lsls	r3, r3, #10
 8001eaa:	4013      	ands	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d03b      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	23c0      	movs	r3, #192	; 0xc0
 8001eba:	029b      	lsls	r3, r3, #10
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d033      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2220      	movs	r2, #32
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d02e      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001ece:	4b4d      	ldr	r3, [pc, #308]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ed2:	4a4e      	ldr	r2, [pc, #312]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ed8:	4b4a      	ldr	r3, [pc, #296]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001eda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001edc:	4b49      	ldr	r3, [pc, #292]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ede:	2180      	movs	r1, #128	; 0x80
 8001ee0:	0309      	lsls	r1, r1, #12
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ee6:	4b47      	ldr	r3, [pc, #284]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ee8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001eea:	4b46      	ldr	r3, [pc, #280]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001eec:	4948      	ldr	r1, [pc, #288]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001eee:	400a      	ands	r2, r1
 8001ef0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001ef2:	4b44      	ldr	r3, [pc, #272]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	2380      	movs	r3, #128	; 0x80
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	4013      	ands	r3, r2
 8001f00:	d014      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f02:	f7fe feb5 	bl	8000c70 <HAL_GetTick>
 8001f06:	0003      	movs	r3, r0
 8001f08:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f0a:	e009      	b.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f0c:	f7fe feb0 	bl	8000c70 <HAL_GetTick>
 8001f10:	0002      	movs	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	4a3f      	ldr	r2, [pc, #252]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e06d      	b.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f20:	4b38      	ldr	r3, [pc, #224]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d0ef      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	23c0      	movs	r3, #192	; 0xc0
 8001f32:	029b      	lsls	r3, r3, #10
 8001f34:	401a      	ands	r2, r3
 8001f36:	23c0      	movs	r3, #192	; 0xc0
 8001f38:	029b      	lsls	r3, r3, #10
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d10c      	bne.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8001f3e:	4b31      	ldr	r3, [pc, #196]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a35      	ldr	r2, [pc, #212]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	0019      	movs	r1, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	23c0      	movs	r3, #192	; 0xc0
 8001f4e:	039b      	lsls	r3, r3, #14
 8001f50:	401a      	ands	r2, r3
 8001f52:	4b2c      	ldr	r3, [pc, #176]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f54:	430a      	orrs	r2, r1
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	4b2a      	ldr	r3, [pc, #168]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f5a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	23c0      	movs	r3, #192	; 0xc0
 8001f62:	029b      	lsls	r3, r3, #10
 8001f64:	401a      	ands	r2, r3
 8001f66:	4b27      	ldr	r3, [pc, #156]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f6c:	2317      	movs	r3, #23
 8001f6e:	18fb      	adds	r3, r7, r3
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d105      	bne.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f76:	4b23      	ldr	r3, [pc, #140]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f7a:	4b22      	ldr	r3, [pc, #136]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f7c:	4927      	ldr	r1, [pc, #156]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001f7e:	400a      	ands	r2, r1
 8001f80:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2202      	movs	r2, #2
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d009      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f8c:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f90:	220c      	movs	r2, #12
 8001f92:	4393      	bics	r3, r2
 8001f94:	0019      	movs	r1, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2204      	movs	r2, #4
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d009      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001faa:	4b16      	ldr	r3, [pc, #88]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fae:	4a1c      	ldr	r2, [pc, #112]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	0019      	movs	r1, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68da      	ldr	r2, [r3, #12]
 8001fb8:	4b12      	ldr	r3, [pc, #72]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2208      	movs	r2, #8
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d009      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fc8:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fcc:	4a15      	ldr	r2, [pc, #84]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001fce:	4013      	ands	r3, r2
 8001fd0:	0019      	movs	r1, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691a      	ldr	r2, [r3, #16]
 8001fd6:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2280      	movs	r2, #128	; 0x80
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d009      	beq.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001fe6:	4b07      	ldr	r3, [pc, #28]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fea:	4a0f      	ldr	r2, [pc, #60]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	0019      	movs	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	695a      	ldr	r2, [r3, #20]
 8001ff4:	4b03      	ldr	r3, [pc, #12]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	b006      	add	sp, #24
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40021000 	.word	0x40021000
 8002008:	40007000 	.word	0x40007000
 800200c:	fffcffff 	.word	0xfffcffff
 8002010:	fff7ffff 	.word	0xfff7ffff
 8002014:	00001388 	.word	0x00001388
 8002018:	ffcfffff 	.word	0xffcfffff
 800201c:	efffffff 	.word	0xefffffff
 8002020:	fffff3ff 	.word	0xfffff3ff
 8002024:	ffffcfff 	.word	0xffffcfff
 8002028:	fff3ffff 	.word	0xfff3ffff

0800202c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e07b      	b.n	8002136 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	2b00      	cmp	r3, #0
 8002044:	d109      	bne.n	800205a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	2382      	movs	r3, #130	; 0x82
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	429a      	cmp	r2, r3
 8002050:	d009      	beq.n	8002066 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	61da      	str	r2, [r3, #28]
 8002058:	e005      	b.n	8002066 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2251      	movs	r2, #81	; 0x51
 8002070:	5c9b      	ldrb	r3, [r3, r2]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	d107      	bne.n	8002088 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2250      	movs	r2, #80	; 0x50
 800207c:	2100      	movs	r1, #0
 800207e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	0018      	movs	r0, r3
 8002084:	f7fe fc7c 	bl	8000980 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2251      	movs	r2, #81	; 0x51
 800208c:	2102      	movs	r1, #2
 800208e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2140      	movs	r1, #64	; 0x40
 800209c:	438a      	bics	r2, r1
 800209e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	2382      	movs	r3, #130	; 0x82
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	401a      	ands	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6899      	ldr	r1, [r3, #8]
 80020ae:	2384      	movs	r3, #132	; 0x84
 80020b0:	021b      	lsls	r3, r3, #8
 80020b2:	400b      	ands	r3, r1
 80020b4:	431a      	orrs	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68d9      	ldr	r1, [r3, #12]
 80020ba:	2380      	movs	r3, #128	; 0x80
 80020bc:	011b      	lsls	r3, r3, #4
 80020be:	400b      	ands	r3, r1
 80020c0:	431a      	orrs	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	2102      	movs	r1, #2
 80020c8:	400b      	ands	r3, r1
 80020ca:	431a      	orrs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	2101      	movs	r1, #1
 80020d2:	400b      	ands	r3, r1
 80020d4:	431a      	orrs	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6999      	ldr	r1, [r3, #24]
 80020da:	2380      	movs	r3, #128	; 0x80
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	400b      	ands	r3, r1
 80020e0:	431a      	orrs	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	2138      	movs	r1, #56	; 0x38
 80020e8:	400b      	ands	r3, r1
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	2180      	movs	r1, #128	; 0x80
 80020f2:	400b      	ands	r3, r1
 80020f4:	431a      	orrs	r2, r3
 80020f6:	0011      	movs	r1, r2
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020fc:	2380      	movs	r3, #128	; 0x80
 80020fe:	019b      	lsls	r3, r3, #6
 8002100:	401a      	ands	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	430a      	orrs	r2, r1
 8002108:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	0c1b      	lsrs	r3, r3, #16
 8002110:	2204      	movs	r2, #4
 8002112:	4013      	ands	r3, r2
 8002114:	0019      	movs	r1, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	2210      	movs	r2, #16
 800211c:	401a      	ands	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2251      	movs	r2, #81	; 0x51
 8002130:	2101      	movs	r1, #1
 8002132:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	0018      	movs	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	b002      	add	sp, #8
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e044      	b.n	80021dc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002156:	2b00      	cmp	r3, #0
 8002158:	d107      	bne.n	800216a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2274      	movs	r2, #116	; 0x74
 800215e:	2100      	movs	r1, #0
 8002160:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	0018      	movs	r0, r3
 8002166:	f7fe fc4f 	bl	8000a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2224      	movs	r2, #36	; 0x24
 800216e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2101      	movs	r1, #1
 800217c:	438a      	bics	r2, r1
 800217e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	0018      	movs	r0, r3
 8002184:	f000 fc36 	bl	80029f4 <UART_SetConfig>
 8002188:	0003      	movs	r3, r0
 800218a:	2b01      	cmp	r3, #1
 800218c:	d101      	bne.n	8002192 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e024      	b.n	80021dc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	0018      	movs	r0, r3
 800219e:	f000 fe73 	bl	8002e88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	490d      	ldr	r1, [pc, #52]	; (80021e4 <HAL_UART_Init+0xa4>)
 80021ae:	400a      	ands	r2, r1
 80021b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	212a      	movs	r1, #42	; 0x2a
 80021be:	438a      	bics	r2, r1
 80021c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2101      	movs	r1, #1
 80021ce:	430a      	orrs	r2, r1
 80021d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	0018      	movs	r0, r3
 80021d6:	f000 ff0b 	bl	8002ff0 <UART_CheckIdleState>
 80021da:	0003      	movs	r3, r0
}
 80021dc:	0018      	movs	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	b002      	add	sp, #8
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	ffffb7ff 	.word	0xffffb7ff

080021e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08a      	sub	sp, #40	; 0x28
 80021ec:	af02      	add	r7, sp, #8
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	603b      	str	r3, [r7, #0]
 80021f4:	1dbb      	adds	r3, r7, #6
 80021f6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021fc:	2b20      	cmp	r3, #32
 80021fe:	d000      	beq.n	8002202 <HAL_UART_Transmit+0x1a>
 8002200:	e095      	b.n	800232e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_UART_Transmit+0x28>
 8002208:	1dbb      	adds	r3, r7, #6
 800220a:	881b      	ldrh	r3, [r3, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e08d      	b.n	8002330 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	2380      	movs	r3, #128	; 0x80
 800221a:	015b      	lsls	r3, r3, #5
 800221c:	429a      	cmp	r2, r3
 800221e:	d109      	bne.n	8002234 <HAL_UART_Transmit+0x4c>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d105      	bne.n	8002234 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	2201      	movs	r2, #1
 800222c:	4013      	ands	r3, r2
 800222e:	d001      	beq.n	8002234 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e07d      	b.n	8002330 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2274      	movs	r2, #116	; 0x74
 8002238:	5c9b      	ldrb	r3, [r3, r2]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_UART_Transmit+0x5a>
 800223e:	2302      	movs	r3, #2
 8002240:	e076      	b.n	8002330 <HAL_UART_Transmit+0x148>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2274      	movs	r2, #116	; 0x74
 8002246:	2101      	movs	r1, #1
 8002248:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2280      	movs	r2, #128	; 0x80
 800224e:	2100      	movs	r1, #0
 8002250:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2221      	movs	r2, #33	; 0x21
 8002256:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002258:	f7fe fd0a 	bl	8000c70 <HAL_GetTick>
 800225c:	0003      	movs	r3, r0
 800225e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	1dba      	adds	r2, r7, #6
 8002264:	2150      	movs	r1, #80	; 0x50
 8002266:	8812      	ldrh	r2, [r2, #0]
 8002268:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1dba      	adds	r2, r7, #6
 800226e:	2152      	movs	r1, #82	; 0x52
 8002270:	8812      	ldrh	r2, [r2, #0]
 8002272:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	2380      	movs	r3, #128	; 0x80
 800227a:	015b      	lsls	r3, r3, #5
 800227c:	429a      	cmp	r2, r3
 800227e:	d108      	bne.n	8002292 <HAL_UART_Transmit+0xaa>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d104      	bne.n	8002292 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002288:	2300      	movs	r3, #0
 800228a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	61bb      	str	r3, [r7, #24]
 8002290:	e003      	b.n	800229a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002296:	2300      	movs	r3, #0
 8002298:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2274      	movs	r2, #116	; 0x74
 800229e:	2100      	movs	r1, #0
 80022a0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80022a2:	e02c      	b.n	80022fe <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	0013      	movs	r3, r2
 80022ae:	2200      	movs	r2, #0
 80022b0:	2180      	movs	r1, #128	; 0x80
 80022b2:	f000 fee5 	bl	8003080 <UART_WaitOnFlagUntilTimeout>
 80022b6:	1e03      	subs	r3, r0, #0
 80022b8:	d001      	beq.n	80022be <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e038      	b.n	8002330 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10b      	bne.n	80022dc <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	001a      	movs	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	05d2      	lsls	r2, r2, #23
 80022d0:	0dd2      	lsrs	r2, r2, #23
 80022d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	3302      	adds	r3, #2
 80022d8:	61bb      	str	r3, [r7, #24]
 80022da:	e007      	b.n	80022ec <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	781a      	ldrb	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3301      	adds	r3, #1
 80022ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2252      	movs	r2, #82	; 0x52
 80022f0:	5a9b      	ldrh	r3, [r3, r2]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	3b01      	subs	r3, #1
 80022f6:	b299      	uxth	r1, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2252      	movs	r2, #82	; 0x52
 80022fc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2252      	movs	r2, #82	; 0x52
 8002302:	5a9b      	ldrh	r3, [r3, r2]
 8002304:	b29b      	uxth	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1cc      	bne.n	80022a4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	0013      	movs	r3, r2
 8002314:	2200      	movs	r2, #0
 8002316:	2140      	movs	r1, #64	; 0x40
 8002318:	f000 feb2 	bl	8003080 <UART_WaitOnFlagUntilTimeout>
 800231c:	1e03      	subs	r3, r0, #0
 800231e:	d001      	beq.n	8002324 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e005      	b.n	8002330 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2220      	movs	r2, #32
 8002328:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800232a:	2300      	movs	r3, #0
 800232c:	e000      	b.n	8002330 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800232e:	2302      	movs	r3, #2
  }
}
 8002330:	0018      	movs	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	b008      	add	sp, #32
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b088      	sub	sp, #32
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	1dbb      	adds	r3, r7, #6
 8002344:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800234a:	2b20      	cmp	r3, #32
 800234c:	d155      	bne.n	80023fa <HAL_UART_Receive_IT+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_UART_Receive_IT+0x24>
 8002354:	1dbb      	adds	r3, r7, #6
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e04d      	b.n	80023fc <HAL_UART_Receive_IT+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	2380      	movs	r3, #128	; 0x80
 8002366:	015b      	lsls	r3, r3, #5
 8002368:	429a      	cmp	r2, r3
 800236a:	d109      	bne.n	8002380 <HAL_UART_Receive_IT+0x48>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d105      	bne.n	8002380 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2201      	movs	r2, #1
 8002378:	4013      	ands	r3, r2
 800237a:	d001      	beq.n	8002380 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e03d      	b.n	80023fc <HAL_UART_Receive_IT+0xc4>
      }
    }

    __HAL_LOCK(huart);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2274      	movs	r2, #116	; 0x74
 8002384:	5c9b      	ldrb	r3, [r3, r2]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d101      	bne.n	800238e <HAL_UART_Receive_IT+0x56>
 800238a:	2302      	movs	r3, #2
 800238c:	e036      	b.n	80023fc <HAL_UART_Receive_IT+0xc4>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2274      	movs	r2, #116	; 0x74
 8002392:	2101      	movs	r1, #1
 8002394:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a18      	ldr	r2, [pc, #96]	; (8002404 <HAL_UART_Receive_IT+0xcc>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d020      	beq.n	80023e8 <HAL_UART_Receive_IT+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	2380      	movs	r3, #128	; 0x80
 80023ae:	041b      	lsls	r3, r3, #16
 80023b0:	4013      	ands	r3, r2
 80023b2:	d019      	beq.n	80023e8 <HAL_UART_Receive_IT+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023b4:	f3ef 8310 	mrs	r3, PRIMASK
 80023b8:	613b      	str	r3, [r7, #16]
  return(result);
 80023ba:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	2301      	movs	r3, #1
 80023c0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f383 8810 	msr	PRIMASK, r3
}
 80023c8:	46c0      	nop			; (mov r8, r8)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2180      	movs	r1, #128	; 0x80
 80023d6:	04c9      	lsls	r1, r1, #19
 80023d8:	430a      	orrs	r2, r1
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	f383 8810 	msr	PRIMASK, r3
}
 80023e6:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80023e8:	1dbb      	adds	r3, r7, #6
 80023ea:	881a      	ldrh	r2, [r3, #0]
 80023ec:	68b9      	ldr	r1, [r7, #8]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	0018      	movs	r0, r3
 80023f2:	f000 ff09 	bl	8003208 <UART_Start_Receive_IT>
 80023f6:	0003      	movs	r3, r0
 80023f8:	e000      	b.n	80023fc <HAL_UART_Receive_IT+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80023fa:	2302      	movs	r3, #2
  }
}
 80023fc:	0018      	movs	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	b008      	add	sp, #32
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40004800 	.word	0x40004800

08002408 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002408:	b590      	push	{r4, r7, lr}
 800240a:	b0ab      	sub	sp, #172	; 0xac
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	22a4      	movs	r2, #164	; 0xa4
 8002418:	18b9      	adds	r1, r7, r2
 800241a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	20a0      	movs	r0, #160	; 0xa0
 8002424:	1839      	adds	r1, r7, r0
 8002426:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	219c      	movs	r1, #156	; 0x9c
 8002430:	1879      	adds	r1, r7, r1
 8002432:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002434:	0011      	movs	r1, r2
 8002436:	18bb      	adds	r3, r7, r2
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a99      	ldr	r2, [pc, #612]	; (80026a0 <HAL_UART_IRQHandler+0x298>)
 800243c:	4013      	ands	r3, r2
 800243e:	2298      	movs	r2, #152	; 0x98
 8002440:	18bc      	adds	r4, r7, r2
 8002442:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002444:	18bb      	adds	r3, r7, r2
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d114      	bne.n	8002476 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800244c:	187b      	adds	r3, r7, r1
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2220      	movs	r2, #32
 8002452:	4013      	ands	r3, r2
 8002454:	d00f      	beq.n	8002476 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002456:	183b      	adds	r3, r7, r0
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2220      	movs	r2, #32
 800245c:	4013      	ands	r3, r2
 800245e:	d00a      	beq.n	8002476 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002464:	2b00      	cmp	r3, #0
 8002466:	d100      	bne.n	800246a <HAL_UART_IRQHandler+0x62>
 8002468:	e298      	b.n	800299c <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	0010      	movs	r0, r2
 8002472:	4798      	blx	r3
      }
      return;
 8002474:	e292      	b.n	800299c <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002476:	2398      	movs	r3, #152	; 0x98
 8002478:	18fb      	adds	r3, r7, r3
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d100      	bne.n	8002482 <HAL_UART_IRQHandler+0x7a>
 8002480:	e114      	b.n	80026ac <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002482:	239c      	movs	r3, #156	; 0x9c
 8002484:	18fb      	adds	r3, r7, r3
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2201      	movs	r2, #1
 800248a:	4013      	ands	r3, r2
 800248c:	d106      	bne.n	800249c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800248e:	23a0      	movs	r3, #160	; 0xa0
 8002490:	18fb      	adds	r3, r7, r3
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a83      	ldr	r2, [pc, #524]	; (80026a4 <HAL_UART_IRQHandler+0x29c>)
 8002496:	4013      	ands	r3, r2
 8002498:	d100      	bne.n	800249c <HAL_UART_IRQHandler+0x94>
 800249a:	e107      	b.n	80026ac <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800249c:	23a4      	movs	r3, #164	; 0xa4
 800249e:	18fb      	adds	r3, r7, r3
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2201      	movs	r2, #1
 80024a4:	4013      	ands	r3, r2
 80024a6:	d012      	beq.n	80024ce <HAL_UART_IRQHandler+0xc6>
 80024a8:	23a0      	movs	r3, #160	; 0xa0
 80024aa:	18fb      	adds	r3, r7, r3
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	2380      	movs	r3, #128	; 0x80
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	4013      	ands	r3, r2
 80024b4:	d00b      	beq.n	80024ce <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2201      	movs	r2, #1
 80024bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2280      	movs	r2, #128	; 0x80
 80024c2:	589b      	ldr	r3, [r3, r2]
 80024c4:	2201      	movs	r2, #1
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2180      	movs	r1, #128	; 0x80
 80024cc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80024ce:	23a4      	movs	r3, #164	; 0xa4
 80024d0:	18fb      	adds	r3, r7, r3
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2202      	movs	r2, #2
 80024d6:	4013      	ands	r3, r2
 80024d8:	d011      	beq.n	80024fe <HAL_UART_IRQHandler+0xf6>
 80024da:	239c      	movs	r3, #156	; 0x9c
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2201      	movs	r2, #1
 80024e2:	4013      	ands	r3, r2
 80024e4:	d00b      	beq.n	80024fe <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2202      	movs	r2, #2
 80024ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2280      	movs	r2, #128	; 0x80
 80024f2:	589b      	ldr	r3, [r3, r2]
 80024f4:	2204      	movs	r2, #4
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2180      	movs	r1, #128	; 0x80
 80024fc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80024fe:	23a4      	movs	r3, #164	; 0xa4
 8002500:	18fb      	adds	r3, r7, r3
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2204      	movs	r2, #4
 8002506:	4013      	ands	r3, r2
 8002508:	d011      	beq.n	800252e <HAL_UART_IRQHandler+0x126>
 800250a:	239c      	movs	r3, #156	; 0x9c
 800250c:	18fb      	adds	r3, r7, r3
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2201      	movs	r2, #1
 8002512:	4013      	ands	r3, r2
 8002514:	d00b      	beq.n	800252e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2204      	movs	r2, #4
 800251c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2280      	movs	r2, #128	; 0x80
 8002522:	589b      	ldr	r3, [r3, r2]
 8002524:	2202      	movs	r2, #2
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2180      	movs	r1, #128	; 0x80
 800252c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800252e:	23a4      	movs	r3, #164	; 0xa4
 8002530:	18fb      	adds	r3, r7, r3
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2208      	movs	r2, #8
 8002536:	4013      	ands	r3, r2
 8002538:	d017      	beq.n	800256a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800253a:	23a0      	movs	r3, #160	; 0xa0
 800253c:	18fb      	adds	r3, r7, r3
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2220      	movs	r2, #32
 8002542:	4013      	ands	r3, r2
 8002544:	d105      	bne.n	8002552 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002546:	239c      	movs	r3, #156	; 0x9c
 8002548:	18fb      	adds	r3, r7, r3
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2201      	movs	r2, #1
 800254e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002550:	d00b      	beq.n	800256a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2208      	movs	r2, #8
 8002558:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2280      	movs	r2, #128	; 0x80
 800255e:	589b      	ldr	r3, [r3, r2]
 8002560:	2208      	movs	r2, #8
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2180      	movs	r1, #128	; 0x80
 8002568:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800256a:	23a4      	movs	r3, #164	; 0xa4
 800256c:	18fb      	adds	r3, r7, r3
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	2380      	movs	r3, #128	; 0x80
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	4013      	ands	r3, r2
 8002576:	d013      	beq.n	80025a0 <HAL_UART_IRQHandler+0x198>
 8002578:	23a0      	movs	r3, #160	; 0xa0
 800257a:	18fb      	adds	r3, r7, r3
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	2380      	movs	r3, #128	; 0x80
 8002580:	04db      	lsls	r3, r3, #19
 8002582:	4013      	ands	r3, r2
 8002584:	d00c      	beq.n	80025a0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2280      	movs	r2, #128	; 0x80
 800258c:	0112      	lsls	r2, r2, #4
 800258e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2280      	movs	r2, #128	; 0x80
 8002594:	589b      	ldr	r3, [r3, r2]
 8002596:	2220      	movs	r2, #32
 8002598:	431a      	orrs	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2180      	movs	r1, #128	; 0x80
 800259e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2280      	movs	r2, #128	; 0x80
 80025a4:	589b      	ldr	r3, [r3, r2]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d100      	bne.n	80025ac <HAL_UART_IRQHandler+0x1a4>
 80025aa:	e1f9      	b.n	80029a0 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80025ac:	23a4      	movs	r3, #164	; 0xa4
 80025ae:	18fb      	adds	r3, r7, r3
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2220      	movs	r2, #32
 80025b4:	4013      	ands	r3, r2
 80025b6:	d00e      	beq.n	80025d6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80025b8:	23a0      	movs	r3, #160	; 0xa0
 80025ba:	18fb      	adds	r3, r7, r3
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2220      	movs	r2, #32
 80025c0:	4013      	ands	r3, r2
 80025c2:	d008      	beq.n	80025d6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d004      	beq.n	80025d6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	0010      	movs	r0, r2
 80025d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2280      	movs	r2, #128	; 0x80
 80025da:	589b      	ldr	r3, [r3, r2]
 80025dc:	2194      	movs	r1, #148	; 0x94
 80025de:	187a      	adds	r2, r7, r1
 80025e0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2240      	movs	r2, #64	; 0x40
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b40      	cmp	r3, #64	; 0x40
 80025ee:	d004      	beq.n	80025fa <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80025f0:	187b      	adds	r3, r7, r1
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2228      	movs	r2, #40	; 0x28
 80025f6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025f8:	d047      	beq.n	800268a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	0018      	movs	r0, r3
 80025fe:	f000 feb3 	bl	8003368 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	2240      	movs	r2, #64	; 0x40
 800260a:	4013      	ands	r3, r2
 800260c:	2b40      	cmp	r3, #64	; 0x40
 800260e:	d137      	bne.n	8002680 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002610:	f3ef 8310 	mrs	r3, PRIMASK
 8002614:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002616:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002618:	2090      	movs	r0, #144	; 0x90
 800261a:	183a      	adds	r2, r7, r0
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	2301      	movs	r3, #1
 8002620:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002622:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002624:	f383 8810 	msr	PRIMASK, r3
}
 8002628:	46c0      	nop			; (mov r8, r8)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2140      	movs	r1, #64	; 0x40
 8002636:	438a      	bics	r2, r1
 8002638:	609a      	str	r2, [r3, #8]
 800263a:	183b      	adds	r3, r7, r0
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002640:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002642:	f383 8810 	msr	PRIMASK, r3
}
 8002646:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264c:	2b00      	cmp	r3, #0
 800264e:	d012      	beq.n	8002676 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002654:	4a14      	ldr	r2, [pc, #80]	; (80026a8 <HAL_UART_IRQHandler+0x2a0>)
 8002656:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265c:	0018      	movs	r0, r3
 800265e:	f7fe fc53 	bl	8000f08 <HAL_DMA_Abort_IT>
 8002662:	1e03      	subs	r3, r0, #0
 8002664:	d01a      	beq.n	800269c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002670:	0018      	movs	r0, r3
 8002672:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002674:	e012      	b.n	800269c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	0018      	movs	r0, r3
 800267a:	f000 f9a7 	bl	80029cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800267e:	e00d      	b.n	800269c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	0018      	movs	r0, r3
 8002684:	f000 f9a2 	bl	80029cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002688:	e008      	b.n	800269c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	0018      	movs	r0, r3
 800268e:	f000 f99d 	bl	80029cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2280      	movs	r2, #128	; 0x80
 8002696:	2100      	movs	r1, #0
 8002698:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800269a:	e181      	b.n	80029a0 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800269c:	46c0      	nop			; (mov r8, r8)
    return;
 800269e:	e17f      	b.n	80029a0 <HAL_UART_IRQHandler+0x598>
 80026a0:	0000080f 	.word	0x0000080f
 80026a4:	04000120 	.word	0x04000120
 80026a8:	0800342d 	.word	0x0800342d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d000      	beq.n	80026b6 <HAL_UART_IRQHandler+0x2ae>
 80026b4:	e133      	b.n	800291e <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80026b6:	23a4      	movs	r3, #164	; 0xa4
 80026b8:	18fb      	adds	r3, r7, r3
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2210      	movs	r2, #16
 80026be:	4013      	ands	r3, r2
 80026c0:	d100      	bne.n	80026c4 <HAL_UART_IRQHandler+0x2bc>
 80026c2:	e12c      	b.n	800291e <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80026c4:	23a0      	movs	r3, #160	; 0xa0
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2210      	movs	r2, #16
 80026cc:	4013      	ands	r3, r2
 80026ce:	d100      	bne.n	80026d2 <HAL_UART_IRQHandler+0x2ca>
 80026d0:	e125      	b.n	800291e <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2210      	movs	r2, #16
 80026d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2240      	movs	r2, #64	; 0x40
 80026e2:	4013      	ands	r3, r2
 80026e4:	2b40      	cmp	r3, #64	; 0x40
 80026e6:	d000      	beq.n	80026ea <HAL_UART_IRQHandler+0x2e2>
 80026e8:	e09d      	b.n	8002826 <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	217e      	movs	r1, #126	; 0x7e
 80026f4:	187b      	adds	r3, r7, r1
 80026f6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80026f8:	187b      	adds	r3, r7, r1
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d100      	bne.n	8002702 <HAL_UART_IRQHandler+0x2fa>
 8002700:	e150      	b.n	80029a4 <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2258      	movs	r2, #88	; 0x58
 8002706:	5a9b      	ldrh	r3, [r3, r2]
 8002708:	187a      	adds	r2, r7, r1
 800270a:	8812      	ldrh	r2, [r2, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	d300      	bcc.n	8002712 <HAL_UART_IRQHandler+0x30a>
 8002710:	e148      	b.n	80029a4 <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	187a      	adds	r2, r7, r1
 8002716:	215a      	movs	r1, #90	; 0x5a
 8002718:	8812      	ldrh	r2, [r2, #0]
 800271a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2220      	movs	r2, #32
 8002726:	4013      	ands	r3, r2
 8002728:	d16e      	bne.n	8002808 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800272a:	f3ef 8310 	mrs	r3, PRIMASK
 800272e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002732:	67bb      	str	r3, [r7, #120]	; 0x78
 8002734:	2301      	movs	r3, #1
 8002736:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800273a:	f383 8810 	msr	PRIMASK, r3
}
 800273e:	46c0      	nop			; (mov r8, r8)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	499a      	ldr	r1, [pc, #616]	; (80029b4 <HAL_UART_IRQHandler+0x5ac>)
 800274c:	400a      	ands	r2, r1
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002752:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002756:	f383 8810 	msr	PRIMASK, r3
}
 800275a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800275c:	f3ef 8310 	mrs	r3, PRIMASK
 8002760:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002764:	677b      	str	r3, [r7, #116]	; 0x74
 8002766:	2301      	movs	r3, #1
 8002768:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800276a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800276c:	f383 8810 	msr	PRIMASK, r3
}
 8002770:	46c0      	nop			; (mov r8, r8)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2101      	movs	r1, #1
 800277e:	438a      	bics	r2, r1
 8002780:	609a      	str	r2, [r3, #8]
 8002782:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002784:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002788:	f383 8810 	msr	PRIMASK, r3
}
 800278c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800278e:	f3ef 8310 	mrs	r3, PRIMASK
 8002792:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002794:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002796:	673b      	str	r3, [r7, #112]	; 0x70
 8002798:	2301      	movs	r3, #1
 800279a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800279c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800279e:	f383 8810 	msr	PRIMASK, r3
}
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2140      	movs	r1, #64	; 0x40
 80027b0:	438a      	bics	r2, r1
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027b6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ba:	f383 8810 	msr	PRIMASK, r3
}
 80027be:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2220      	movs	r2, #32
 80027c4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027cc:	f3ef 8310 	mrs	r3, PRIMASK
 80027d0:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80027d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027d6:	2301      	movs	r3, #1
 80027d8:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027dc:	f383 8810 	msr	PRIMASK, r3
}
 80027e0:	46c0      	nop			; (mov r8, r8)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2110      	movs	r1, #16
 80027ee:	438a      	bics	r2, r1
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027f8:	f383 8810 	msr	PRIMASK, r3
}
 80027fc:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002802:	0018      	movs	r0, r3
 8002804:	f7fe fb40 	bl	8000e88 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2258      	movs	r2, #88	; 0x58
 800280c:	5a9a      	ldrh	r2, [r3, r2]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	215a      	movs	r1, #90	; 0x5a
 8002812:	5a5b      	ldrh	r3, [r3, r1]
 8002814:	b29b      	uxth	r3, r3
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	b29a      	uxth	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	0011      	movs	r1, r2
 800281e:	0018      	movs	r0, r3
 8002820:	f000 f8dc 	bl	80029dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002824:	e0be      	b.n	80029a4 <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2258      	movs	r2, #88	; 0x58
 800282a:	5a99      	ldrh	r1, [r3, r2]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	225a      	movs	r2, #90	; 0x5a
 8002830:	5a9b      	ldrh	r3, [r3, r2]
 8002832:	b29a      	uxth	r2, r3
 8002834:	208e      	movs	r0, #142	; 0x8e
 8002836:	183b      	adds	r3, r7, r0
 8002838:	1a8a      	subs	r2, r1, r2
 800283a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	225a      	movs	r2, #90	; 0x5a
 8002840:	5a9b      	ldrh	r3, [r3, r2]
 8002842:	b29b      	uxth	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d100      	bne.n	800284a <HAL_UART_IRQHandler+0x442>
 8002848:	e0ae      	b.n	80029a8 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 800284a:	183b      	adds	r3, r7, r0
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d100      	bne.n	8002854 <HAL_UART_IRQHandler+0x44c>
 8002852:	e0a9      	b.n	80029a8 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002854:	f3ef 8310 	mrs	r3, PRIMASK
 8002858:	60fb      	str	r3, [r7, #12]
  return(result);
 800285a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800285c:	2488      	movs	r4, #136	; 0x88
 800285e:	193a      	adds	r2, r7, r4
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	2301      	movs	r3, #1
 8002864:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	f383 8810 	msr	PRIMASK, r3
}
 800286c:	46c0      	nop			; (mov r8, r8)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	494f      	ldr	r1, [pc, #316]	; (80029b8 <HAL_UART_IRQHandler+0x5b0>)
 800287a:	400a      	ands	r2, r1
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	193b      	adds	r3, r7, r4
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	f383 8810 	msr	PRIMASK, r3
}
 800288a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800288c:	f3ef 8310 	mrs	r3, PRIMASK
 8002890:	61bb      	str	r3, [r7, #24]
  return(result);
 8002892:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002894:	2484      	movs	r4, #132	; 0x84
 8002896:	193a      	adds	r2, r7, r4
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	2301      	movs	r3, #1
 800289c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	f383 8810 	msr	PRIMASK, r3
}
 80028a4:	46c0      	nop			; (mov r8, r8)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2101      	movs	r1, #1
 80028b2:	438a      	bics	r2, r1
 80028b4:	609a      	str	r2, [r3, #8]
 80028b6:	193b      	adds	r3, r7, r4
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	f383 8810 	msr	PRIMASK, r3
}
 80028c2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2220      	movs	r2, #32
 80028c8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028d6:	f3ef 8310 	mrs	r3, PRIMASK
 80028da:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028de:	2480      	movs	r4, #128	; 0x80
 80028e0:	193a      	adds	r2, r7, r4
 80028e2:	6013      	str	r3, [r2, #0]
 80028e4:	2301      	movs	r3, #1
 80028e6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ea:	f383 8810 	msr	PRIMASK, r3
}
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2110      	movs	r1, #16
 80028fc:	438a      	bics	r2, r1
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	193b      	adds	r3, r7, r4
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002908:	f383 8810 	msr	PRIMASK, r3
}
 800290c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800290e:	183b      	adds	r3, r7, r0
 8002910:	881a      	ldrh	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	0011      	movs	r1, r2
 8002916:	0018      	movs	r0, r3
 8002918:	f000 f860 	bl	80029dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800291c:	e044      	b.n	80029a8 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800291e:	23a4      	movs	r3, #164	; 0xa4
 8002920:	18fb      	adds	r3, r7, r3
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	2380      	movs	r3, #128	; 0x80
 8002926:	035b      	lsls	r3, r3, #13
 8002928:	4013      	ands	r3, r2
 800292a:	d010      	beq.n	800294e <HAL_UART_IRQHandler+0x546>
 800292c:	239c      	movs	r3, #156	; 0x9c
 800292e:	18fb      	adds	r3, r7, r3
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	2380      	movs	r3, #128	; 0x80
 8002934:	03db      	lsls	r3, r3, #15
 8002936:	4013      	ands	r3, r2
 8002938:	d009      	beq.n	800294e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2280      	movs	r2, #128	; 0x80
 8002940:	0352      	lsls	r2, r2, #13
 8002942:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	0018      	movs	r0, r3
 8002948:	f000 ff1a 	bl	8003780 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800294c:	e02f      	b.n	80029ae <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800294e:	23a4      	movs	r3, #164	; 0xa4
 8002950:	18fb      	adds	r3, r7, r3
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2280      	movs	r2, #128	; 0x80
 8002956:	4013      	ands	r3, r2
 8002958:	d00f      	beq.n	800297a <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800295a:	23a0      	movs	r3, #160	; 0xa0
 800295c:	18fb      	adds	r3, r7, r3
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2280      	movs	r2, #128	; 0x80
 8002962:	4013      	ands	r3, r2
 8002964:	d009      	beq.n	800297a <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800296a:	2b00      	cmp	r3, #0
 800296c:	d01e      	beq.n	80029ac <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	0010      	movs	r0, r2
 8002976:	4798      	blx	r3
    }
    return;
 8002978:	e018      	b.n	80029ac <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800297a:	23a4      	movs	r3, #164	; 0xa4
 800297c:	18fb      	adds	r3, r7, r3
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2240      	movs	r2, #64	; 0x40
 8002982:	4013      	ands	r3, r2
 8002984:	d013      	beq.n	80029ae <HAL_UART_IRQHandler+0x5a6>
 8002986:	23a0      	movs	r3, #160	; 0xa0
 8002988:	18fb      	adds	r3, r7, r3
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2240      	movs	r2, #64	; 0x40
 800298e:	4013      	ands	r3, r2
 8002990:	d00d      	beq.n	80029ae <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	0018      	movs	r0, r3
 8002996:	f000 fd60 	bl	800345a <UART_EndTransmit_IT>
    return;
 800299a:	e008      	b.n	80029ae <HAL_UART_IRQHandler+0x5a6>
      return;
 800299c:	46c0      	nop			; (mov r8, r8)
 800299e:	e006      	b.n	80029ae <HAL_UART_IRQHandler+0x5a6>
    return;
 80029a0:	46c0      	nop			; (mov r8, r8)
 80029a2:	e004      	b.n	80029ae <HAL_UART_IRQHandler+0x5a6>
      return;
 80029a4:	46c0      	nop			; (mov r8, r8)
 80029a6:	e002      	b.n	80029ae <HAL_UART_IRQHandler+0x5a6>
      return;
 80029a8:	46c0      	nop			; (mov r8, r8)
 80029aa:	e000      	b.n	80029ae <HAL_UART_IRQHandler+0x5a6>
    return;
 80029ac:	46c0      	nop			; (mov r8, r8)
  }

}
 80029ae:	46bd      	mov	sp, r7
 80029b0:	b02b      	add	sp, #172	; 0xac
 80029b2:	bd90      	pop	{r4, r7, pc}
 80029b4:	fffffeff 	.word	0xfffffeff
 80029b8:	fffffedf 	.word	0xfffffedf

080029bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80029c4:	46c0      	nop			; (mov r8, r8)
 80029c6:	46bd      	mov	sp, r7
 80029c8:	b002      	add	sp, #8
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80029d4:	46c0      	nop			; (mov r8, r8)
 80029d6:	46bd      	mov	sp, r7
 80029d8:	b002      	add	sp, #8
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	000a      	movs	r2, r1
 80029e6:	1cbb      	adds	r3, r7, #2
 80029e8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b002      	add	sp, #8
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029f4:	b5b0      	push	{r4, r5, r7, lr}
 80029f6:	b08e      	sub	sp, #56	; 0x38
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80029fc:	231a      	movs	r3, #26
 80029fe:	2218      	movs	r2, #24
 8002a00:	189b      	adds	r3, r3, r2
 8002a02:	19db      	adds	r3, r3, r7
 8002a04:	2200      	movs	r2, #0
 8002a06:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	431a      	orrs	r2, r3
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	431a      	orrs	r2, r3
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	69db      	ldr	r3, [r3, #28]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4ab4      	ldr	r2, [pc, #720]	; (8002cf8 <UART_SetConfig+0x304>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	0019      	movs	r1, r3
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a32:	430a      	orrs	r2, r1
 8002a34:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	4aaf      	ldr	r2, [pc, #700]	; (8002cfc <UART_SetConfig+0x308>)
 8002a3e:	4013      	ands	r3, r2
 8002a40:	0019      	movs	r1, r3
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4aa9      	ldr	r2, [pc, #676]	; (8002d00 <UART_SetConfig+0x30c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d004      	beq.n	8002a68 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a64:	4313      	orrs	r3, r2
 8002a66:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	4aa5      	ldr	r2, [pc, #660]	; (8002d04 <UART_SetConfig+0x310>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	0019      	movs	r1, r3
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4aa1      	ldr	r2, [pc, #644]	; (8002d08 <UART_SetConfig+0x314>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d131      	bne.n	8002aec <UART_SetConfig+0xf8>
 8002a88:	4ba0      	ldr	r3, [pc, #640]	; (8002d0c <UART_SetConfig+0x318>)
 8002a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8c:	220c      	movs	r2, #12
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2b0c      	cmp	r3, #12
 8002a92:	d01d      	beq.n	8002ad0 <UART_SetConfig+0xdc>
 8002a94:	d823      	bhi.n	8002ade <UART_SetConfig+0xea>
 8002a96:	2b08      	cmp	r3, #8
 8002a98:	d00c      	beq.n	8002ab4 <UART_SetConfig+0xc0>
 8002a9a:	d820      	bhi.n	8002ade <UART_SetConfig+0xea>
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d002      	beq.n	8002aa6 <UART_SetConfig+0xb2>
 8002aa0:	2b04      	cmp	r3, #4
 8002aa2:	d00e      	beq.n	8002ac2 <UART_SetConfig+0xce>
 8002aa4:	e01b      	b.n	8002ade <UART_SetConfig+0xea>
 8002aa6:	231b      	movs	r3, #27
 8002aa8:	2218      	movs	r2, #24
 8002aaa:	189b      	adds	r3, r3, r2
 8002aac:	19db      	adds	r3, r3, r7
 8002aae:	2200      	movs	r2, #0
 8002ab0:	701a      	strb	r2, [r3, #0]
 8002ab2:	e065      	b.n	8002b80 <UART_SetConfig+0x18c>
 8002ab4:	231b      	movs	r3, #27
 8002ab6:	2218      	movs	r2, #24
 8002ab8:	189b      	adds	r3, r3, r2
 8002aba:	19db      	adds	r3, r3, r7
 8002abc:	2202      	movs	r2, #2
 8002abe:	701a      	strb	r2, [r3, #0]
 8002ac0:	e05e      	b.n	8002b80 <UART_SetConfig+0x18c>
 8002ac2:	231b      	movs	r3, #27
 8002ac4:	2218      	movs	r2, #24
 8002ac6:	189b      	adds	r3, r3, r2
 8002ac8:	19db      	adds	r3, r3, r7
 8002aca:	2204      	movs	r2, #4
 8002acc:	701a      	strb	r2, [r3, #0]
 8002ace:	e057      	b.n	8002b80 <UART_SetConfig+0x18c>
 8002ad0:	231b      	movs	r3, #27
 8002ad2:	2218      	movs	r2, #24
 8002ad4:	189b      	adds	r3, r3, r2
 8002ad6:	19db      	adds	r3, r3, r7
 8002ad8:	2208      	movs	r2, #8
 8002ada:	701a      	strb	r2, [r3, #0]
 8002adc:	e050      	b.n	8002b80 <UART_SetConfig+0x18c>
 8002ade:	231b      	movs	r3, #27
 8002ae0:	2218      	movs	r2, #24
 8002ae2:	189b      	adds	r3, r3, r2
 8002ae4:	19db      	adds	r3, r3, r7
 8002ae6:	2210      	movs	r2, #16
 8002ae8:	701a      	strb	r2, [r3, #0]
 8002aea:	e049      	b.n	8002b80 <UART_SetConfig+0x18c>
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a83      	ldr	r2, [pc, #524]	; (8002d00 <UART_SetConfig+0x30c>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d13e      	bne.n	8002b74 <UART_SetConfig+0x180>
 8002af6:	4b85      	ldr	r3, [pc, #532]	; (8002d0c <UART_SetConfig+0x318>)
 8002af8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002afa:	23c0      	movs	r3, #192	; 0xc0
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	4013      	ands	r3, r2
 8002b00:	22c0      	movs	r2, #192	; 0xc0
 8002b02:	0112      	lsls	r2, r2, #4
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d027      	beq.n	8002b58 <UART_SetConfig+0x164>
 8002b08:	22c0      	movs	r2, #192	; 0xc0
 8002b0a:	0112      	lsls	r2, r2, #4
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d82a      	bhi.n	8002b66 <UART_SetConfig+0x172>
 8002b10:	2280      	movs	r2, #128	; 0x80
 8002b12:	0112      	lsls	r2, r2, #4
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d011      	beq.n	8002b3c <UART_SetConfig+0x148>
 8002b18:	2280      	movs	r2, #128	; 0x80
 8002b1a:	0112      	lsls	r2, r2, #4
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d822      	bhi.n	8002b66 <UART_SetConfig+0x172>
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d004      	beq.n	8002b2e <UART_SetConfig+0x13a>
 8002b24:	2280      	movs	r2, #128	; 0x80
 8002b26:	00d2      	lsls	r2, r2, #3
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d00e      	beq.n	8002b4a <UART_SetConfig+0x156>
 8002b2c:	e01b      	b.n	8002b66 <UART_SetConfig+0x172>
 8002b2e:	231b      	movs	r3, #27
 8002b30:	2218      	movs	r2, #24
 8002b32:	189b      	adds	r3, r3, r2
 8002b34:	19db      	adds	r3, r3, r7
 8002b36:	2200      	movs	r2, #0
 8002b38:	701a      	strb	r2, [r3, #0]
 8002b3a:	e021      	b.n	8002b80 <UART_SetConfig+0x18c>
 8002b3c:	231b      	movs	r3, #27
 8002b3e:	2218      	movs	r2, #24
 8002b40:	189b      	adds	r3, r3, r2
 8002b42:	19db      	adds	r3, r3, r7
 8002b44:	2202      	movs	r2, #2
 8002b46:	701a      	strb	r2, [r3, #0]
 8002b48:	e01a      	b.n	8002b80 <UART_SetConfig+0x18c>
 8002b4a:	231b      	movs	r3, #27
 8002b4c:	2218      	movs	r2, #24
 8002b4e:	189b      	adds	r3, r3, r2
 8002b50:	19db      	adds	r3, r3, r7
 8002b52:	2204      	movs	r2, #4
 8002b54:	701a      	strb	r2, [r3, #0]
 8002b56:	e013      	b.n	8002b80 <UART_SetConfig+0x18c>
 8002b58:	231b      	movs	r3, #27
 8002b5a:	2218      	movs	r2, #24
 8002b5c:	189b      	adds	r3, r3, r2
 8002b5e:	19db      	adds	r3, r3, r7
 8002b60:	2208      	movs	r2, #8
 8002b62:	701a      	strb	r2, [r3, #0]
 8002b64:	e00c      	b.n	8002b80 <UART_SetConfig+0x18c>
 8002b66:	231b      	movs	r3, #27
 8002b68:	2218      	movs	r2, #24
 8002b6a:	189b      	adds	r3, r3, r2
 8002b6c:	19db      	adds	r3, r3, r7
 8002b6e:	2210      	movs	r2, #16
 8002b70:	701a      	strb	r2, [r3, #0]
 8002b72:	e005      	b.n	8002b80 <UART_SetConfig+0x18c>
 8002b74:	231b      	movs	r3, #27
 8002b76:	2218      	movs	r2, #24
 8002b78:	189b      	adds	r3, r3, r2
 8002b7a:	19db      	adds	r3, r3, r7
 8002b7c:	2210      	movs	r2, #16
 8002b7e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a5e      	ldr	r2, [pc, #376]	; (8002d00 <UART_SetConfig+0x30c>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d000      	beq.n	8002b8c <UART_SetConfig+0x198>
 8002b8a:	e084      	b.n	8002c96 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b8c:	231b      	movs	r3, #27
 8002b8e:	2218      	movs	r2, #24
 8002b90:	189b      	adds	r3, r3, r2
 8002b92:	19db      	adds	r3, r3, r7
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d01d      	beq.n	8002bd6 <UART_SetConfig+0x1e2>
 8002b9a:	dc20      	bgt.n	8002bde <UART_SetConfig+0x1ea>
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d015      	beq.n	8002bcc <UART_SetConfig+0x1d8>
 8002ba0:	dc1d      	bgt.n	8002bde <UART_SetConfig+0x1ea>
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d002      	beq.n	8002bac <UART_SetConfig+0x1b8>
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d005      	beq.n	8002bb6 <UART_SetConfig+0x1c2>
 8002baa:	e018      	b.n	8002bde <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bac:	f7ff f8ec 	bl	8001d88 <HAL_RCC_GetPCLK1Freq>
 8002bb0:	0003      	movs	r3, r0
 8002bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bb4:	e01c      	b.n	8002bf0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bb6:	4b55      	ldr	r3, [pc, #340]	; (8002d0c <UART_SetConfig+0x318>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2210      	movs	r2, #16
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d002      	beq.n	8002bc6 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002bc0:	4b53      	ldr	r3, [pc, #332]	; (8002d10 <UART_SetConfig+0x31c>)
 8002bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002bc4:	e014      	b.n	8002bf0 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8002bc6:	4b53      	ldr	r3, [pc, #332]	; (8002d14 <UART_SetConfig+0x320>)
 8002bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bca:	e011      	b.n	8002bf0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bcc:	f7ff f82c 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 8002bd0:	0003      	movs	r3, r0
 8002bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bd4:	e00c      	b.n	8002bf0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bd6:	2380      	movs	r3, #128	; 0x80
 8002bd8:	021b      	lsls	r3, r3, #8
 8002bda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bdc:	e008      	b.n	8002bf0 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002be2:	231a      	movs	r3, #26
 8002be4:	2218      	movs	r2, #24
 8002be6:	189b      	adds	r3, r3, r2
 8002be8:	19db      	adds	r3, r3, r7
 8002bea:	2201      	movs	r2, #1
 8002bec:	701a      	strb	r2, [r3, #0]
        break;
 8002bee:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d100      	bne.n	8002bf8 <UART_SetConfig+0x204>
 8002bf6:	e130      	b.n	8002e5a <UART_SetConfig+0x466>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	0013      	movs	r3, r2
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	189b      	adds	r3, r3, r2
 8002c02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d305      	bcc.n	8002c14 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d906      	bls.n	8002c22 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8002c14:	231a      	movs	r3, #26
 8002c16:	2218      	movs	r2, #24
 8002c18:	189b      	adds	r3, r3, r2
 8002c1a:	19db      	adds	r3, r3, r7
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	701a      	strb	r2, [r3, #0]
 8002c20:	e11b      	b.n	8002e5a <UART_SetConfig+0x466>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	2300      	movs	r3, #0
 8002c28:	617b      	str	r3, [r7, #20]
 8002c2a:	6939      	ldr	r1, [r7, #16]
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	000b      	movs	r3, r1
 8002c30:	0e1b      	lsrs	r3, r3, #24
 8002c32:	0010      	movs	r0, r2
 8002c34:	0205      	lsls	r5, r0, #8
 8002c36:	431d      	orrs	r5, r3
 8002c38:	000b      	movs	r3, r1
 8002c3a:	021c      	lsls	r4, r3, #8
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	085b      	lsrs	r3, r3, #1
 8002c42:	60bb      	str	r3, [r7, #8]
 8002c44:	2300      	movs	r3, #0
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	68b8      	ldr	r0, [r7, #8]
 8002c4a:	68f9      	ldr	r1, [r7, #12]
 8002c4c:	1900      	adds	r0, r0, r4
 8002c4e:	4169      	adcs	r1, r5
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	603b      	str	r3, [r7, #0]
 8002c56:	2300      	movs	r3, #0
 8002c58:	607b      	str	r3, [r7, #4]
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f7fd fadf 	bl	8000220 <__aeabi_uldivmod>
 8002c62:	0002      	movs	r2, r0
 8002c64:	000b      	movs	r3, r1
 8002c66:	0013      	movs	r3, r2
 8002c68:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c6c:	23c0      	movs	r3, #192	; 0xc0
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d309      	bcc.n	8002c88 <UART_SetConfig+0x294>
 8002c74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c76:	2380      	movs	r3, #128	; 0x80
 8002c78:	035b      	lsls	r3, r3, #13
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d204      	bcs.n	8002c88 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c84:	60da      	str	r2, [r3, #12]
 8002c86:	e0e8      	b.n	8002e5a <UART_SetConfig+0x466>
        }
        else
        {
          ret = HAL_ERROR;
 8002c88:	231a      	movs	r3, #26
 8002c8a:	2218      	movs	r2, #24
 8002c8c:	189b      	adds	r3, r3, r2
 8002c8e:	19db      	adds	r3, r3, r7
 8002c90:	2201      	movs	r2, #1
 8002c92:	701a      	strb	r2, [r3, #0]
 8002c94:	e0e1      	b.n	8002e5a <UART_SetConfig+0x466>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	69da      	ldr	r2, [r3, #28]
 8002c9a:	2380      	movs	r3, #128	; 0x80
 8002c9c:	021b      	lsls	r3, r3, #8
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d000      	beq.n	8002ca4 <UART_SetConfig+0x2b0>
 8002ca2:	e083      	b.n	8002dac <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 8002ca4:	231b      	movs	r3, #27
 8002ca6:	2218      	movs	r2, #24
 8002ca8:	189b      	adds	r3, r3, r2
 8002caa:	19db      	adds	r3, r3, r7
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d834      	bhi.n	8002d1c <UART_SetConfig+0x328>
 8002cb2:	009a      	lsls	r2, r3, #2
 8002cb4:	4b18      	ldr	r3, [pc, #96]	; (8002d18 <UART_SetConfig+0x324>)
 8002cb6:	18d3      	adds	r3, r2, r3
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cbc:	f7ff f864 	bl	8001d88 <HAL_RCC_GetPCLK1Freq>
 8002cc0:	0003      	movs	r3, r0
 8002cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cc4:	e033      	b.n	8002d2e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cc6:	f7ff f875 	bl	8001db4 <HAL_RCC_GetPCLK2Freq>
 8002cca:	0003      	movs	r3, r0
 8002ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cce:	e02e      	b.n	8002d2e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002cd0:	4b0e      	ldr	r3, [pc, #56]	; (8002d0c <UART_SetConfig+0x318>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2210      	movs	r2, #16
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d002      	beq.n	8002ce0 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002cda:	4b0d      	ldr	r3, [pc, #52]	; (8002d10 <UART_SetConfig+0x31c>)
 8002cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002cde:	e026      	b.n	8002d2e <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <UART_SetConfig+0x320>)
 8002ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ce4:	e023      	b.n	8002d2e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ce6:	f7fe ff9f 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 8002cea:	0003      	movs	r3, r0
 8002cec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cee:	e01e      	b.n	8002d2e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	021b      	lsls	r3, r3, #8
 8002cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cf6:	e01a      	b.n	8002d2e <UART_SetConfig+0x33a>
 8002cf8:	efff69f3 	.word	0xefff69f3
 8002cfc:	ffffcfff 	.word	0xffffcfff
 8002d00:	40004800 	.word	0x40004800
 8002d04:	fffff4ff 	.word	0xfffff4ff
 8002d08:	40004400 	.word	0x40004400
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	003d0900 	.word	0x003d0900
 8002d14:	00f42400 	.word	0x00f42400
 8002d18:	080038dc 	.word	0x080038dc
      default:
        pclk = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002d20:	231a      	movs	r3, #26
 8002d22:	2218      	movs	r2, #24
 8002d24:	189b      	adds	r3, r3, r2
 8002d26:	19db      	adds	r3, r3, r7
 8002d28:	2201      	movs	r2, #1
 8002d2a:	701a      	strb	r2, [r3, #0]
        break;
 8002d2c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d100      	bne.n	8002d36 <UART_SetConfig+0x342>
 8002d34:	e091      	b.n	8002e5a <UART_SetConfig+0x466>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d38:	005a      	lsls	r2, r3, #1
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	085b      	lsrs	r3, r3, #1
 8002d40:	18d2      	adds	r2, r2, r3
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	0019      	movs	r1, r3
 8002d48:	0010      	movs	r0, r2
 8002d4a:	f7fd f9dd 	bl	8000108 <__udivsi3>
 8002d4e:	0003      	movs	r3, r0
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d56:	2b0f      	cmp	r3, #15
 8002d58:	d921      	bls.n	8002d9e <UART_SetConfig+0x3aa>
 8002d5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d5c:	2380      	movs	r3, #128	; 0x80
 8002d5e:	025b      	lsls	r3, r3, #9
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d21c      	bcs.n	8002d9e <UART_SetConfig+0x3aa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	200e      	movs	r0, #14
 8002d6a:	2418      	movs	r4, #24
 8002d6c:	1903      	adds	r3, r0, r4
 8002d6e:	19db      	adds	r3, r3, r7
 8002d70:	210f      	movs	r1, #15
 8002d72:	438a      	bics	r2, r1
 8002d74:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d78:	085b      	lsrs	r3, r3, #1
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	2207      	movs	r2, #7
 8002d7e:	4013      	ands	r3, r2
 8002d80:	b299      	uxth	r1, r3
 8002d82:	1903      	adds	r3, r0, r4
 8002d84:	19db      	adds	r3, r3, r7
 8002d86:	1902      	adds	r2, r0, r4
 8002d88:	19d2      	adds	r2, r2, r7
 8002d8a:	8812      	ldrh	r2, [r2, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	1902      	adds	r2, r0, r4
 8002d96:	19d2      	adds	r2, r2, r7
 8002d98:	8812      	ldrh	r2, [r2, #0]
 8002d9a:	60da      	str	r2, [r3, #12]
 8002d9c:	e05d      	b.n	8002e5a <UART_SetConfig+0x466>
      }
      else
      {
        ret = HAL_ERROR;
 8002d9e:	231a      	movs	r3, #26
 8002da0:	2218      	movs	r2, #24
 8002da2:	189b      	adds	r3, r3, r2
 8002da4:	19db      	adds	r3, r3, r7
 8002da6:	2201      	movs	r2, #1
 8002da8:	701a      	strb	r2, [r3, #0]
 8002daa:	e056      	b.n	8002e5a <UART_SetConfig+0x466>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002dac:	231b      	movs	r3, #27
 8002dae:	2218      	movs	r2, #24
 8002db0:	189b      	adds	r3, r3, r2
 8002db2:	19db      	adds	r3, r3, r7
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d822      	bhi.n	8002e00 <UART_SetConfig+0x40c>
 8002dba:	009a      	lsls	r2, r3, #2
 8002dbc:	4b2e      	ldr	r3, [pc, #184]	; (8002e78 <UART_SetConfig+0x484>)
 8002dbe:	18d3      	adds	r3, r2, r3
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dc4:	f7fe ffe0 	bl	8001d88 <HAL_RCC_GetPCLK1Freq>
 8002dc8:	0003      	movs	r3, r0
 8002dca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002dcc:	e021      	b.n	8002e12 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002dce:	f7fe fff1 	bl	8001db4 <HAL_RCC_GetPCLK2Freq>
 8002dd2:	0003      	movs	r3, r0
 8002dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002dd6:	e01c      	b.n	8002e12 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002dd8:	4b28      	ldr	r3, [pc, #160]	; (8002e7c <UART_SetConfig+0x488>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2210      	movs	r2, #16
 8002dde:	4013      	ands	r3, r2
 8002de0:	d002      	beq.n	8002de8 <UART_SetConfig+0x3f4>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002de2:	4b27      	ldr	r3, [pc, #156]	; (8002e80 <UART_SetConfig+0x48c>)
 8002de4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002de6:	e014      	b.n	8002e12 <UART_SetConfig+0x41e>
          pclk = (uint32_t) HSI_VALUE;
 8002de8:	4b26      	ldr	r3, [pc, #152]	; (8002e84 <UART_SetConfig+0x490>)
 8002dea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002dec:	e011      	b.n	8002e12 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dee:	f7fe ff1b 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 8002df2:	0003      	movs	r3, r0
 8002df4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002df6:	e00c      	b.n	8002e12 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002df8:	2380      	movs	r3, #128	; 0x80
 8002dfa:	021b      	lsls	r3, r3, #8
 8002dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002dfe:	e008      	b.n	8002e12 <UART_SetConfig+0x41e>
      default:
        pclk = 0U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002e04:	231a      	movs	r3, #26
 8002e06:	2218      	movs	r2, #24
 8002e08:	189b      	adds	r3, r3, r2
 8002e0a:	19db      	adds	r3, r3, r7
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	701a      	strb	r2, [r3, #0]
        break;
 8002e10:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d020      	beq.n	8002e5a <UART_SetConfig+0x466>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	085a      	lsrs	r2, r3, #1
 8002e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e20:	18d2      	adds	r2, r2, r3
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	0019      	movs	r1, r3
 8002e28:	0010      	movs	r0, r2
 8002e2a:	f7fd f96d 	bl	8000108 <__udivsi3>
 8002e2e:	0003      	movs	r3, r0
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e36:	2b0f      	cmp	r3, #15
 8002e38:	d909      	bls.n	8002e4e <UART_SetConfig+0x45a>
 8002e3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e3c:	2380      	movs	r3, #128	; 0x80
 8002e3e:	025b      	lsls	r3, r3, #9
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d204      	bcs.n	8002e4e <UART_SetConfig+0x45a>
      {
        huart->Instance->BRR = usartdiv;
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e4a:	60da      	str	r2, [r3, #12]
 8002e4c:	e005      	b.n	8002e5a <UART_SetConfig+0x466>
      }
      else
      {
        ret = HAL_ERROR;
 8002e4e:	231a      	movs	r3, #26
 8002e50:	2218      	movs	r2, #24
 8002e52:	189b      	adds	r3, r3, r2
 8002e54:	19db      	adds	r3, r3, r7
 8002e56:	2201      	movs	r2, #1
 8002e58:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	2200      	movs	r2, #0
 8002e64:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002e66:	231a      	movs	r3, #26
 8002e68:	2218      	movs	r2, #24
 8002e6a:	189b      	adds	r3, r3, r2
 8002e6c:	19db      	adds	r3, r3, r7
 8002e6e:	781b      	ldrb	r3, [r3, #0]
}
 8002e70:	0018      	movs	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b00e      	add	sp, #56	; 0x38
 8002e76:	bdb0      	pop	{r4, r5, r7, pc}
 8002e78:	08003900 	.word	0x08003900
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	003d0900 	.word	0x003d0900
 8002e84:	00f42400 	.word	0x00f42400

08002e88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	2201      	movs	r2, #1
 8002e96:	4013      	ands	r3, r2
 8002e98:	d00b      	beq.n	8002eb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	4a4a      	ldr	r2, [pc, #296]	; (8002fcc <UART_AdvFeatureConfig+0x144>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	0019      	movs	r1, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	4013      	ands	r3, r2
 8002eba:	d00b      	beq.n	8002ed4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	4a43      	ldr	r2, [pc, #268]	; (8002fd0 <UART_AdvFeatureConfig+0x148>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	0019      	movs	r1, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	2204      	movs	r2, #4
 8002eda:	4013      	ands	r3, r2
 8002edc:	d00b      	beq.n	8002ef6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	4a3b      	ldr	r2, [pc, #236]	; (8002fd4 <UART_AdvFeatureConfig+0x14c>)
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	0019      	movs	r1, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	2208      	movs	r2, #8
 8002efc:	4013      	ands	r3, r2
 8002efe:	d00b      	beq.n	8002f18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	4a34      	ldr	r2, [pc, #208]	; (8002fd8 <UART_AdvFeatureConfig+0x150>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	0019      	movs	r1, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	2210      	movs	r2, #16
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d00b      	beq.n	8002f3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	4a2c      	ldr	r2, [pc, #176]	; (8002fdc <UART_AdvFeatureConfig+0x154>)
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	0019      	movs	r1, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	2220      	movs	r2, #32
 8002f40:	4013      	ands	r3, r2
 8002f42:	d00b      	beq.n	8002f5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	4a25      	ldr	r2, [pc, #148]	; (8002fe0 <UART_AdvFeatureConfig+0x158>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	0019      	movs	r1, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f60:	2240      	movs	r2, #64	; 0x40
 8002f62:	4013      	ands	r3, r2
 8002f64:	d01d      	beq.n	8002fa2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	4a1d      	ldr	r2, [pc, #116]	; (8002fe4 <UART_AdvFeatureConfig+0x15c>)
 8002f6e:	4013      	ands	r3, r2
 8002f70:	0019      	movs	r1, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f82:	2380      	movs	r3, #128	; 0x80
 8002f84:	035b      	lsls	r3, r3, #13
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d10b      	bne.n	8002fa2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	4a15      	ldr	r2, [pc, #84]	; (8002fe8 <UART_AdvFeatureConfig+0x160>)
 8002f92:	4013      	ands	r3, r2
 8002f94:	0019      	movs	r1, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	2280      	movs	r2, #128	; 0x80
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d00b      	beq.n	8002fc4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	4a0e      	ldr	r2, [pc, #56]	; (8002fec <UART_AdvFeatureConfig+0x164>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	0019      	movs	r1, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	605a      	str	r2, [r3, #4]
  }
}
 8002fc4:	46c0      	nop			; (mov r8, r8)
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	b002      	add	sp, #8
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	fffdffff 	.word	0xfffdffff
 8002fd0:	fffeffff 	.word	0xfffeffff
 8002fd4:	fffbffff 	.word	0xfffbffff
 8002fd8:	ffff7fff 	.word	0xffff7fff
 8002fdc:	ffffefff 	.word	0xffffefff
 8002fe0:	ffffdfff 	.word	0xffffdfff
 8002fe4:	ffefffff 	.word	0xffefffff
 8002fe8:	ff9fffff 	.word	0xff9fffff
 8002fec:	fff7ffff 	.word	0xfff7ffff

08002ff0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af02      	add	r7, sp, #8
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2280      	movs	r2, #128	; 0x80
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003000:	f7fd fe36 	bl	8000c70 <HAL_GetTick>
 8003004:	0003      	movs	r3, r0
 8003006:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2208      	movs	r2, #8
 8003010:	4013      	ands	r3, r2
 8003012:	2b08      	cmp	r3, #8
 8003014:	d10c      	bne.n	8003030 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2280      	movs	r2, #128	; 0x80
 800301a:	0391      	lsls	r1, r2, #14
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	4a17      	ldr	r2, [pc, #92]	; (800307c <UART_CheckIdleState+0x8c>)
 8003020:	9200      	str	r2, [sp, #0]
 8003022:	2200      	movs	r2, #0
 8003024:	f000 f82c 	bl	8003080 <UART_WaitOnFlagUntilTimeout>
 8003028:	1e03      	subs	r3, r0, #0
 800302a:	d001      	beq.n	8003030 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e021      	b.n	8003074 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2204      	movs	r2, #4
 8003038:	4013      	ands	r3, r2
 800303a:	2b04      	cmp	r3, #4
 800303c:	d10c      	bne.n	8003058 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2280      	movs	r2, #128	; 0x80
 8003042:	03d1      	lsls	r1, r2, #15
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	4a0d      	ldr	r2, [pc, #52]	; (800307c <UART_CheckIdleState+0x8c>)
 8003048:	9200      	str	r2, [sp, #0]
 800304a:	2200      	movs	r2, #0
 800304c:	f000 f818 	bl	8003080 <UART_WaitOnFlagUntilTimeout>
 8003050:	1e03      	subs	r3, r0, #0
 8003052:	d001      	beq.n	8003058 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e00d      	b.n	8003074 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2220      	movs	r2, #32
 800305c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2220      	movs	r2, #32
 8003062:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2274      	movs	r2, #116	; 0x74
 800306e:	2100      	movs	r1, #0
 8003070:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	0018      	movs	r0, r3
 8003076:	46bd      	mov	sp, r7
 8003078:	b004      	add	sp, #16
 800307a:	bd80      	pop	{r7, pc}
 800307c:	01ffffff 	.word	0x01ffffff

08003080 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b094      	sub	sp, #80	; 0x50
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	603b      	str	r3, [r7, #0]
 800308c:	1dfb      	adds	r3, r7, #7
 800308e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003090:	e0a3      	b.n	80031da <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003092:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003094:	3301      	adds	r3, #1
 8003096:	d100      	bne.n	800309a <UART_WaitOnFlagUntilTimeout+0x1a>
 8003098:	e09f      	b.n	80031da <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800309a:	f7fd fde9 	bl	8000c70 <HAL_GetTick>
 800309e:	0002      	movs	r2, r0
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d302      	bcc.n	80030b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80030aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d13d      	bne.n	800312c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030b0:	f3ef 8310 	mrs	r3, PRIMASK
 80030b4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80030b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030b8:	647b      	str	r3, [r7, #68]	; 0x44
 80030ba:	2301      	movs	r3, #1
 80030bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c0:	f383 8810 	msr	PRIMASK, r3
}
 80030c4:	46c0      	nop			; (mov r8, r8)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	494c      	ldr	r1, [pc, #304]	; (8003204 <UART_WaitOnFlagUntilTimeout+0x184>)
 80030d2:	400a      	ands	r2, r1
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030d8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030dc:	f383 8810 	msr	PRIMASK, r3
}
 80030e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030e2:	f3ef 8310 	mrs	r3, PRIMASK
 80030e6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80030e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ea:	643b      	str	r3, [r7, #64]	; 0x40
 80030ec:	2301      	movs	r3, #1
 80030ee:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f2:	f383 8810 	msr	PRIMASK, r3
}
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689a      	ldr	r2, [r3, #8]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2101      	movs	r1, #1
 8003104:	438a      	bics	r2, r1
 8003106:	609a      	str	r2, [r3, #8]
 8003108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800310a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800310c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800310e:	f383 8810 	msr	PRIMASK, r3
}
 8003112:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2220      	movs	r2, #32
 8003118:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2220      	movs	r2, #32
 800311e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2274      	movs	r2, #116	; 0x74
 8003124:	2100      	movs	r1, #0
 8003126:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e067      	b.n	80031fc <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2204      	movs	r2, #4
 8003134:	4013      	ands	r3, r2
 8003136:	d050      	beq.n	80031da <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	69da      	ldr	r2, [r3, #28]
 800313e:	2380      	movs	r3, #128	; 0x80
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	401a      	ands	r2, r3
 8003144:	2380      	movs	r3, #128	; 0x80
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	429a      	cmp	r2, r3
 800314a:	d146      	bne.n	80031da <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2280      	movs	r2, #128	; 0x80
 8003152:	0112      	lsls	r2, r2, #4
 8003154:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003156:	f3ef 8310 	mrs	r3, PRIMASK
 800315a:	613b      	str	r3, [r7, #16]
  return(result);
 800315c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800315e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003160:	2301      	movs	r3, #1
 8003162:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f383 8810 	msr	PRIMASK, r3
}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4923      	ldr	r1, [pc, #140]	; (8003204 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003178:	400a      	ands	r2, r1
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800317e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	f383 8810 	msr	PRIMASK, r3
}
 8003186:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003188:	f3ef 8310 	mrs	r3, PRIMASK
 800318c:	61fb      	str	r3, [r7, #28]
  return(result);
 800318e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003190:	64bb      	str	r3, [r7, #72]	; 0x48
 8003192:	2301      	movs	r3, #1
 8003194:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	f383 8810 	msr	PRIMASK, r3
}
 800319c:	46c0      	nop			; (mov r8, r8)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2101      	movs	r1, #1
 80031aa:	438a      	bics	r2, r1
 80031ac:	609a      	str	r2, [r3, #8]
 80031ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031b0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	f383 8810 	msr	PRIMASK, r3
}
 80031b8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2220      	movs	r2, #32
 80031be:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2220      	movs	r2, #32
 80031c4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2280      	movs	r2, #128	; 0x80
 80031ca:	2120      	movs	r1, #32
 80031cc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2274      	movs	r2, #116	; 0x74
 80031d2:	2100      	movs	r1, #0
 80031d4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e010      	b.n	80031fc <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	4013      	ands	r3, r2
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	425a      	negs	r2, r3
 80031ea:	4153      	adcs	r3, r2
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	001a      	movs	r2, r3
 80031f0:	1dfb      	adds	r3, r7, #7
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d100      	bne.n	80031fa <UART_WaitOnFlagUntilTimeout+0x17a>
 80031f8:	e74b      	b.n	8003092 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	0018      	movs	r0, r3
 80031fe:	46bd      	mov	sp, r7
 8003200:	b014      	add	sp, #80	; 0x50
 8003202:	bd80      	pop	{r7, pc}
 8003204:	fffffe5f 	.word	0xfffffe5f

08003208 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08c      	sub	sp, #48	; 0x30
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	1dbb      	adds	r3, r7, #6
 8003214:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	1dba      	adds	r2, r7, #6
 8003220:	2158      	movs	r1, #88	; 0x58
 8003222:	8812      	ldrh	r2, [r2, #0]
 8003224:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	1dba      	adds	r2, r7, #6
 800322a:	215a      	movs	r1, #90	; 0x5a
 800322c:	8812      	ldrh	r2, [r2, #0]
 800322e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	689a      	ldr	r2, [r3, #8]
 800323a:	2380      	movs	r3, #128	; 0x80
 800323c:	015b      	lsls	r3, r3, #5
 800323e:	429a      	cmp	r2, r3
 8003240:	d10d      	bne.n	800325e <UART_Start_Receive_IT+0x56>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d104      	bne.n	8003254 <UART_Start_Receive_IT+0x4c>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	225c      	movs	r2, #92	; 0x5c
 800324e:	4943      	ldr	r1, [pc, #268]	; (800335c <UART_Start_Receive_IT+0x154>)
 8003250:	5299      	strh	r1, [r3, r2]
 8003252:	e02e      	b.n	80032b2 <UART_Start_Receive_IT+0xaa>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	225c      	movs	r2, #92	; 0x5c
 8003258:	21ff      	movs	r1, #255	; 0xff
 800325a:	5299      	strh	r1, [r3, r2]
 800325c:	e029      	b.n	80032b2 <UART_Start_Receive_IT+0xaa>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10d      	bne.n	8003282 <UART_Start_Receive_IT+0x7a>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d104      	bne.n	8003278 <UART_Start_Receive_IT+0x70>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	225c      	movs	r2, #92	; 0x5c
 8003272:	21ff      	movs	r1, #255	; 0xff
 8003274:	5299      	strh	r1, [r3, r2]
 8003276:	e01c      	b.n	80032b2 <UART_Start_Receive_IT+0xaa>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	225c      	movs	r2, #92	; 0x5c
 800327c:	217f      	movs	r1, #127	; 0x7f
 800327e:	5299      	strh	r1, [r3, r2]
 8003280:	e017      	b.n	80032b2 <UART_Start_Receive_IT+0xaa>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	2380      	movs	r3, #128	; 0x80
 8003288:	055b      	lsls	r3, r3, #21
 800328a:	429a      	cmp	r2, r3
 800328c:	d10d      	bne.n	80032aa <UART_Start_Receive_IT+0xa2>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d104      	bne.n	80032a0 <UART_Start_Receive_IT+0x98>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	225c      	movs	r2, #92	; 0x5c
 800329a:	217f      	movs	r1, #127	; 0x7f
 800329c:	5299      	strh	r1, [r3, r2]
 800329e:	e008      	b.n	80032b2 <UART_Start_Receive_IT+0xaa>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	225c      	movs	r2, #92	; 0x5c
 80032a4:	213f      	movs	r1, #63	; 0x3f
 80032a6:	5299      	strh	r1, [r3, r2]
 80032a8:	e003      	b.n	80032b2 <UART_Start_Receive_IT+0xaa>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	225c      	movs	r2, #92	; 0x5c
 80032ae:	2100      	movs	r1, #0
 80032b0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2280      	movs	r2, #128	; 0x80
 80032b6:	2100      	movs	r1, #0
 80032b8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2222      	movs	r2, #34	; 0x22
 80032be:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032c0:	f3ef 8310 	mrs	r3, PRIMASK
 80032c4:	61fb      	str	r3, [r7, #28]
  return(result);
 80032c6:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032ca:	2301      	movs	r3, #1
 80032cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	f383 8810 	msr	PRIMASK, r3
}
 80032d4:	46c0      	nop			; (mov r8, r8)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2101      	movs	r1, #1
 80032e2:	430a      	orrs	r2, r1
 80032e4:	609a      	str	r2, [r3, #8]
 80032e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	f383 8810 	msr	PRIMASK, r3
}
 80032f0:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	689a      	ldr	r2, [r3, #8]
 80032f6:	2380      	movs	r3, #128	; 0x80
 80032f8:	015b      	lsls	r3, r3, #5
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d107      	bne.n	800330e <UART_Start_Receive_IT+0x106>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d103      	bne.n	800330e <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4a15      	ldr	r2, [pc, #84]	; (8003360 <UART_Start_Receive_IT+0x158>)
 800330a:	665a      	str	r2, [r3, #100]	; 0x64
 800330c:	e002      	b.n	8003314 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	4a14      	ldr	r2, [pc, #80]	; (8003364 <UART_Start_Receive_IT+0x15c>)
 8003312:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2274      	movs	r2, #116	; 0x74
 8003318:	2100      	movs	r1, #0
 800331a:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800331c:	f3ef 8310 	mrs	r3, PRIMASK
 8003320:	613b      	str	r3, [r7, #16]
  return(result);
 8003322:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003324:	62bb      	str	r3, [r7, #40]	; 0x28
 8003326:	2301      	movs	r3, #1
 8003328:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f383 8810 	msr	PRIMASK, r3
}
 8003330:	46c0      	nop			; (mov r8, r8)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2190      	movs	r1, #144	; 0x90
 800333e:	0049      	lsls	r1, r1, #1
 8003340:	430a      	orrs	r2, r1
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003346:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	f383 8810 	msr	PRIMASK, r3
}
 800334e:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	0018      	movs	r0, r3
 8003354:	46bd      	mov	sp, r7
 8003356:	b00c      	add	sp, #48	; 0x30
 8003358:	bd80      	pop	{r7, pc}
 800335a:	46c0      	nop			; (mov r8, r8)
 800335c:	000001ff 	.word	0x000001ff
 8003360:	08003619 	.word	0x08003619
 8003364:	080034b1 	.word	0x080034b1

08003368 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b08e      	sub	sp, #56	; 0x38
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003370:	f3ef 8310 	mrs	r3, PRIMASK
 8003374:	617b      	str	r3, [r7, #20]
  return(result);
 8003376:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003378:	637b      	str	r3, [r7, #52]	; 0x34
 800337a:	2301      	movs	r3, #1
 800337c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	f383 8810 	msr	PRIMASK, r3
}
 8003384:	46c0      	nop			; (mov r8, r8)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4925      	ldr	r1, [pc, #148]	; (8003428 <UART_EndRxTransfer+0xc0>)
 8003392:	400a      	ands	r2, r1
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003398:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	f383 8810 	msr	PRIMASK, r3
}
 80033a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033a2:	f3ef 8310 	mrs	r3, PRIMASK
 80033a6:	623b      	str	r3, [r7, #32]
  return(result);
 80033a8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033aa:	633b      	str	r3, [r7, #48]	; 0x30
 80033ac:	2301      	movs	r3, #1
 80033ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	f383 8810 	msr	PRIMASK, r3
}
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2101      	movs	r1, #1
 80033c4:	438a      	bics	r2, r1
 80033c6:	609a      	str	r2, [r3, #8]
 80033c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ce:	f383 8810 	msr	PRIMASK, r3
}
 80033d2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d118      	bne.n	800340e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033dc:	f3ef 8310 	mrs	r3, PRIMASK
 80033e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80033e2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033e6:	2301      	movs	r3, #1
 80033e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f383 8810 	msr	PRIMASK, r3
}
 80033f0:	46c0      	nop			; (mov r8, r8)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2110      	movs	r1, #16
 80033fe:	438a      	bics	r2, r1
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003404:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	f383 8810 	msr	PRIMASK, r3
}
 800340c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2220      	movs	r2, #32
 8003412:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003420:	46c0      	nop			; (mov r8, r8)
 8003422:	46bd      	mov	sp, r7
 8003424:	b00e      	add	sp, #56	; 0x38
 8003426:	bd80      	pop	{r7, pc}
 8003428:	fffffedf 	.word	0xfffffedf

0800342c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003438:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	225a      	movs	r2, #90	; 0x5a
 800343e:	2100      	movs	r1, #0
 8003440:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2252      	movs	r2, #82	; 0x52
 8003446:	2100      	movs	r1, #0
 8003448:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	0018      	movs	r0, r3
 800344e:	f7ff fabd 	bl	80029cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003452:	46c0      	nop			; (mov r8, r8)
 8003454:	46bd      	mov	sp, r7
 8003456:	b004      	add	sp, #16
 8003458:	bd80      	pop	{r7, pc}

0800345a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b086      	sub	sp, #24
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003462:	f3ef 8310 	mrs	r3, PRIMASK
 8003466:	60bb      	str	r3, [r7, #8]
  return(result);
 8003468:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	2301      	movs	r3, #1
 800346e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f383 8810 	msr	PRIMASK, r3
}
 8003476:	46c0      	nop			; (mov r8, r8)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2140      	movs	r1, #64	; 0x40
 8003484:	438a      	bics	r2, r1
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f383 8810 	msr	PRIMASK, r3
}
 8003492:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2220      	movs	r2, #32
 8003498:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	0018      	movs	r0, r3
 80034a4:	f7ff fa8a 	bl	80029bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034a8:	46c0      	nop			; (mov r8, r8)
 80034aa:	46bd      	mov	sp, r7
 80034ac:	b006      	add	sp, #24
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b090      	sub	sp, #64	; 0x40
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80034b8:	203e      	movs	r0, #62	; 0x3e
 80034ba:	183b      	adds	r3, r7, r0
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	215c      	movs	r1, #92	; 0x5c
 80034c0:	5a52      	ldrh	r2, [r2, r1]
 80034c2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034c8:	2b22      	cmp	r3, #34	; 0x22
 80034ca:	d000      	beq.n	80034ce <UART_RxISR_8BIT+0x1e>
 80034cc:	e095      	b.n	80035fa <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034d4:	213c      	movs	r1, #60	; 0x3c
 80034d6:	187b      	adds	r3, r7, r1
 80034d8:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80034da:	187b      	adds	r3, r7, r1
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	183b      	adds	r3, r7, r0
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	b2d9      	uxtb	r1, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ea:	400a      	ands	r2, r1
 80034ec:	b2d2      	uxtb	r2, r2
 80034ee:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f4:	1c5a      	adds	r2, r3, #1
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	225a      	movs	r2, #90	; 0x5a
 80034fe:	5a9b      	ldrh	r3, [r3, r2]
 8003500:	b29b      	uxth	r3, r3
 8003502:	3b01      	subs	r3, #1
 8003504:	b299      	uxth	r1, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	225a      	movs	r2, #90	; 0x5a
 800350a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	225a      	movs	r2, #90	; 0x5a
 8003510:	5a9b      	ldrh	r3, [r3, r2]
 8003512:	b29b      	uxth	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	d178      	bne.n	800360a <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003518:	f3ef 8310 	mrs	r3, PRIMASK
 800351c:	61bb      	str	r3, [r7, #24]
  return(result);
 800351e:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003520:	63bb      	str	r3, [r7, #56]	; 0x38
 8003522:	2301      	movs	r3, #1
 8003524:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	f383 8810 	msr	PRIMASK, r3
}
 800352c:	46c0      	nop			; (mov r8, r8)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4936      	ldr	r1, [pc, #216]	; (8003614 <UART_RxISR_8BIT+0x164>)
 800353a:	400a      	ands	r2, r1
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003540:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	f383 8810 	msr	PRIMASK, r3
}
 8003548:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800354a:	f3ef 8310 	mrs	r3, PRIMASK
 800354e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003550:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003552:	637b      	str	r3, [r7, #52]	; 0x34
 8003554:	2301      	movs	r3, #1
 8003556:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355a:	f383 8810 	msr	PRIMASK, r3
}
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689a      	ldr	r2, [r3, #8]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2101      	movs	r1, #1
 800356c:	438a      	bics	r2, r1
 800356e:	609a      	str	r2, [r3, #8]
 8003570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003572:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003576:	f383 8810 	msr	PRIMASK, r3
}
 800357a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2220      	movs	r2, #32
 8003580:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800358c:	2b01      	cmp	r3, #1
 800358e:	d12f      	bne.n	80035f0 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003596:	f3ef 8310 	mrs	r3, PRIMASK
 800359a:	60fb      	str	r3, [r7, #12]
  return(result);
 800359c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800359e:	633b      	str	r3, [r7, #48]	; 0x30
 80035a0:	2301      	movs	r3, #1
 80035a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f383 8810 	msr	PRIMASK, r3
}
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2110      	movs	r1, #16
 80035b8:	438a      	bics	r2, r1
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f383 8810 	msr	PRIMASK, r3
}
 80035c6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	2210      	movs	r2, #16
 80035d0:	4013      	ands	r3, r2
 80035d2:	2b10      	cmp	r3, #16
 80035d4:	d103      	bne.n	80035de <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2210      	movs	r2, #16
 80035dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2258      	movs	r2, #88	; 0x58
 80035e2:	5a9a      	ldrh	r2, [r3, r2]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	0011      	movs	r1, r2
 80035e8:	0018      	movs	r0, r3
 80035ea:	f7ff f9f7 	bl	80029dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80035ee:	e00c      	b.n	800360a <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	0018      	movs	r0, r3
 80035f4:	f7fc fff0 	bl	80005d8 <HAL_UART_RxCpltCallback>
}
 80035f8:	e007      	b.n	800360a <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	699a      	ldr	r2, [r3, #24]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2108      	movs	r1, #8
 8003606:	430a      	orrs	r2, r1
 8003608:	619a      	str	r2, [r3, #24]
}
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	46bd      	mov	sp, r7
 800360e:	b010      	add	sp, #64	; 0x40
 8003610:	bd80      	pop	{r7, pc}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	fffffedf 	.word	0xfffffedf

08003618 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b090      	sub	sp, #64	; 0x40
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003620:	203e      	movs	r0, #62	; 0x3e
 8003622:	183b      	adds	r3, r7, r0
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	215c      	movs	r1, #92	; 0x5c
 8003628:	5a52      	ldrh	r2, [r2, r1]
 800362a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003630:	2b22      	cmp	r3, #34	; 0x22
 8003632:	d000      	beq.n	8003636 <UART_RxISR_16BIT+0x1e>
 8003634:	e095      	b.n	8003762 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800363c:	213c      	movs	r1, #60	; 0x3c
 800363e:	187b      	adds	r3, r7, r1
 8003640:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003646:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8003648:	187b      	adds	r3, r7, r1
 800364a:	183a      	adds	r2, r7, r0
 800364c:	881b      	ldrh	r3, [r3, #0]
 800364e:	8812      	ldrh	r2, [r2, #0]
 8003650:	4013      	ands	r3, r2
 8003652:	b29a      	uxth	r2, r3
 8003654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003656:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365c:	1c9a      	adds	r2, r3, #2
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	225a      	movs	r2, #90	; 0x5a
 8003666:	5a9b      	ldrh	r3, [r3, r2]
 8003668:	b29b      	uxth	r3, r3
 800366a:	3b01      	subs	r3, #1
 800366c:	b299      	uxth	r1, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	225a      	movs	r2, #90	; 0x5a
 8003672:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	225a      	movs	r2, #90	; 0x5a
 8003678:	5a9b      	ldrh	r3, [r3, r2]
 800367a:	b29b      	uxth	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	d178      	bne.n	8003772 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003680:	f3ef 8310 	mrs	r3, PRIMASK
 8003684:	617b      	str	r3, [r7, #20]
  return(result);
 8003686:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003688:	637b      	str	r3, [r7, #52]	; 0x34
 800368a:	2301      	movs	r3, #1
 800368c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	f383 8810 	msr	PRIMASK, r3
}
 8003694:	46c0      	nop			; (mov r8, r8)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4936      	ldr	r1, [pc, #216]	; (800377c <UART_RxISR_16BIT+0x164>)
 80036a2:	400a      	ands	r2, r1
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	f383 8810 	msr	PRIMASK, r3
}
 80036b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036b2:	f3ef 8310 	mrs	r3, PRIMASK
 80036b6:	623b      	str	r3, [r7, #32]
  return(result);
 80036b8:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ba:	633b      	str	r3, [r7, #48]	; 0x30
 80036bc:	2301      	movs	r3, #1
 80036be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	f383 8810 	msr	PRIMASK, r3
}
 80036c6:	46c0      	nop			; (mov r8, r8)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2101      	movs	r1, #1
 80036d4:	438a      	bics	r2, r1
 80036d6:	609a      	str	r2, [r3, #8]
 80036d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036da:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036de:	f383 8810 	msr	PRIMASK, r3
}
 80036e2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2220      	movs	r2, #32
 80036e8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d12f      	bne.n	8003758 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003702:	60bb      	str	r3, [r7, #8]
  return(result);
 8003704:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003706:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003708:	2301      	movs	r3, #1
 800370a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f383 8810 	msr	PRIMASK, r3
}
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2110      	movs	r1, #16
 8003720:	438a      	bics	r2, r1
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003726:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	f383 8810 	msr	PRIMASK, r3
}
 800372e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	2210      	movs	r2, #16
 8003738:	4013      	ands	r3, r2
 800373a:	2b10      	cmp	r3, #16
 800373c:	d103      	bne.n	8003746 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2210      	movs	r2, #16
 8003744:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2258      	movs	r2, #88	; 0x58
 800374a:	5a9a      	ldrh	r2, [r3, r2]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	0011      	movs	r1, r2
 8003750:	0018      	movs	r0, r3
 8003752:	f7ff f943 	bl	80029dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003756:	e00c      	b.n	8003772 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	0018      	movs	r0, r3
 800375c:	f7fc ff3c 	bl	80005d8 <HAL_UART_RxCpltCallback>
}
 8003760:	e007      	b.n	8003772 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	699a      	ldr	r2, [r3, #24]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2108      	movs	r1, #8
 800376e:	430a      	orrs	r2, r1
 8003770:	619a      	str	r2, [r3, #24]
}
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	46bd      	mov	sp, r7
 8003776:	b010      	add	sp, #64	; 0x40
 8003778:	bd80      	pop	{r7, pc}
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	fffffedf 	.word	0xfffffedf

08003780 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003788:	46c0      	nop			; (mov r8, r8)
 800378a:	46bd      	mov	sp, r7
 800378c:	b002      	add	sp, #8
 800378e:	bd80      	pop	{r7, pc}

08003790 <__libc_init_array>:
 8003790:	b570      	push	{r4, r5, r6, lr}
 8003792:	2600      	movs	r6, #0
 8003794:	4d0c      	ldr	r5, [pc, #48]	; (80037c8 <__libc_init_array+0x38>)
 8003796:	4c0d      	ldr	r4, [pc, #52]	; (80037cc <__libc_init_array+0x3c>)
 8003798:	1b64      	subs	r4, r4, r5
 800379a:	10a4      	asrs	r4, r4, #2
 800379c:	42a6      	cmp	r6, r4
 800379e:	d109      	bne.n	80037b4 <__libc_init_array+0x24>
 80037a0:	2600      	movs	r6, #0
 80037a2:	f000 f87d 	bl	80038a0 <_init>
 80037a6:	4d0a      	ldr	r5, [pc, #40]	; (80037d0 <__libc_init_array+0x40>)
 80037a8:	4c0a      	ldr	r4, [pc, #40]	; (80037d4 <__libc_init_array+0x44>)
 80037aa:	1b64      	subs	r4, r4, r5
 80037ac:	10a4      	asrs	r4, r4, #2
 80037ae:	42a6      	cmp	r6, r4
 80037b0:	d105      	bne.n	80037be <__libc_init_array+0x2e>
 80037b2:	bd70      	pop	{r4, r5, r6, pc}
 80037b4:	00b3      	lsls	r3, r6, #2
 80037b6:	58eb      	ldr	r3, [r5, r3]
 80037b8:	4798      	blx	r3
 80037ba:	3601      	adds	r6, #1
 80037bc:	e7ee      	b.n	800379c <__libc_init_array+0xc>
 80037be:	00b3      	lsls	r3, r6, #2
 80037c0:	58eb      	ldr	r3, [r5, r3]
 80037c2:	4798      	blx	r3
 80037c4:	3601      	adds	r6, #1
 80037c6:	e7f2      	b.n	80037ae <__libc_init_array+0x1e>
 80037c8:	08003954 	.word	0x08003954
 80037cc:	08003954 	.word	0x08003954
 80037d0:	08003954 	.word	0x08003954
 80037d4:	08003958 	.word	0x08003958

080037d8 <__itoa>:
 80037d8:	1e93      	subs	r3, r2, #2
 80037da:	b510      	push	{r4, lr}
 80037dc:	000c      	movs	r4, r1
 80037de:	2b22      	cmp	r3, #34	; 0x22
 80037e0:	d904      	bls.n	80037ec <__itoa+0x14>
 80037e2:	2300      	movs	r3, #0
 80037e4:	001c      	movs	r4, r3
 80037e6:	700b      	strb	r3, [r1, #0]
 80037e8:	0020      	movs	r0, r4
 80037ea:	bd10      	pop	{r4, pc}
 80037ec:	2a0a      	cmp	r2, #10
 80037ee:	d109      	bne.n	8003804 <__itoa+0x2c>
 80037f0:	2800      	cmp	r0, #0
 80037f2:	da07      	bge.n	8003804 <__itoa+0x2c>
 80037f4:	232d      	movs	r3, #45	; 0x2d
 80037f6:	700b      	strb	r3, [r1, #0]
 80037f8:	2101      	movs	r1, #1
 80037fa:	4240      	negs	r0, r0
 80037fc:	1861      	adds	r1, r4, r1
 80037fe:	f000 f80f 	bl	8003820 <__utoa>
 8003802:	e7f1      	b.n	80037e8 <__itoa+0x10>
 8003804:	2100      	movs	r1, #0
 8003806:	e7f9      	b.n	80037fc <__itoa+0x24>

08003808 <itoa>:
 8003808:	b510      	push	{r4, lr}
 800380a:	f7ff ffe5 	bl	80037d8 <__itoa>
 800380e:	bd10      	pop	{r4, pc}

08003810 <memset>:
 8003810:	0003      	movs	r3, r0
 8003812:	1882      	adds	r2, r0, r2
 8003814:	4293      	cmp	r3, r2
 8003816:	d100      	bne.n	800381a <memset+0xa>
 8003818:	4770      	bx	lr
 800381a:	7019      	strb	r1, [r3, #0]
 800381c:	3301      	adds	r3, #1
 800381e:	e7f9      	b.n	8003814 <memset+0x4>

08003820 <__utoa>:
 8003820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003822:	000c      	movs	r4, r1
 8003824:	0016      	movs	r6, r2
 8003826:	b08d      	sub	sp, #52	; 0x34
 8003828:	2225      	movs	r2, #37	; 0x25
 800382a:	0007      	movs	r7, r0
 800382c:	4916      	ldr	r1, [pc, #88]	; (8003888 <__utoa+0x68>)
 800382e:	a802      	add	r0, sp, #8
 8003830:	f000 f82c 	bl	800388c <memcpy>
 8003834:	1e62      	subs	r2, r4, #1
 8003836:	9200      	str	r2, [sp, #0]
 8003838:	1eb3      	subs	r3, r6, #2
 800383a:	aa02      	add	r2, sp, #8
 800383c:	2500      	movs	r5, #0
 800383e:	9201      	str	r2, [sp, #4]
 8003840:	2b22      	cmp	r3, #34	; 0x22
 8003842:	d904      	bls.n	800384e <__utoa+0x2e>
 8003844:	7025      	strb	r5, [r4, #0]
 8003846:	002c      	movs	r4, r5
 8003848:	0020      	movs	r0, r4
 800384a:	b00d      	add	sp, #52	; 0x34
 800384c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800384e:	0038      	movs	r0, r7
 8003850:	0031      	movs	r1, r6
 8003852:	f7fc fcdf 	bl	8000214 <__aeabi_uidivmod>
 8003856:	000b      	movs	r3, r1
 8003858:	9a01      	ldr	r2, [sp, #4]
 800385a:	0029      	movs	r1, r5
 800385c:	5cd3      	ldrb	r3, [r2, r3]
 800385e:	9a00      	ldr	r2, [sp, #0]
 8003860:	3501      	adds	r5, #1
 8003862:	5553      	strb	r3, [r2, r5]
 8003864:	003b      	movs	r3, r7
 8003866:	0007      	movs	r7, r0
 8003868:	429e      	cmp	r6, r3
 800386a:	d9f0      	bls.n	800384e <__utoa+0x2e>
 800386c:	2300      	movs	r3, #0
 800386e:	0022      	movs	r2, r4
 8003870:	5563      	strb	r3, [r4, r5]
 8003872:	000b      	movs	r3, r1
 8003874:	1ac8      	subs	r0, r1, r3
 8003876:	4283      	cmp	r3, r0
 8003878:	dde6      	ble.n	8003848 <__utoa+0x28>
 800387a:	7810      	ldrb	r0, [r2, #0]
 800387c:	5ce5      	ldrb	r5, [r4, r3]
 800387e:	7015      	strb	r5, [r2, #0]
 8003880:	54e0      	strb	r0, [r4, r3]
 8003882:	3201      	adds	r2, #1
 8003884:	3b01      	subs	r3, #1
 8003886:	e7f5      	b.n	8003874 <__utoa+0x54>
 8003888:	08003924 	.word	0x08003924

0800388c <memcpy>:
 800388c:	2300      	movs	r3, #0
 800388e:	b510      	push	{r4, lr}
 8003890:	429a      	cmp	r2, r3
 8003892:	d100      	bne.n	8003896 <memcpy+0xa>
 8003894:	bd10      	pop	{r4, pc}
 8003896:	5ccc      	ldrb	r4, [r1, r3]
 8003898:	54c4      	strb	r4, [r0, r3]
 800389a:	3301      	adds	r3, #1
 800389c:	e7f8      	b.n	8003890 <memcpy+0x4>
	...

080038a0 <_init>:
 80038a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038a6:	bc08      	pop	{r3}
 80038a8:	469e      	mov	lr, r3
 80038aa:	4770      	bx	lr

080038ac <_fini>:
 80038ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ae:	46c0      	nop			; (mov r8, r8)
 80038b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038b2:	bc08      	pop	{r3}
 80038b4:	469e      	mov	lr, r3
 80038b6:	4770      	bx	lr
