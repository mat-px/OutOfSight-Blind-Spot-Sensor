
Blind_Spot_STM32CubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000367c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800373c  0800373c  0001373c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037a8  080037a8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080037a8  080037a8  000137a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037b0  080037b0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037b0  080037b0  000137b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037b4  080037b4  000137b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080037b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000014  080037cc  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  080037cc  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b4c4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b47  00000000  00000000  0002b500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000910  00000000  00000000  0002d048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000868  00000000  00000000  0002d958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010d29  00000000  00000000  0002e1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb0d  00000000  00000000  0003eee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000647a6  00000000  00000000  0004a9f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000af19c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fc4  00000000  00000000  000af1ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003724 	.word	0x08003724

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08003724 	.word	0x08003724

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
void lidar_init();
void lidar_trigger();
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);

int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  HAL_Init();
 80004ac:	f000 fb18 	bl	8000ae0 <HAL_Init>
  SystemClock_Config();
 80004b0:	f000 f866 	bl	8000580 <SystemClock_Config>
  MX_GPIO_Init();
 80004b4:	f000 f938 	bl	8000728 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004b8:	f000 f8ce 	bl	8000658 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80004bc:	f000 f904 	bl	80006c8 <MX_USART2_UART_Init>

  //Enable UART
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 80004c0:	2201      	movs	r2, #1
 80004c2:	2100      	movs	r1, #0
 80004c4:	201c      	movs	r0, #28
 80004c6:	f000 fc4b 	bl	8000d60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80004ca:	201c      	movs	r0, #28
 80004cc:	f000 fc5d 	bl	8000d8a <HAL_NVIC_EnableIRQ>
  USART2_IRQHandler();
 80004d0:	f000 fab2 	bl	8000a38 <USART2_IRQHandler>

  // Start transmission
  HAL_UART_Receive_IT(&huart2, rx_buffer, sizeof(rx_buffer));
 80004d4:	490f      	ldr	r1, [pc, #60]	; (8000514 <main+0x6c>)
 80004d6:	4b10      	ldr	r3, [pc, #64]	; (8000518 <main+0x70>)
 80004d8:	2208      	movs	r2, #8
 80004da:	0018      	movs	r0, r3
 80004dc:	f001 feca 	bl	8002274 <HAL_UART_Receive_IT>

  HAL_UART_Transmit(&huart2, soft_reset, sizeof(soft_reset), HAL_MAX_DELAY);
 80004e0:	2301      	movs	r3, #1
 80004e2:	425b      	negs	r3, r3
 80004e4:	490d      	ldr	r1, [pc, #52]	; (800051c <main+0x74>)
 80004e6:	480c      	ldr	r0, [pc, #48]	; (8000518 <main+0x70>)
 80004e8:	2204      	movs	r2, #4
 80004ea:	f001 fe1b 	bl	8002124 <HAL_UART_Transmit>
  HAL_Delay(500);
 80004ee:	23fa      	movs	r3, #250	; 0xfa
 80004f0:	005b      	lsls	r3, r3, #1
 80004f2:	0018      	movs	r0, r3
 80004f4:	f000 fb64 	bl	8000bc0 <HAL_Delay>
//  HAL_Delay(1000);
//  HAL_GPIO_WritePin(LED_OUT_GPIO_Port, LED_OUT_Pin, GPIO_PIN_RESET);

  while (1)
  {
	  HAL_UART_Transmit(&huart2, trig_cmd, sizeof(trig_cmd), HAL_MAX_DELAY);
 80004f8:	2301      	movs	r3, #1
 80004fa:	425b      	negs	r3, r3
 80004fc:	4908      	ldr	r1, [pc, #32]	; (8000520 <main+0x78>)
 80004fe:	4806      	ldr	r0, [pc, #24]	; (8000518 <main+0x70>)
 8000500:	2204      	movs	r2, #4
 8000502:	f001 fe0f 	bl	8002124 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000506:	23fa      	movs	r3, #250	; 0xfa
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	0018      	movs	r0, r3
 800050c:	f000 fb58 	bl	8000bc0 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, trig_cmd, sizeof(trig_cmd), HAL_MAX_DELAY);
 8000510:	e7f2      	b.n	80004f8 <main+0x50>
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	2000010c 	.word	0x2000010c
 8000518:	20000088 	.word	0x20000088
 800051c:	20000004 	.word	0x20000004
 8000520:	20000000 	.word	0x20000000

08000524 <HAL_UART_RxCpltCallback>:

void lidar_trigger() {
  HAL_UART_Transmit(&huart2, trig_cmd, sizeof(trig_cmd), 100);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	//float distance_m;
	//uint16_t distance_cm;

	if(huart->Instance == huart2.Instance){
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	4b11      	ldr	r3, [pc, #68]	; (8000578 <HAL_UART_RxCpltCallback+0x54>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	429a      	cmp	r2, r3
 8000536:	d11a      	bne.n	800056e <HAL_UART_RxCpltCallback+0x4a>
		HAL_GPIO_WritePin(LED_OUT_GPIO_Port, LED_OUT_Pin, GPIO_PIN_SET);
 8000538:	2380      	movs	r3, #128	; 0x80
 800053a:	01d9      	lsls	r1, r3, #7
 800053c:	23a0      	movs	r3, #160	; 0xa0
 800053e:	05db      	lsls	r3, r3, #23
 8000540:	2201      	movs	r2, #1
 8000542:	0018      	movs	r0, r3
 8000544:	f000 fe2c 	bl	80011a0 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000548:	23fa      	movs	r3, #250	; 0xfa
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	0018      	movs	r0, r3
 800054e:	f000 fb37 	bl	8000bc0 <HAL_Delay>
		HAL_GPIO_WritePin(LED_OUT_GPIO_Port, LED_OUT_Pin, GPIO_PIN_RESET);
 8000552:	2380      	movs	r3, #128	; 0x80
 8000554:	01d9      	lsls	r1, r3, #7
 8000556:	23a0      	movs	r3, #160	; 0xa0
 8000558:	05db      	lsls	r3, r3, #23
 800055a:	2200      	movs	r2, #0
 800055c:	0018      	movs	r0, r3
 800055e:	f000 fe1f 	bl	80011a0 <HAL_GPIO_WritePin>
		HAL_UART_Receive_IT(&huart2, rx_buffer, sizeof(rx_buffer));
 8000562:	4906      	ldr	r1, [pc, #24]	; (800057c <HAL_UART_RxCpltCallback+0x58>)
 8000564:	4b04      	ldr	r3, [pc, #16]	; (8000578 <HAL_UART_RxCpltCallback+0x54>)
 8000566:	2208      	movs	r2, #8
 8000568:	0018      	movs	r0, r3
 800056a:	f001 fe83 	bl	8002274 <HAL_UART_Receive_IT>
//    	  HAL_GPIO_WritePin(LED_OUT_GPIO_Port, LED_OUT_Pin, GPIO_PIN_RESET);
//      }
//    }
//    HAL_UART_Receive_IT(&huart2, rx_buffer, 9);  // start another reception
//  }
}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	46bd      	mov	sp, r7
 8000572:	b002      	add	sp, #8
 8000574:	bd80      	pop	{r7, pc}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	20000088 	.word	0x20000088
 800057c:	2000010c 	.word	0x2000010c

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b590      	push	{r4, r7, lr}
 8000582:	b099      	sub	sp, #100	; 0x64
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	242c      	movs	r4, #44	; 0x2c
 8000588:	193b      	adds	r3, r7, r4
 800058a:	0018      	movs	r0, r3
 800058c:	2334      	movs	r3, #52	; 0x34
 800058e:	001a      	movs	r2, r3
 8000590:	2100      	movs	r1, #0
 8000592:	f003 f8bf 	bl	8003714 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000596:	2318      	movs	r3, #24
 8000598:	18fb      	adds	r3, r7, r3
 800059a:	0018      	movs	r0, r3
 800059c:	2314      	movs	r3, #20
 800059e:	001a      	movs	r2, r3
 80005a0:	2100      	movs	r1, #0
 80005a2:	f003 f8b7 	bl	8003714 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005a6:	003b      	movs	r3, r7
 80005a8:	0018      	movs	r0, r3
 80005aa:	2318      	movs	r3, #24
 80005ac:	001a      	movs	r2, r3
 80005ae:	2100      	movs	r1, #0
 80005b0:	f003 f8b0 	bl	8003714 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b4:	4b26      	ldr	r3, [pc, #152]	; (8000650 <SystemClock_Config+0xd0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a26      	ldr	r2, [pc, #152]	; (8000654 <SystemClock_Config+0xd4>)
 80005ba:	401a      	ands	r2, r3
 80005bc:	4b24      	ldr	r3, [pc, #144]	; (8000650 <SystemClock_Config+0xd0>)
 80005be:	2180      	movs	r1, #128	; 0x80
 80005c0:	0109      	lsls	r1, r1, #4
 80005c2:	430a      	orrs	r2, r1
 80005c4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005c6:	0021      	movs	r1, r4
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	2210      	movs	r2, #16
 80005cc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	2201      	movs	r2, #1
 80005d2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	2200      	movs	r2, #0
 80005d8:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	22a0      	movs	r2, #160	; 0xa0
 80005de:	0212      	lsls	r2, r2, #8
 80005e0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2200      	movs	r2, #0
 80005e6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	0018      	movs	r0, r3
 80005ec:	f000 fdf6 	bl	80011dc <HAL_RCC_OscConfig>
 80005f0:	1e03      	subs	r3, r0, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80005f4:	f000 f948 	bl	8000888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	2118      	movs	r1, #24
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	220f      	movs	r2, #15
 80005fe:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000600:	187b      	adds	r3, r7, r1
 8000602:	2200      	movs	r2, #0
 8000604:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000606:	187b      	adds	r3, r7, r1
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2200      	movs	r2, #0
 8000610:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000618:	187b      	adds	r3, r7, r1
 800061a:	2100      	movs	r1, #0
 800061c:	0018      	movs	r0, r3
 800061e:	f001 f959 	bl	80018d4 <HAL_RCC_ClockConfig>
 8000622:	1e03      	subs	r3, r0, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000626:	f000 f92f 	bl	8000888 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800062a:	003b      	movs	r3, r7
 800062c:	2202      	movs	r2, #2
 800062e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000630:	003b      	movs	r3, r7
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000636:	003b      	movs	r3, r7
 8000638:	0018      	movs	r0, r3
 800063a:	f001 fb6f 	bl	8001d1c <HAL_RCCEx_PeriphCLKConfig>
 800063e:	1e03      	subs	r3, r0, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000642:	f000 f921 	bl	8000888 <Error_Handler>
  }
}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	b019      	add	sp, #100	; 0x64
 800064c:	bd90      	pop	{r4, r7, pc}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	40007000 	.word	0x40007000
 8000654:	ffffe7ff 	.word	0xffffe7ff

08000658 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800065c:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <MX_SPI1_Init+0x68>)
 800065e:	4a19      	ldr	r2, [pc, #100]	; (80006c4 <MX_SPI1_Init+0x6c>)
 8000660:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000662:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <MX_SPI1_Init+0x68>)
 8000664:	2282      	movs	r2, #130	; 0x82
 8000666:	0052      	lsls	r2, r2, #1
 8000668:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <MX_SPI1_Init+0x68>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000670:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <MX_SPI1_Init+0x68>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000676:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <MX_SPI1_Init+0x68>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800067c:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <MX_SPI1_Init+0x68>)
 800067e:	2200      	movs	r2, #0
 8000680:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <MX_SPI1_Init+0x68>)
 8000684:	2280      	movs	r2, #128	; 0x80
 8000686:	0092      	lsls	r2, r2, #2
 8000688:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800068a:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <MX_SPI1_Init+0x68>)
 800068c:	2200      	movs	r2, #0
 800068e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000690:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <MX_SPI1_Init+0x68>)
 8000692:	2200      	movs	r2, #0
 8000694:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000696:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <MX_SPI1_Init+0x68>)
 8000698:	2200      	movs	r2, #0
 800069a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <MX_SPI1_Init+0x68>)
 800069e:	2200      	movs	r2, #0
 80006a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80006a2:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <MX_SPI1_Init+0x68>)
 80006a4:	2207      	movs	r2, #7
 80006a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <MX_SPI1_Init+0x68>)
 80006aa:	0018      	movs	r0, r3
 80006ac:	f001 fc5c 	bl	8001f68 <HAL_SPI_Init>
 80006b0:	1e03      	subs	r3, r0, #0
 80006b2:	d001      	beq.n	80006b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006b4:	f000 f8e8 	bl	8000888 <Error_Handler>
  }
}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	20000030 	.word	0x20000030
 80006c4:	40013000 	.word	0x40013000

080006c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80006cc:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_USART2_UART_Init+0x58>)
 80006ce:	4a15      	ldr	r2, [pc, #84]	; (8000724 <MX_USART2_UART_Init+0x5c>)
 80006d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006d2:	4b13      	ldr	r3, [pc, #76]	; (8000720 <MX_USART2_UART_Init+0x58>)
 80006d4:	22e1      	movs	r2, #225	; 0xe1
 80006d6:	0252      	lsls	r2, r2, #9
 80006d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_USART2_UART_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_USART2_UART_Init+0x58>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_USART2_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_USART2_UART_Init+0x58>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_USART2_UART_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_USART2_UART_Init+0x58>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_USART2_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_USART2_UART_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <MX_USART2_UART_Init+0x58>)
 800070c:	0018      	movs	r0, r3
 800070e:	f001 fcb5 	bl	800207c <HAL_UART_Init>
 8000712:	1e03      	subs	r3, r0, #0
 8000714:	d001      	beq.n	800071a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000716:	f000 f8b7 	bl	8000888 <Error_Handler>
  }
}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000088 	.word	0x20000088
 8000724:	40004400 	.word	0x40004400

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b590      	push	{r4, r7, lr}
 800072a:	b089      	sub	sp, #36	; 0x24
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	240c      	movs	r4, #12
 8000730:	193b      	adds	r3, r7, r4
 8000732:	0018      	movs	r0, r3
 8000734:	2314      	movs	r3, #20
 8000736:	001a      	movs	r2, r3
 8000738:	2100      	movs	r1, #0
 800073a:	f002 ffeb 	bl	8003714 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	4b4c      	ldr	r3, [pc, #304]	; (8000870 <MX_GPIO_Init+0x148>)
 8000740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000742:	4b4b      	ldr	r3, [pc, #300]	; (8000870 <MX_GPIO_Init+0x148>)
 8000744:	2104      	movs	r1, #4
 8000746:	430a      	orrs	r2, r1
 8000748:	62da      	str	r2, [r3, #44]	; 0x2c
 800074a:	4b49      	ldr	r3, [pc, #292]	; (8000870 <MX_GPIO_Init+0x148>)
 800074c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800074e:	2204      	movs	r2, #4
 8000750:	4013      	ands	r3, r2
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	4b46      	ldr	r3, [pc, #280]	; (8000870 <MX_GPIO_Init+0x148>)
 8000758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800075a:	4b45      	ldr	r3, [pc, #276]	; (8000870 <MX_GPIO_Init+0x148>)
 800075c:	2101      	movs	r1, #1
 800075e:	430a      	orrs	r2, r1
 8000760:	62da      	str	r2, [r3, #44]	; 0x2c
 8000762:	4b43      	ldr	r3, [pc, #268]	; (8000870 <MX_GPIO_Init+0x148>)
 8000764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000766:	2201      	movs	r2, #1
 8000768:	4013      	ands	r3, r2
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	4b40      	ldr	r3, [pc, #256]	; (8000870 <MX_GPIO_Init+0x148>)
 8000770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000772:	4b3f      	ldr	r3, [pc, #252]	; (8000870 <MX_GPIO_Init+0x148>)
 8000774:	2102      	movs	r1, #2
 8000776:	430a      	orrs	r2, r1
 8000778:	62da      	str	r2, [r3, #44]	; 0x2c
 800077a:	4b3d      	ldr	r3, [pc, #244]	; (8000870 <MX_GPIO_Init+0x148>)
 800077c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800077e:	2202      	movs	r2, #2
 8000780:	4013      	ands	r3, r2
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MISC_GPIO3_Pin|MISC_GPIO4_Pin, GPIO_PIN_RESET);
 8000786:	23c0      	movs	r3, #192	; 0xc0
 8000788:	021b      	lsls	r3, r3, #8
 800078a:	483a      	ldr	r0, [pc, #232]	; (8000874 <MX_GPIO_Init+0x14c>)
 800078c:	2200      	movs	r2, #0
 800078e:	0019      	movs	r1, r3
 8000790:	f000 fd06 	bl	80011a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ACCEL_SPI1_CS_Pin|GPIO_PIN_4|GPIO_PIN_13|LED_OUT_Pin, GPIO_PIN_RESET);
 8000794:	4938      	ldr	r1, [pc, #224]	; (8000878 <MX_GPIO_Init+0x150>)
 8000796:	23a0      	movs	r3, #160	; 0xa0
 8000798:	05db      	lsls	r3, r3, #23
 800079a:	2200      	movs	r2, #0
 800079c:	0018      	movs	r0, r3
 800079e:	f000 fcff 	bl	80011a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MISC_GPIO2_GPIO_Port, MISC_GPIO2_Pin, GPIO_PIN_RESET);
 80007a2:	4b36      	ldr	r3, [pc, #216]	; (800087c <MX_GPIO_Init+0x154>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	2102      	movs	r1, #2
 80007a8:	0018      	movs	r0, r3
 80007aa:	f000 fcf9 	bl	80011a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MISC_GPIO3_Pin MISC_GPIO4_Pin */
  GPIO_InitStruct.Pin = MISC_GPIO3_Pin|MISC_GPIO4_Pin;
 80007ae:	193b      	adds	r3, r7, r4
 80007b0:	22c0      	movs	r2, #192	; 0xc0
 80007b2:	0212      	lsls	r2, r2, #8
 80007b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b6:	193b      	adds	r3, r7, r4
 80007b8:	2201      	movs	r2, #1
 80007ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	193b      	adds	r3, r7, r4
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	2200      	movs	r2, #0
 80007c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c8:	193b      	adds	r3, r7, r4
 80007ca:	4a2a      	ldr	r2, [pc, #168]	; (8000874 <MX_GPIO_Init+0x14c>)
 80007cc:	0019      	movs	r1, r3
 80007ce:	0010      	movs	r0, r2
 80007d0:	f000 fb80 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ON_OFF_MODE_Pin ACCEL_INT2_Pin ACCEL_INT1_Pin */
  GPIO_InitStruct.Pin = ON_OFF_MODE_Pin|ACCEL_INT2_Pin|ACCEL_INT1_Pin;
 80007d4:	193b      	adds	r3, r7, r4
 80007d6:	4a2a      	ldr	r2, [pc, #168]	; (8000880 <MX_GPIO_Init+0x158>)
 80007d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	2200      	movs	r2, #0
 80007de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e6:	193a      	adds	r2, r7, r4
 80007e8:	23a0      	movs	r3, #160	; 0xa0
 80007ea:	05db      	lsls	r3, r3, #23
 80007ec:	0011      	movs	r1, r2
 80007ee:	0018      	movs	r0, r3
 80007f0:	f000 fb70 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_SPI1_CS_Pin PA4 PA13 */
  GPIO_InitStruct.Pin = ACCEL_SPI1_CS_Pin|GPIO_PIN_4|GPIO_PIN_13;
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	4a23      	ldr	r2, [pc, #140]	; (8000884 <MX_GPIO_Init+0x15c>)
 80007f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	193b      	adds	r3, r7, r4
 80007fc:	2201      	movs	r2, #1
 80007fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	193b      	adds	r3, r7, r4
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	193b      	adds	r3, r7, r4
 8000808:	2200      	movs	r2, #0
 800080a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080c:	193a      	adds	r2, r7, r4
 800080e:	23a0      	movs	r3, #160	; 0xa0
 8000810:	05db      	lsls	r3, r3, #23
 8000812:	0011      	movs	r1, r2
 8000814:	0018      	movs	r0, r3
 8000816:	f000 fb5d 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MISC_GPIO2_Pin */
  GPIO_InitStruct.Pin = MISC_GPIO2_Pin;
 800081a:	193b      	adds	r3, r7, r4
 800081c:	2202      	movs	r2, #2
 800081e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	193b      	adds	r3, r7, r4
 8000822:	2201      	movs	r2, #1
 8000824:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	193b      	adds	r3, r7, r4
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	193b      	adds	r3, r7, r4
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MISC_GPIO2_GPIO_Port, &GPIO_InitStruct);
 8000832:	193b      	adds	r3, r7, r4
 8000834:	4a11      	ldr	r2, [pc, #68]	; (800087c <MX_GPIO_Init+0x154>)
 8000836:	0019      	movs	r1, r3
 8000838:	0010      	movs	r0, r2
 800083a:	f000 fb4b 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_OUT_Pin */
  GPIO_InitStruct.Pin = LED_OUT_Pin;
 800083e:	0021      	movs	r1, r4
 8000840:	187b      	adds	r3, r7, r1
 8000842:	2280      	movs	r2, #128	; 0x80
 8000844:	01d2      	lsls	r2, r2, #7
 8000846:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000848:	187b      	adds	r3, r7, r1
 800084a:	2201      	movs	r2, #1
 800084c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800084e:	187b      	adds	r3, r7, r1
 8000850:	2201      	movs	r2, #1
 8000852:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	187b      	adds	r3, r7, r1
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_OUT_GPIO_Port, &GPIO_InitStruct);
 800085a:	187a      	adds	r2, r7, r1
 800085c:	23a0      	movs	r3, #160	; 0xa0
 800085e:	05db      	lsls	r3, r3, #23
 8000860:	0011      	movs	r1, r2
 8000862:	0018      	movs	r0, r3
 8000864:	f000 fb36 	bl	8000ed4 <HAL_GPIO_Init>

}
 8000868:	46c0      	nop			; (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	b009      	add	sp, #36	; 0x24
 800086e:	bd90      	pop	{r4, r7, pc}
 8000870:	40021000 	.word	0x40021000
 8000874:	50000800 	.word	0x50000800
 8000878:	00006018 	.word	0x00006018
 800087c:	50000400 	.word	0x50000400
 8000880:	00000602 	.word	0x00000602
 8000884:	00002018 	.word	0x00002018

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800088c:	b672      	cpsid	i
}
 800088e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000890:	e7fe      	b.n	8000890 <Error_Handler+0x8>
	...

08000894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000898:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <HAL_MspInit+0x24>)
 800089a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <HAL_MspInit+0x24>)
 800089e:	2101      	movs	r1, #1
 80008a0:	430a      	orrs	r2, r1
 80008a2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a4:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <HAL_MspInit+0x24>)
 80008a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008a8:	4b03      	ldr	r3, [pc, #12]	; (80008b8 <HAL_MspInit+0x24>)
 80008aa:	2180      	movs	r1, #128	; 0x80
 80008ac:	0549      	lsls	r1, r1, #21
 80008ae:	430a      	orrs	r2, r1
 80008b0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40021000 	.word	0x40021000

080008bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008bc:	b590      	push	{r4, r7, lr}
 80008be:	b089      	sub	sp, #36	; 0x24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	240c      	movs	r4, #12
 80008c6:	193b      	adds	r3, r7, r4
 80008c8:	0018      	movs	r0, r3
 80008ca:	2314      	movs	r3, #20
 80008cc:	001a      	movs	r2, r3
 80008ce:	2100      	movs	r1, #0
 80008d0:	f002 ff20 	bl	8003714 <memset>
  if(hspi->Instance==SPI1)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a18      	ldr	r2, [pc, #96]	; (800093c <HAL_SPI_MspInit+0x80>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d129      	bne.n	8000932 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <HAL_SPI_MspInit+0x84>)
 80008e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <HAL_SPI_MspInit+0x84>)
 80008e4:	2180      	movs	r1, #128	; 0x80
 80008e6:	0149      	lsls	r1, r1, #5
 80008e8:	430a      	orrs	r2, r1
 80008ea:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <HAL_SPI_MspInit+0x84>)
 80008ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008f0:	4b13      	ldr	r3, [pc, #76]	; (8000940 <HAL_SPI_MspInit+0x84>)
 80008f2:	2101      	movs	r1, #1
 80008f4:	430a      	orrs	r2, r1
 80008f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <HAL_SPI_MspInit+0x84>)
 80008fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008fc:	2201      	movs	r2, #1
 80008fe:	4013      	ands	r3, r2
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000904:	0021      	movs	r1, r4
 8000906:	187b      	adds	r3, r7, r1
 8000908:	22e0      	movs	r2, #224	; 0xe0
 800090a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	187b      	adds	r3, r7, r1
 800090e:	2202      	movs	r2, #2
 8000910:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	187b      	adds	r3, r7, r1
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000918:	187b      	adds	r3, r7, r1
 800091a:	2203      	movs	r2, #3
 800091c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800091e:	187b      	adds	r3, r7, r1
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000924:	187a      	adds	r2, r7, r1
 8000926:	23a0      	movs	r3, #160	; 0xa0
 8000928:	05db      	lsls	r3, r3, #23
 800092a:	0011      	movs	r1, r2
 800092c:	0018      	movs	r0, r3
 800092e:	f000 fad1 	bl	8000ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	46bd      	mov	sp, r7
 8000936:	b009      	add	sp, #36	; 0x24
 8000938:	bd90      	pop	{r4, r7, pc}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	40013000 	.word	0x40013000
 8000940:	40021000 	.word	0x40021000

08000944 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b089      	sub	sp, #36	; 0x24
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	240c      	movs	r4, #12
 800094e:	193b      	adds	r3, r7, r4
 8000950:	0018      	movs	r0, r3
 8000952:	2314      	movs	r3, #20
 8000954:	001a      	movs	r2, r3
 8000956:	2100      	movs	r1, #0
 8000958:	f002 fedc 	bl	8003714 <memset>
  if(huart->Instance==USART2)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a27      	ldr	r2, [pc, #156]	; (8000a00 <HAL_UART_MspInit+0xbc>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d147      	bne.n	80009f6 <HAL_UART_MspInit+0xb2>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000966:	4b27      	ldr	r3, [pc, #156]	; (8000a04 <HAL_UART_MspInit+0xc0>)
 8000968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800096a:	4b26      	ldr	r3, [pc, #152]	; (8000a04 <HAL_UART_MspInit+0xc0>)
 800096c:	2180      	movs	r1, #128	; 0x80
 800096e:	0289      	lsls	r1, r1, #10
 8000970:	430a      	orrs	r2, r1
 8000972:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000974:	4b23      	ldr	r3, [pc, #140]	; (8000a04 <HAL_UART_MspInit+0xc0>)
 8000976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000978:	4b22      	ldr	r3, [pc, #136]	; (8000a04 <HAL_UART_MspInit+0xc0>)
 800097a:	2101      	movs	r1, #1
 800097c:	430a      	orrs	r2, r1
 800097e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000980:	4b20      	ldr	r3, [pc, #128]	; (8000a04 <HAL_UART_MspInit+0xc0>)
 8000982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000984:	2201      	movs	r2, #1
 8000986:	4013      	ands	r3, r2
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA0-CK_IN     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800098c:	193b      	adds	r3, r7, r4
 800098e:	2201      	movs	r2, #1
 8000990:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	193b      	adds	r3, r7, r4
 8000994:	2202      	movs	r2, #2
 8000996:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	193b      	adds	r3, r7, r4
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	2203      	movs	r2, #3
 80009a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 80009a4:	193b      	adds	r3, r7, r4
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009aa:	193a      	adds	r2, r7, r4
 80009ac:	23a0      	movs	r3, #160	; 0xa0
 80009ae:	05db      	lsls	r3, r3, #23
 80009b0:	0011      	movs	r1, r2
 80009b2:	0018      	movs	r0, r3
 80009b4:	f000 fa8e 	bl	8000ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009b8:	0021      	movs	r1, r4
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	2204      	movs	r2, #4
 80009be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	2202      	movs	r2, #2
 80009c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	2203      	movs	r2, #3
 80009d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	2204      	movs	r2, #4
 80009d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d8:	187a      	adds	r2, r7, r1
 80009da:	23a0      	movs	r3, #160	; 0xa0
 80009dc:	05db      	lsls	r3, r3, #23
 80009de:	0011      	movs	r1, r2
 80009e0:	0018      	movs	r0, r3
 80009e2:	f000 fa77 	bl	8000ed4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2100      	movs	r1, #0
 80009ea:	201c      	movs	r0, #28
 80009ec:	f000 f9b8 	bl	8000d60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009f0:	201c      	movs	r0, #28
 80009f2:	f000 f9ca 	bl	8000d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	b009      	add	sp, #36	; 0x24
 80009fc:	bd90      	pop	{r4, r7, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	40004400 	.word	0x40004400
 8000a04:	40021000 	.word	0x40021000

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <NMI_Handler+0x4>

08000a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <HardFault_Handler+0x4>

08000a14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a18:	46c0      	nop			; (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2c:	f000 f8ac 	bl	8000b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a3c:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <USART2_IRQHandler+0x14>)
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f001 fc80 	bl	8002344 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a44:	46c0      	nop			; (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	20000088 	.word	0x20000088

08000a50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000a5c:	4813      	ldr	r0, [pc, #76]	; (8000aac <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000a5e:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000a60:	4813      	ldr	r0, [pc, #76]	; (8000ab0 <LoopForever+0x6>)
    LDR R1, [R0]
 8000a62:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000a64:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000a66:	4a13      	ldr	r2, [pc, #76]	; (8000ab4 <LoopForever+0xa>)
    CMP R1, R2
 8000a68:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000a6a:	d105      	bne.n	8000a78 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000a6c:	4812      	ldr	r0, [pc, #72]	; (8000ab8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000a6e:	4913      	ldr	r1, [pc, #76]	; (8000abc <LoopForever+0x12>)
    STR R1, [R0]
 8000a70:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000a72:	4813      	ldr	r0, [pc, #76]	; (8000ac0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000a74:	4913      	ldr	r1, [pc, #76]	; (8000ac4 <LoopForever+0x1a>)
    STR R1, [R0]
 8000a76:	6001      	str	r1, [r0, #0]

08000a78 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a78:	4813      	ldr	r0, [pc, #76]	; (8000ac8 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000a7a:	4914      	ldr	r1, [pc, #80]	; (8000acc <LoopForever+0x22>)
  ldr r2, =_sidata
 8000a7c:	4a14      	ldr	r2, [pc, #80]	; (8000ad0 <LoopForever+0x26>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a80:	e002      	b.n	8000a88 <LoopCopyDataInit>

08000a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a86:	3304      	adds	r3, #4

08000a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a8c:	d3f9      	bcc.n	8000a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8e:	4a11      	ldr	r2, [pc, #68]	; (8000ad4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000a90:	4c11      	ldr	r4, [pc, #68]	; (8000ad8 <LoopForever+0x2e>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a94:	e001      	b.n	8000a9a <LoopFillZerobss>

08000a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a98:	3204      	adds	r2, #4

08000a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a9c:	d3fb      	bcc.n	8000a96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a9e:	f7ff ffd7 	bl	8000a50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aa2:	f002 fe13 	bl	80036cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aa6:	f7ff fcff 	bl	80004a8 <main>

08000aaa <LoopForever>:

LoopForever:
    b LoopForever
 8000aaa:	e7fe      	b.n	8000aaa <LoopForever>
   ldr   r0, =_estack
 8000aac:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000ab0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000ab4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000ab8:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000abc:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000ac0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000ac4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000acc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ad0:	080037b8 	.word	0x080037b8
  ldr r2, =_sbss
 8000ad4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000ad8:	20000118 	.word	0x20000118

08000adc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000adc:	e7fe      	b.n	8000adc <ADC1_IRQHandler>
	...

08000ae0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000aec:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <HAL_Init+0x3c>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <HAL_Init+0x3c>)
 8000af2:	2140      	movs	r1, #64	; 0x40
 8000af4:	430a      	orrs	r2, r1
 8000af6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000af8:	2003      	movs	r0, #3
 8000afa:	f000 f811 	bl	8000b20 <HAL_InitTick>
 8000afe:	1e03      	subs	r3, r0, #0
 8000b00:	d003      	beq.n	8000b0a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000b02:	1dfb      	adds	r3, r7, #7
 8000b04:	2201      	movs	r2, #1
 8000b06:	701a      	strb	r2, [r3, #0]
 8000b08:	e001      	b.n	8000b0e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b0a:	f7ff fec3 	bl	8000894 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b0e:	1dfb      	adds	r3, r7, #7
 8000b10:	781b      	ldrb	r3, [r3, #0]
}
 8000b12:	0018      	movs	r0, r3
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b002      	add	sp, #8
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	40022000 	.word	0x40022000

08000b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b28:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <HAL_InitTick+0x5c>)
 8000b2a:	681c      	ldr	r4, [r3, #0]
 8000b2c:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <HAL_InitTick+0x60>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	0019      	movs	r1, r3
 8000b32:	23fa      	movs	r3, #250	; 0xfa
 8000b34:	0098      	lsls	r0, r3, #2
 8000b36:	f7ff fae7 	bl	8000108 <__udivsi3>
 8000b3a:	0003      	movs	r3, r0
 8000b3c:	0019      	movs	r1, r3
 8000b3e:	0020      	movs	r0, r4
 8000b40:	f7ff fae2 	bl	8000108 <__udivsi3>
 8000b44:	0003      	movs	r3, r0
 8000b46:	0018      	movs	r0, r3
 8000b48:	f000 f92f 	bl	8000daa <HAL_SYSTICK_Config>
 8000b4c:	1e03      	subs	r3, r0, #0
 8000b4e:	d001      	beq.n	8000b54 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b50:	2301      	movs	r3, #1
 8000b52:	e00f      	b.n	8000b74 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b03      	cmp	r3, #3
 8000b58:	d80b      	bhi.n	8000b72 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	425b      	negs	r3, r3
 8000b60:	2200      	movs	r2, #0
 8000b62:	0018      	movs	r0, r3
 8000b64:	f000 f8fc 	bl	8000d60 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_InitTick+0x64>)
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	e000      	b.n	8000b74 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
}
 8000b74:	0018      	movs	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	b003      	add	sp, #12
 8000b7a:	bd90      	pop	{r4, r7, pc}
 8000b7c:	20000008 	.word	0x20000008
 8000b80:	20000010 	.word	0x20000010
 8000b84:	2000000c 	.word	0x2000000c

08000b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <HAL_IncTick+0x1c>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	001a      	movs	r2, r3
 8000b92:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <HAL_IncTick+0x20>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	18d2      	adds	r2, r2, r3
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <HAL_IncTick+0x20>)
 8000b9a:	601a      	str	r2, [r3, #0]
}
 8000b9c:	46c0      	nop			; (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	20000010 	.word	0x20000010
 8000ba8:	20000114 	.word	0x20000114

08000bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb0:	4b02      	ldr	r3, [pc, #8]	; (8000bbc <HAL_GetTick+0x10>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
}
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	20000114 	.word	0x20000114

08000bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc8:	f7ff fff0 	bl	8000bac <HAL_GetTick>
 8000bcc:	0003      	movs	r3, r0
 8000bce:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	d005      	beq.n	8000be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <HAL_Delay+0x44>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	001a      	movs	r2, r3
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	189b      	adds	r3, r3, r2
 8000be4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	f7ff ffe0 	bl	8000bac <HAL_GetTick>
 8000bec:	0002      	movs	r2, r0
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d8f7      	bhi.n	8000be8 <HAL_Delay+0x28>
  {
  }
}
 8000bf8:	46c0      	nop			; (mov r8, r8)
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b004      	add	sp, #16
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	20000010 	.word	0x20000010

08000c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	0002      	movs	r2, r0
 8000c10:	1dfb      	adds	r3, r7, #7
 8000c12:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c14:	1dfb      	adds	r3, r7, #7
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b7f      	cmp	r3, #127	; 0x7f
 8000c1a:	d809      	bhi.n	8000c30 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1c:	1dfb      	adds	r3, r7, #7
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	001a      	movs	r2, r3
 8000c22:	231f      	movs	r3, #31
 8000c24:	401a      	ands	r2, r3
 8000c26:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <__NVIC_EnableIRQ+0x30>)
 8000c28:	2101      	movs	r1, #1
 8000c2a:	4091      	lsls	r1, r2
 8000c2c:	000a      	movs	r2, r1
 8000c2e:	601a      	str	r2, [r3, #0]
  }
}
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b002      	add	sp, #8
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	e000e100 	.word	0xe000e100

08000c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c3c:	b590      	push	{r4, r7, lr}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	0002      	movs	r2, r0
 8000c44:	6039      	str	r1, [r7, #0]
 8000c46:	1dfb      	adds	r3, r7, #7
 8000c48:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b7f      	cmp	r3, #127	; 0x7f
 8000c50:	d828      	bhi.n	8000ca4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c52:	4a2f      	ldr	r2, [pc, #188]	; (8000d10 <__NVIC_SetPriority+0xd4>)
 8000c54:	1dfb      	adds	r3, r7, #7
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	b25b      	sxtb	r3, r3
 8000c5a:	089b      	lsrs	r3, r3, #2
 8000c5c:	33c0      	adds	r3, #192	; 0xc0
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	589b      	ldr	r3, [r3, r2]
 8000c62:	1dfa      	adds	r2, r7, #7
 8000c64:	7812      	ldrb	r2, [r2, #0]
 8000c66:	0011      	movs	r1, r2
 8000c68:	2203      	movs	r2, #3
 8000c6a:	400a      	ands	r2, r1
 8000c6c:	00d2      	lsls	r2, r2, #3
 8000c6e:	21ff      	movs	r1, #255	; 0xff
 8000c70:	4091      	lsls	r1, r2
 8000c72:	000a      	movs	r2, r1
 8000c74:	43d2      	mvns	r2, r2
 8000c76:	401a      	ands	r2, r3
 8000c78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	019b      	lsls	r3, r3, #6
 8000c7e:	22ff      	movs	r2, #255	; 0xff
 8000c80:	401a      	ands	r2, r3
 8000c82:	1dfb      	adds	r3, r7, #7
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	0018      	movs	r0, r3
 8000c88:	2303      	movs	r3, #3
 8000c8a:	4003      	ands	r3, r0
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c90:	481f      	ldr	r0, [pc, #124]	; (8000d10 <__NVIC_SetPriority+0xd4>)
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	b25b      	sxtb	r3, r3
 8000c98:	089b      	lsrs	r3, r3, #2
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	33c0      	adds	r3, #192	; 0xc0
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ca2:	e031      	b.n	8000d08 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ca4:	4a1b      	ldr	r2, [pc, #108]	; (8000d14 <__NVIC_SetPriority+0xd8>)
 8000ca6:	1dfb      	adds	r3, r7, #7
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	0019      	movs	r1, r3
 8000cac:	230f      	movs	r3, #15
 8000cae:	400b      	ands	r3, r1
 8000cb0:	3b08      	subs	r3, #8
 8000cb2:	089b      	lsrs	r3, r3, #2
 8000cb4:	3306      	adds	r3, #6
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	18d3      	adds	r3, r2, r3
 8000cba:	3304      	adds	r3, #4
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	1dfa      	adds	r2, r7, #7
 8000cc0:	7812      	ldrb	r2, [r2, #0]
 8000cc2:	0011      	movs	r1, r2
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	400a      	ands	r2, r1
 8000cc8:	00d2      	lsls	r2, r2, #3
 8000cca:	21ff      	movs	r1, #255	; 0xff
 8000ccc:	4091      	lsls	r1, r2
 8000cce:	000a      	movs	r2, r1
 8000cd0:	43d2      	mvns	r2, r2
 8000cd2:	401a      	ands	r2, r3
 8000cd4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	019b      	lsls	r3, r3, #6
 8000cda:	22ff      	movs	r2, #255	; 0xff
 8000cdc:	401a      	ands	r2, r3
 8000cde:	1dfb      	adds	r3, r7, #7
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	4003      	ands	r3, r0
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cec:	4809      	ldr	r0, [pc, #36]	; (8000d14 <__NVIC_SetPriority+0xd8>)
 8000cee:	1dfb      	adds	r3, r7, #7
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	001c      	movs	r4, r3
 8000cf4:	230f      	movs	r3, #15
 8000cf6:	4023      	ands	r3, r4
 8000cf8:	3b08      	subs	r3, #8
 8000cfa:	089b      	lsrs	r3, r3, #2
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	3306      	adds	r3, #6
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	18c3      	adds	r3, r0, r3
 8000d04:	3304      	adds	r3, #4
 8000d06:	601a      	str	r2, [r3, #0]
}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b003      	add	sp, #12
 8000d0e:	bd90      	pop	{r4, r7, pc}
 8000d10:	e000e100 	.word	0xe000e100
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	1e5a      	subs	r2, r3, #1
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	045b      	lsls	r3, r3, #17
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d301      	bcc.n	8000d30 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e010      	b.n	8000d52 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d30:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <SysTick_Config+0x44>)
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	3a01      	subs	r2, #1
 8000d36:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d38:	2301      	movs	r3, #1
 8000d3a:	425b      	negs	r3, r3
 8000d3c:	2103      	movs	r1, #3
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f7ff ff7c 	bl	8000c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <SysTick_Config+0x44>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d4a:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <SysTick_Config+0x44>)
 8000d4c:	2207      	movs	r2, #7
 8000d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	0018      	movs	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	b002      	add	sp, #8
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	e000e010 	.word	0xe000e010

08000d60 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60b9      	str	r1, [r7, #8]
 8000d68:	607a      	str	r2, [r7, #4]
 8000d6a:	210f      	movs	r1, #15
 8000d6c:	187b      	adds	r3, r7, r1
 8000d6e:	1c02      	adds	r2, r0, #0
 8000d70:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	187b      	adds	r3, r7, r1
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	b25b      	sxtb	r3, r3
 8000d7a:	0011      	movs	r1, r2
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f7ff ff5d 	bl	8000c3c <__NVIC_SetPriority>
}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b004      	add	sp, #16
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	0002      	movs	r2, r0
 8000d92:	1dfb      	adds	r3, r7, #7
 8000d94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d96:	1dfb      	adds	r3, r7, #7
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	b25b      	sxtb	r3, r3
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f7ff ff33 	bl	8000c08 <__NVIC_EnableIRQ>
}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b002      	add	sp, #8
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	0018      	movs	r0, r3
 8000db6:	f7ff ffaf 	bl	8000d18 <SysTick_Config>
 8000dba:	0003      	movs	r3, r0
}
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	b002      	add	sp, #8
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dcc:	230f      	movs	r3, #15
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2225      	movs	r2, #37	; 0x25
 8000dd8:	5c9b      	ldrb	r3, [r3, r2]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d008      	beq.n	8000df2 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2204      	movs	r2, #4
 8000de4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2224      	movs	r2, #36	; 0x24
 8000dea:	2100      	movs	r1, #0
 8000dec:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e024      	b.n	8000e3c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	210e      	movs	r1, #14
 8000dfe:	438a      	bics	r2, r1
 8000e00:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	438a      	bics	r2, r1
 8000e10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	221c      	movs	r2, #28
 8000e18:	401a      	ands	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	2101      	movs	r1, #1
 8000e20:	4091      	lsls	r1, r2
 8000e22:	000a      	movs	r2, r1
 8000e24:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2225      	movs	r2, #37	; 0x25
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2224      	movs	r2, #36	; 0x24
 8000e32:	2100      	movs	r1, #0
 8000e34:	5499      	strb	r1, [r3, r2]

    return status;
 8000e36:	230f      	movs	r3, #15
 8000e38:	18fb      	adds	r3, r7, r3
 8000e3a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	b004      	add	sp, #16
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e4c:	210f      	movs	r1, #15
 8000e4e:	187b      	adds	r3, r7, r1
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2225      	movs	r2, #37	; 0x25
 8000e58:	5c9b      	ldrb	r3, [r3, r2]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d006      	beq.n	8000e6e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2204      	movs	r2, #4
 8000e64:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000e66:	187b      	adds	r3, r7, r1
 8000e68:	2201      	movs	r2, #1
 8000e6a:	701a      	strb	r2, [r3, #0]
 8000e6c:	e02a      	b.n	8000ec4 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	210e      	movs	r1, #14
 8000e7a:	438a      	bics	r2, r1
 8000e7c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2101      	movs	r1, #1
 8000e8a:	438a      	bics	r2, r1
 8000e8c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	221c      	movs	r2, #28
 8000e94:	401a      	ands	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	4091      	lsls	r1, r2
 8000e9e:	000a      	movs	r2, r1
 8000ea0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2225      	movs	r2, #37	; 0x25
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2224      	movs	r2, #36	; 0x24
 8000eae:	2100      	movs	r1, #0
 8000eb0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d004      	beq.n	8000ec4 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	0010      	movs	r0, r2
 8000ec2:	4798      	blx	r3
    }
  }
  return status;
 8000ec4:	230f      	movs	r3, #15
 8000ec6:	18fb      	adds	r3, r7, r3
 8000ec8:	781b      	ldrb	r3, [r3, #0]
}
 8000eca:	0018      	movs	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	b004      	add	sp, #16
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000eea:	e143      	b.n	8001174 <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	4091      	lsls	r1, r2
 8000ef6:	000a      	movs	r2, r1
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d100      	bne.n	8000f04 <HAL_GPIO_Init+0x30>
 8000f02:	e134      	b.n	800116e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2203      	movs	r2, #3
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d005      	beq.n	8000f1c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2203      	movs	r2, #3
 8000f16:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d130      	bne.n	8000f7e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	2203      	movs	r2, #3
 8000f28:	409a      	lsls	r2, r3
 8000f2a:	0013      	movs	r3, r2
 8000f2c:	43da      	mvns	r2, r3
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	68da      	ldr	r2, [r3, #12]
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	409a      	lsls	r2, r3
 8000f3e:	0013      	movs	r3, r2
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f52:	2201      	movs	r2, #1
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	409a      	lsls	r2, r3
 8000f58:	0013      	movs	r3, r2
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	091b      	lsrs	r3, r3, #4
 8000f68:	2201      	movs	r2, #1
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	409a      	lsls	r2, r3
 8000f70:	0013      	movs	r3, r2
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	2203      	movs	r2, #3
 8000f84:	4013      	ands	r3, r2
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	d017      	beq.n	8000fba <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	2203      	movs	r2, #3
 8000f96:	409a      	lsls	r2, r3
 8000f98:	0013      	movs	r3, r2
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	409a      	lsls	r2, r3
 8000fac:	0013      	movs	r3, r2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d123      	bne.n	800100e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	08da      	lsrs	r2, r3, #3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3208      	adds	r2, #8
 8000fce:	0092      	lsls	r2, r2, #2
 8000fd0:	58d3      	ldr	r3, [r2, r3]
 8000fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	2207      	movs	r2, #7
 8000fd8:	4013      	ands	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	220f      	movs	r2, #15
 8000fde:	409a      	lsls	r2, r3
 8000fe0:	0013      	movs	r3, r2
 8000fe2:	43da      	mvns	r2, r3
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	691a      	ldr	r2, [r3, #16]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	2107      	movs	r1, #7
 8000ff2:	400b      	ands	r3, r1
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	409a      	lsls	r2, r3
 8000ff8:	0013      	movs	r3, r2
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	08da      	lsrs	r2, r3, #3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3208      	adds	r2, #8
 8001008:	0092      	lsls	r2, r2, #2
 800100a:	6939      	ldr	r1, [r7, #16]
 800100c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	2203      	movs	r2, #3
 800101a:	409a      	lsls	r2, r3
 800101c:	0013      	movs	r3, r2
 800101e:	43da      	mvns	r2, r3
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2203      	movs	r2, #3
 800102c:	401a      	ands	r2, r3
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	409a      	lsls	r2, r3
 8001034:	0013      	movs	r3, r2
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	23c0      	movs	r3, #192	; 0xc0
 8001048:	029b      	lsls	r3, r3, #10
 800104a:	4013      	ands	r3, r2
 800104c:	d100      	bne.n	8001050 <HAL_GPIO_Init+0x17c>
 800104e:	e08e      	b.n	800116e <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001050:	4b4e      	ldr	r3, [pc, #312]	; (800118c <HAL_GPIO_Init+0x2b8>)
 8001052:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001054:	4b4d      	ldr	r3, [pc, #308]	; (800118c <HAL_GPIO_Init+0x2b8>)
 8001056:	2101      	movs	r1, #1
 8001058:	430a      	orrs	r2, r1
 800105a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800105c:	4a4c      	ldr	r2, [pc, #304]	; (8001190 <HAL_GPIO_Init+0x2bc>)
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	089b      	lsrs	r3, r3, #2
 8001062:	3302      	adds	r3, #2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	589b      	ldr	r3, [r3, r2]
 8001068:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	2203      	movs	r2, #3
 800106e:	4013      	ands	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	220f      	movs	r2, #15
 8001074:	409a      	lsls	r2, r3
 8001076:	0013      	movs	r3, r2
 8001078:	43da      	mvns	r2, r3
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	23a0      	movs	r3, #160	; 0xa0
 8001084:	05db      	lsls	r3, r3, #23
 8001086:	429a      	cmp	r2, r3
 8001088:	d00d      	beq.n	80010a6 <HAL_GPIO_Init+0x1d2>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a41      	ldr	r2, [pc, #260]	; (8001194 <HAL_GPIO_Init+0x2c0>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d007      	beq.n	80010a2 <HAL_GPIO_Init+0x1ce>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a40      	ldr	r2, [pc, #256]	; (8001198 <HAL_GPIO_Init+0x2c4>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d101      	bne.n	800109e <HAL_GPIO_Init+0x1ca>
 800109a:	2302      	movs	r3, #2
 800109c:	e004      	b.n	80010a8 <HAL_GPIO_Init+0x1d4>
 800109e:	2306      	movs	r3, #6
 80010a0:	e002      	b.n	80010a8 <HAL_GPIO_Init+0x1d4>
 80010a2:	2301      	movs	r3, #1
 80010a4:	e000      	b.n	80010a8 <HAL_GPIO_Init+0x1d4>
 80010a6:	2300      	movs	r3, #0
 80010a8:	697a      	ldr	r2, [r7, #20]
 80010aa:	2103      	movs	r1, #3
 80010ac:	400a      	ands	r2, r1
 80010ae:	0092      	lsls	r2, r2, #2
 80010b0:	4093      	lsls	r3, r2
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010b8:	4935      	ldr	r1, [pc, #212]	; (8001190 <HAL_GPIO_Init+0x2bc>)
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	089b      	lsrs	r3, r3, #2
 80010be:	3302      	adds	r3, #2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010c6:	4b35      	ldr	r3, [pc, #212]	; (800119c <HAL_GPIO_Init+0x2c8>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	43da      	mvns	r2, r3
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	4013      	ands	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685a      	ldr	r2, [r3, #4]
 80010da:	2380      	movs	r3, #128	; 0x80
 80010dc:	025b      	lsls	r3, r3, #9
 80010de:	4013      	ands	r3, r2
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010ea:	4b2c      	ldr	r3, [pc, #176]	; (800119c <HAL_GPIO_Init+0x2c8>)
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80010f0:	4b2a      	ldr	r3, [pc, #168]	; (800119c <HAL_GPIO_Init+0x2c8>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	43da      	mvns	r2, r3
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	2380      	movs	r3, #128	; 0x80
 8001106:	029b      	lsls	r3, r3, #10
 8001108:	4013      	ands	r3, r2
 800110a:	d003      	beq.n	8001114 <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001114:	4b21      	ldr	r3, [pc, #132]	; (800119c <HAL_GPIO_Init+0x2c8>)
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800111a:	4b20      	ldr	r3, [pc, #128]	; (800119c <HAL_GPIO_Init+0x2c8>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	43da      	mvns	r2, r3
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	2380      	movs	r3, #128	; 0x80
 8001130:	035b      	lsls	r3, r3, #13
 8001132:	4013      	ands	r3, r2
 8001134:	d003      	beq.n	800113e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4313      	orrs	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800113e:	4b17      	ldr	r3, [pc, #92]	; (800119c <HAL_GPIO_Init+0x2c8>)
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001144:	4b15      	ldr	r3, [pc, #84]	; (800119c <HAL_GPIO_Init+0x2c8>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	43da      	mvns	r2, r3
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	2380      	movs	r3, #128	; 0x80
 800115a:	039b      	lsls	r3, r3, #14
 800115c:	4013      	ands	r3, r2
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <HAL_GPIO_Init+0x2c8>)
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	3301      	adds	r3, #1
 8001172:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	40da      	lsrs	r2, r3
 800117c:	1e13      	subs	r3, r2, #0
 800117e:	d000      	beq.n	8001182 <HAL_GPIO_Init+0x2ae>
 8001180:	e6b4      	b.n	8000eec <HAL_GPIO_Init+0x18>
  }
}
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	46c0      	nop			; (mov r8, r8)
 8001186:	46bd      	mov	sp, r7
 8001188:	b006      	add	sp, #24
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40021000 	.word	0x40021000
 8001190:	40010000 	.word	0x40010000
 8001194:	50000400 	.word	0x50000400
 8001198:	50000800 	.word	0x50000800
 800119c:	40010400 	.word	0x40010400

080011a0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	0008      	movs	r0, r1
 80011aa:	0011      	movs	r1, r2
 80011ac:	1cbb      	adds	r3, r7, #2
 80011ae:	1c02      	adds	r2, r0, #0
 80011b0:	801a      	strh	r2, [r3, #0]
 80011b2:	1c7b      	adds	r3, r7, #1
 80011b4:	1c0a      	adds	r2, r1, #0
 80011b6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011b8:	1c7b      	adds	r3, r7, #1
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d004      	beq.n	80011ca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011c0:	1cbb      	adds	r3, r7, #2
 80011c2:	881a      	ldrh	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80011c8:	e003      	b.n	80011d2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80011ca:	1cbb      	adds	r3, r7, #2
 80011cc:	881a      	ldrh	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	46bd      	mov	sp, r7
 80011d6:	b002      	add	sp, #8
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011dc:	b5b0      	push	{r4, r5, r7, lr}
 80011de:	b08a      	sub	sp, #40	; 0x28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d102      	bne.n	80011f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	f000 fb6c 	bl	80018c8 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011f0:	4bc8      	ldr	r3, [pc, #800]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	220c      	movs	r2, #12
 80011f6:	4013      	ands	r3, r2
 80011f8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011fa:	4bc6      	ldr	r3, [pc, #792]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 80011fc:	68da      	ldr	r2, [r3, #12]
 80011fe:	2380      	movs	r3, #128	; 0x80
 8001200:	025b      	lsls	r3, r3, #9
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2201      	movs	r2, #1
 800120c:	4013      	ands	r3, r2
 800120e:	d100      	bne.n	8001212 <HAL_RCC_OscConfig+0x36>
 8001210:	e07d      	b.n	800130e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	2b08      	cmp	r3, #8
 8001216:	d007      	beq.n	8001228 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	2b0c      	cmp	r3, #12
 800121c:	d112      	bne.n	8001244 <HAL_RCC_OscConfig+0x68>
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	2380      	movs	r3, #128	; 0x80
 8001222:	025b      	lsls	r3, r3, #9
 8001224:	429a      	cmp	r2, r3
 8001226:	d10d      	bne.n	8001244 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001228:	4bba      	ldr	r3, [pc, #744]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	2380      	movs	r3, #128	; 0x80
 800122e:	029b      	lsls	r3, r3, #10
 8001230:	4013      	ands	r3, r2
 8001232:	d100      	bne.n	8001236 <HAL_RCC_OscConfig+0x5a>
 8001234:	e06a      	b.n	800130c <HAL_RCC_OscConfig+0x130>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d166      	bne.n	800130c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	f000 fb42 	bl	80018c8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	2380      	movs	r3, #128	; 0x80
 800124a:	025b      	lsls	r3, r3, #9
 800124c:	429a      	cmp	r2, r3
 800124e:	d107      	bne.n	8001260 <HAL_RCC_OscConfig+0x84>
 8001250:	4bb0      	ldr	r3, [pc, #704]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4baf      	ldr	r3, [pc, #700]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 8001256:	2180      	movs	r1, #128	; 0x80
 8001258:	0249      	lsls	r1, r1, #9
 800125a:	430a      	orrs	r2, r1
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	e027      	b.n	80012b0 <HAL_RCC_OscConfig+0xd4>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	23a0      	movs	r3, #160	; 0xa0
 8001266:	02db      	lsls	r3, r3, #11
 8001268:	429a      	cmp	r2, r3
 800126a:	d10e      	bne.n	800128a <HAL_RCC_OscConfig+0xae>
 800126c:	4ba9      	ldr	r3, [pc, #676]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4ba8      	ldr	r3, [pc, #672]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 8001272:	2180      	movs	r1, #128	; 0x80
 8001274:	02c9      	lsls	r1, r1, #11
 8001276:	430a      	orrs	r2, r1
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	4ba6      	ldr	r3, [pc, #664]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	4ba5      	ldr	r3, [pc, #660]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 8001280:	2180      	movs	r1, #128	; 0x80
 8001282:	0249      	lsls	r1, r1, #9
 8001284:	430a      	orrs	r2, r1
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	e012      	b.n	80012b0 <HAL_RCC_OscConfig+0xd4>
 800128a:	4ba2      	ldr	r3, [pc, #648]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4ba1      	ldr	r3, [pc, #644]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 8001290:	49a1      	ldr	r1, [pc, #644]	; (8001518 <HAL_RCC_OscConfig+0x33c>)
 8001292:	400a      	ands	r2, r1
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	4b9f      	ldr	r3, [pc, #636]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	2380      	movs	r3, #128	; 0x80
 800129c:	025b      	lsls	r3, r3, #9
 800129e:	4013      	ands	r3, r2
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4b9b      	ldr	r3, [pc, #620]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4b9a      	ldr	r3, [pc, #616]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 80012aa:	499c      	ldr	r1, [pc, #624]	; (800151c <HAL_RCC_OscConfig+0x340>)
 80012ac:	400a      	ands	r2, r1
 80012ae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d014      	beq.n	80012e2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b8:	f7ff fc78 	bl	8000bac <HAL_GetTick>
 80012bc:	0003      	movs	r3, r0
 80012be:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012c0:	e008      	b.n	80012d4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c2:	f7ff fc73 	bl	8000bac <HAL_GetTick>
 80012c6:	0002      	movs	r2, r0
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b64      	cmp	r3, #100	; 0x64
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e2f9      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012d4:	4b8f      	ldr	r3, [pc, #572]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	2380      	movs	r3, #128	; 0x80
 80012da:	029b      	lsls	r3, r3, #10
 80012dc:	4013      	ands	r3, r2
 80012de:	d0f0      	beq.n	80012c2 <HAL_RCC_OscConfig+0xe6>
 80012e0:	e015      	b.n	800130e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e2:	f7ff fc63 	bl	8000bac <HAL_GetTick>
 80012e6:	0003      	movs	r3, r0
 80012e8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012ec:	f7ff fc5e 	bl	8000bac <HAL_GetTick>
 80012f0:	0002      	movs	r2, r0
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b64      	cmp	r3, #100	; 0x64
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e2e4      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012fe:	4b85      	ldr	r3, [pc, #532]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	029b      	lsls	r3, r3, #10
 8001306:	4013      	ands	r3, r2
 8001308:	d1f0      	bne.n	80012ec <HAL_RCC_OscConfig+0x110>
 800130a:	e000      	b.n	800130e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2202      	movs	r2, #2
 8001314:	4013      	ands	r3, r2
 8001316:	d100      	bne.n	800131a <HAL_RCC_OscConfig+0x13e>
 8001318:	e099      	b.n	800144e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	2220      	movs	r2, #32
 8001324:	4013      	ands	r3, r2
 8001326:	d009      	beq.n	800133c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001328:	4b7a      	ldr	r3, [pc, #488]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b79      	ldr	r3, [pc, #484]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 800132e:	2120      	movs	r1, #32
 8001330:	430a      	orrs	r2, r1
 8001332:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001336:	2220      	movs	r2, #32
 8001338:	4393      	bics	r3, r2
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	2b04      	cmp	r3, #4
 8001340:	d005      	beq.n	800134e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	2b0c      	cmp	r3, #12
 8001346:	d13e      	bne.n	80013c6 <HAL_RCC_OscConfig+0x1ea>
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d13b      	bne.n	80013c6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800134e:	4b71      	ldr	r3, [pc, #452]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2204      	movs	r2, #4
 8001354:	4013      	ands	r3, r2
 8001356:	d004      	beq.n	8001362 <HAL_RCC_OscConfig+0x186>
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e2b2      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001362:	4b6c      	ldr	r3, [pc, #432]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	4a6e      	ldr	r2, [pc, #440]	; (8001520 <HAL_RCC_OscConfig+0x344>)
 8001368:	4013      	ands	r3, r2
 800136a:	0019      	movs	r1, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	021a      	lsls	r2, r3, #8
 8001372:	4b68      	ldr	r3, [pc, #416]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 8001374:	430a      	orrs	r2, r1
 8001376:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001378:	4b66      	ldr	r3, [pc, #408]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2209      	movs	r2, #9
 800137e:	4393      	bics	r3, r2
 8001380:	0019      	movs	r1, r3
 8001382:	4b64      	ldr	r3, [pc, #400]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 8001384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001386:	430a      	orrs	r2, r1
 8001388:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800138a:	f000 fbeb 	bl	8001b64 <HAL_RCC_GetSysClockFreq>
 800138e:	0001      	movs	r1, r0
 8001390:	4b60      	ldr	r3, [pc, #384]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	091b      	lsrs	r3, r3, #4
 8001396:	220f      	movs	r2, #15
 8001398:	4013      	ands	r3, r2
 800139a:	4a62      	ldr	r2, [pc, #392]	; (8001524 <HAL_RCC_OscConfig+0x348>)
 800139c:	5cd3      	ldrb	r3, [r2, r3]
 800139e:	000a      	movs	r2, r1
 80013a0:	40da      	lsrs	r2, r3
 80013a2:	4b61      	ldr	r3, [pc, #388]	; (8001528 <HAL_RCC_OscConfig+0x34c>)
 80013a4:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80013a6:	4b61      	ldr	r3, [pc, #388]	; (800152c <HAL_RCC_OscConfig+0x350>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2513      	movs	r5, #19
 80013ac:	197c      	adds	r4, r7, r5
 80013ae:	0018      	movs	r0, r3
 80013b0:	f7ff fbb6 	bl	8000b20 <HAL_InitTick>
 80013b4:	0003      	movs	r3, r0
 80013b6:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80013b8:	197b      	adds	r3, r7, r5
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d046      	beq.n	800144e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80013c0:	197b      	adds	r3, r7, r5
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	e280      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80013c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d027      	beq.n	800141c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80013cc:	4b51      	ldr	r3, [pc, #324]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2209      	movs	r2, #9
 80013d2:	4393      	bics	r3, r2
 80013d4:	0019      	movs	r1, r3
 80013d6:	4b4f      	ldr	r3, [pc, #316]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 80013d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013da:	430a      	orrs	r2, r1
 80013dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013de:	f7ff fbe5 	bl	8000bac <HAL_GetTick>
 80013e2:	0003      	movs	r3, r0
 80013e4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013e8:	f7ff fbe0 	bl	8000bac <HAL_GetTick>
 80013ec:	0002      	movs	r2, r0
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e266      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013fa:	4b46      	ldr	r3, [pc, #280]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2204      	movs	r2, #4
 8001400:	4013      	ands	r3, r2
 8001402:	d0f1      	beq.n	80013e8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001404:	4b43      	ldr	r3, [pc, #268]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	4a45      	ldr	r2, [pc, #276]	; (8001520 <HAL_RCC_OscConfig+0x344>)
 800140a:	4013      	ands	r3, r2
 800140c:	0019      	movs	r1, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	021a      	lsls	r2, r3, #8
 8001414:	4b3f      	ldr	r3, [pc, #252]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 8001416:	430a      	orrs	r2, r1
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	e018      	b.n	800144e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800141c:	4b3d      	ldr	r3, [pc, #244]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b3c      	ldr	r3, [pc, #240]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 8001422:	2101      	movs	r1, #1
 8001424:	438a      	bics	r2, r1
 8001426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001428:	f7ff fbc0 	bl	8000bac <HAL_GetTick>
 800142c:	0003      	movs	r3, r0
 800142e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001432:	f7ff fbbb 	bl	8000bac <HAL_GetTick>
 8001436:	0002      	movs	r2, r0
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e241      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001444:	4b33      	ldr	r3, [pc, #204]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2204      	movs	r2, #4
 800144a:	4013      	ands	r3, r2
 800144c:	d1f1      	bne.n	8001432 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2210      	movs	r2, #16
 8001454:	4013      	ands	r3, r2
 8001456:	d100      	bne.n	800145a <HAL_RCC_OscConfig+0x27e>
 8001458:	e0a1      	b.n	800159e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d140      	bne.n	80014e2 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001460:	4b2c      	ldr	r3, [pc, #176]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4013      	ands	r3, r2
 800146a:	d005      	beq.n	8001478 <HAL_RCC_OscConfig+0x29c>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d101      	bne.n	8001478 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e227      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001478:	4b26      	ldr	r3, [pc, #152]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	4a2c      	ldr	r2, [pc, #176]	; (8001530 <HAL_RCC_OscConfig+0x354>)
 800147e:	4013      	ands	r3, r2
 8001480:	0019      	movs	r1, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a1a      	ldr	r2, [r3, #32]
 8001486:	4b23      	ldr	r3, [pc, #140]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 8001488:	430a      	orrs	r2, r1
 800148a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800148c:	4b21      	ldr	r3, [pc, #132]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	021b      	lsls	r3, r3, #8
 8001492:	0a19      	lsrs	r1, r3, #8
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69db      	ldr	r3, [r3, #28]
 8001498:	061a      	lsls	r2, r3, #24
 800149a:	4b1e      	ldr	r3, [pc, #120]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 800149c:	430a      	orrs	r2, r1
 800149e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	0b5b      	lsrs	r3, r3, #13
 80014a6:	3301      	adds	r3, #1
 80014a8:	2280      	movs	r2, #128	; 0x80
 80014aa:	0212      	lsls	r2, r2, #8
 80014ac:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80014ae:	4b19      	ldr	r3, [pc, #100]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	091b      	lsrs	r3, r3, #4
 80014b4:	210f      	movs	r1, #15
 80014b6:	400b      	ands	r3, r1
 80014b8:	491a      	ldr	r1, [pc, #104]	; (8001524 <HAL_RCC_OscConfig+0x348>)
 80014ba:	5ccb      	ldrb	r3, [r1, r3]
 80014bc:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014be:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <HAL_RCC_OscConfig+0x34c>)
 80014c0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80014c2:	4b1a      	ldr	r3, [pc, #104]	; (800152c <HAL_RCC_OscConfig+0x350>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2513      	movs	r5, #19
 80014c8:	197c      	adds	r4, r7, r5
 80014ca:	0018      	movs	r0, r3
 80014cc:	f7ff fb28 	bl	8000b20 <HAL_InitTick>
 80014d0:	0003      	movs	r3, r0
 80014d2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80014d4:	197b      	adds	r3, r7, r5
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d060      	beq.n	800159e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80014dc:	197b      	adds	r3, r7, r5
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	e1f2      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d03f      	beq.n	800156a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <HAL_RCC_OscConfig+0x338>)
 80014f0:	2180      	movs	r1, #128	; 0x80
 80014f2:	0049      	lsls	r1, r1, #1
 80014f4:	430a      	orrs	r2, r1
 80014f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f8:	f7ff fb58 	bl	8000bac <HAL_GetTick>
 80014fc:	0003      	movs	r3, r0
 80014fe:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001500:	e018      	b.n	8001534 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001502:	f7ff fb53 	bl	8000bac <HAL_GetTick>
 8001506:	0002      	movs	r2, r0
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d911      	bls.n	8001534 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e1d9      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
 8001514:	40021000 	.word	0x40021000
 8001518:	fffeffff 	.word	0xfffeffff
 800151c:	fffbffff 	.word	0xfffbffff
 8001520:	ffffe0ff 	.word	0xffffe0ff
 8001524:	0800373c 	.word	0x0800373c
 8001528:	20000008 	.word	0x20000008
 800152c:	2000000c 	.word	0x2000000c
 8001530:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001534:	4bc9      	ldr	r3, [pc, #804]	; (800185c <HAL_RCC_OscConfig+0x680>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4013      	ands	r3, r2
 800153e:	d0e0      	beq.n	8001502 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001540:	4bc6      	ldr	r3, [pc, #792]	; (800185c <HAL_RCC_OscConfig+0x680>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	4ac6      	ldr	r2, [pc, #792]	; (8001860 <HAL_RCC_OscConfig+0x684>)
 8001546:	4013      	ands	r3, r2
 8001548:	0019      	movs	r1, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a1a      	ldr	r2, [r3, #32]
 800154e:	4bc3      	ldr	r3, [pc, #780]	; (800185c <HAL_RCC_OscConfig+0x680>)
 8001550:	430a      	orrs	r2, r1
 8001552:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001554:	4bc1      	ldr	r3, [pc, #772]	; (800185c <HAL_RCC_OscConfig+0x680>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	021b      	lsls	r3, r3, #8
 800155a:	0a19      	lsrs	r1, r3, #8
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69db      	ldr	r3, [r3, #28]
 8001560:	061a      	lsls	r2, r3, #24
 8001562:	4bbe      	ldr	r3, [pc, #760]	; (800185c <HAL_RCC_OscConfig+0x680>)
 8001564:	430a      	orrs	r2, r1
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	e019      	b.n	800159e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800156a:	4bbc      	ldr	r3, [pc, #752]	; (800185c <HAL_RCC_OscConfig+0x680>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	4bbb      	ldr	r3, [pc, #748]	; (800185c <HAL_RCC_OscConfig+0x680>)
 8001570:	49bc      	ldr	r1, [pc, #752]	; (8001864 <HAL_RCC_OscConfig+0x688>)
 8001572:	400a      	ands	r2, r1
 8001574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001576:	f7ff fb19 	bl	8000bac <HAL_GetTick>
 800157a:	0003      	movs	r3, r0
 800157c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001580:	f7ff fb14 	bl	8000bac <HAL_GetTick>
 8001584:	0002      	movs	r2, r0
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e19a      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001592:	4bb2      	ldr	r3, [pc, #712]	; (800185c <HAL_RCC_OscConfig+0x680>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	2380      	movs	r3, #128	; 0x80
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4013      	ands	r3, r2
 800159c:	d1f0      	bne.n	8001580 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2208      	movs	r2, #8
 80015a4:	4013      	ands	r3, r2
 80015a6:	d036      	beq.n	8001616 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	695b      	ldr	r3, [r3, #20]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d019      	beq.n	80015e4 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015b0:	4baa      	ldr	r3, [pc, #680]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80015b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015b4:	4ba9      	ldr	r3, [pc, #676]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80015b6:	2101      	movs	r1, #1
 80015b8:	430a      	orrs	r2, r1
 80015ba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015bc:	f7ff faf6 	bl	8000bac <HAL_GetTick>
 80015c0:	0003      	movs	r3, r0
 80015c2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015c6:	f7ff faf1 	bl	8000bac <HAL_GetTick>
 80015ca:	0002      	movs	r2, r0
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e177      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015d8:	4ba0      	ldr	r3, [pc, #640]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80015da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015dc:	2202      	movs	r2, #2
 80015de:	4013      	ands	r3, r2
 80015e0:	d0f1      	beq.n	80015c6 <HAL_RCC_OscConfig+0x3ea>
 80015e2:	e018      	b.n	8001616 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015e4:	4b9d      	ldr	r3, [pc, #628]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80015e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015e8:	4b9c      	ldr	r3, [pc, #624]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80015ea:	2101      	movs	r1, #1
 80015ec:	438a      	bics	r2, r1
 80015ee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f0:	f7ff fadc 	bl	8000bac <HAL_GetTick>
 80015f4:	0003      	movs	r3, r0
 80015f6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015fa:	f7ff fad7 	bl	8000bac <HAL_GetTick>
 80015fe:	0002      	movs	r2, r0
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e15d      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800160c:	4b93      	ldr	r3, [pc, #588]	; (800185c <HAL_RCC_OscConfig+0x680>)
 800160e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001610:	2202      	movs	r2, #2
 8001612:	4013      	ands	r3, r2
 8001614:	d1f1      	bne.n	80015fa <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2204      	movs	r2, #4
 800161c:	4013      	ands	r3, r2
 800161e:	d100      	bne.n	8001622 <HAL_RCC_OscConfig+0x446>
 8001620:	e0ae      	b.n	8001780 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001622:	2023      	movs	r0, #35	; 0x23
 8001624:	183b      	adds	r3, r7, r0
 8001626:	2200      	movs	r2, #0
 8001628:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800162a:	4b8c      	ldr	r3, [pc, #560]	; (800185c <HAL_RCC_OscConfig+0x680>)
 800162c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	055b      	lsls	r3, r3, #21
 8001632:	4013      	ands	r3, r2
 8001634:	d109      	bne.n	800164a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001636:	4b89      	ldr	r3, [pc, #548]	; (800185c <HAL_RCC_OscConfig+0x680>)
 8001638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800163a:	4b88      	ldr	r3, [pc, #544]	; (800185c <HAL_RCC_OscConfig+0x680>)
 800163c:	2180      	movs	r1, #128	; 0x80
 800163e:	0549      	lsls	r1, r1, #21
 8001640:	430a      	orrs	r2, r1
 8001642:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001644:	183b      	adds	r3, r7, r0
 8001646:	2201      	movs	r2, #1
 8001648:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164a:	4b87      	ldr	r3, [pc, #540]	; (8001868 <HAL_RCC_OscConfig+0x68c>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	2380      	movs	r3, #128	; 0x80
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4013      	ands	r3, r2
 8001654:	d11a      	bne.n	800168c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001656:	4b84      	ldr	r3, [pc, #528]	; (8001868 <HAL_RCC_OscConfig+0x68c>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	4b83      	ldr	r3, [pc, #524]	; (8001868 <HAL_RCC_OscConfig+0x68c>)
 800165c:	2180      	movs	r1, #128	; 0x80
 800165e:	0049      	lsls	r1, r1, #1
 8001660:	430a      	orrs	r2, r1
 8001662:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001664:	f7ff faa2 	bl	8000bac <HAL_GetTick>
 8001668:	0003      	movs	r3, r0
 800166a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800166e:	f7ff fa9d 	bl	8000bac <HAL_GetTick>
 8001672:	0002      	movs	r2, r0
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b64      	cmp	r3, #100	; 0x64
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e123      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001680:	4b79      	ldr	r3, [pc, #484]	; (8001868 <HAL_RCC_OscConfig+0x68c>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	4013      	ands	r3, r2
 800168a:	d0f0      	beq.n	800166e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	429a      	cmp	r2, r3
 8001696:	d107      	bne.n	80016a8 <HAL_RCC_OscConfig+0x4cc>
 8001698:	4b70      	ldr	r3, [pc, #448]	; (800185c <HAL_RCC_OscConfig+0x680>)
 800169a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800169c:	4b6f      	ldr	r3, [pc, #444]	; (800185c <HAL_RCC_OscConfig+0x680>)
 800169e:	2180      	movs	r1, #128	; 0x80
 80016a0:	0049      	lsls	r1, r1, #1
 80016a2:	430a      	orrs	r2, r1
 80016a4:	651a      	str	r2, [r3, #80]	; 0x50
 80016a6:	e031      	b.n	800170c <HAL_RCC_OscConfig+0x530>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d10c      	bne.n	80016ca <HAL_RCC_OscConfig+0x4ee>
 80016b0:	4b6a      	ldr	r3, [pc, #424]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80016b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016b4:	4b69      	ldr	r3, [pc, #420]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80016b6:	496b      	ldr	r1, [pc, #428]	; (8001864 <HAL_RCC_OscConfig+0x688>)
 80016b8:	400a      	ands	r2, r1
 80016ba:	651a      	str	r2, [r3, #80]	; 0x50
 80016bc:	4b67      	ldr	r3, [pc, #412]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80016be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016c0:	4b66      	ldr	r3, [pc, #408]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80016c2:	496a      	ldr	r1, [pc, #424]	; (800186c <HAL_RCC_OscConfig+0x690>)
 80016c4:	400a      	ands	r2, r1
 80016c6:	651a      	str	r2, [r3, #80]	; 0x50
 80016c8:	e020      	b.n	800170c <HAL_RCC_OscConfig+0x530>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	23a0      	movs	r3, #160	; 0xa0
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d10e      	bne.n	80016f4 <HAL_RCC_OscConfig+0x518>
 80016d6:	4b61      	ldr	r3, [pc, #388]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80016d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016da:	4b60      	ldr	r3, [pc, #384]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80016dc:	2180      	movs	r1, #128	; 0x80
 80016de:	00c9      	lsls	r1, r1, #3
 80016e0:	430a      	orrs	r2, r1
 80016e2:	651a      	str	r2, [r3, #80]	; 0x50
 80016e4:	4b5d      	ldr	r3, [pc, #372]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80016e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016e8:	4b5c      	ldr	r3, [pc, #368]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80016ea:	2180      	movs	r1, #128	; 0x80
 80016ec:	0049      	lsls	r1, r1, #1
 80016ee:	430a      	orrs	r2, r1
 80016f0:	651a      	str	r2, [r3, #80]	; 0x50
 80016f2:	e00b      	b.n	800170c <HAL_RCC_OscConfig+0x530>
 80016f4:	4b59      	ldr	r3, [pc, #356]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80016f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016f8:	4b58      	ldr	r3, [pc, #352]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80016fa:	495a      	ldr	r1, [pc, #360]	; (8001864 <HAL_RCC_OscConfig+0x688>)
 80016fc:	400a      	ands	r2, r1
 80016fe:	651a      	str	r2, [r3, #80]	; 0x50
 8001700:	4b56      	ldr	r3, [pc, #344]	; (800185c <HAL_RCC_OscConfig+0x680>)
 8001702:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001704:	4b55      	ldr	r3, [pc, #340]	; (800185c <HAL_RCC_OscConfig+0x680>)
 8001706:	4959      	ldr	r1, [pc, #356]	; (800186c <HAL_RCC_OscConfig+0x690>)
 8001708:	400a      	ands	r2, r1
 800170a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d015      	beq.n	8001740 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001714:	f7ff fa4a 	bl	8000bac <HAL_GetTick>
 8001718:	0003      	movs	r3, r0
 800171a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800171c:	e009      	b.n	8001732 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800171e:	f7ff fa45 	bl	8000bac <HAL_GetTick>
 8001722:	0002      	movs	r2, r0
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	4a51      	ldr	r2, [pc, #324]	; (8001870 <HAL_RCC_OscConfig+0x694>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e0ca      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001732:	4b4a      	ldr	r3, [pc, #296]	; (800185c <HAL_RCC_OscConfig+0x680>)
 8001734:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001736:	2380      	movs	r3, #128	; 0x80
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4013      	ands	r3, r2
 800173c:	d0ef      	beq.n	800171e <HAL_RCC_OscConfig+0x542>
 800173e:	e014      	b.n	800176a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001740:	f7ff fa34 	bl	8000bac <HAL_GetTick>
 8001744:	0003      	movs	r3, r0
 8001746:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001748:	e009      	b.n	800175e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800174a:	f7ff fa2f 	bl	8000bac <HAL_GetTick>
 800174e:	0002      	movs	r2, r0
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	4a46      	ldr	r2, [pc, #280]	; (8001870 <HAL_RCC_OscConfig+0x694>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e0b4      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800175e:	4b3f      	ldr	r3, [pc, #252]	; (800185c <HAL_RCC_OscConfig+0x680>)
 8001760:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001762:	2380      	movs	r3, #128	; 0x80
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4013      	ands	r3, r2
 8001768:	d1ef      	bne.n	800174a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800176a:	2323      	movs	r3, #35	; 0x23
 800176c:	18fb      	adds	r3, r7, r3
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d105      	bne.n	8001780 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001774:	4b39      	ldr	r3, [pc, #228]	; (800185c <HAL_RCC_OscConfig+0x680>)
 8001776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001778:	4b38      	ldr	r3, [pc, #224]	; (800185c <HAL_RCC_OscConfig+0x680>)
 800177a:	493e      	ldr	r1, [pc, #248]	; (8001874 <HAL_RCC_OscConfig+0x698>)
 800177c:	400a      	ands	r2, r1
 800177e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	2b00      	cmp	r3, #0
 8001786:	d100      	bne.n	800178a <HAL_RCC_OscConfig+0x5ae>
 8001788:	e09d      	b.n	80018c6 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	2b0c      	cmp	r3, #12
 800178e:	d100      	bne.n	8001792 <HAL_RCC_OscConfig+0x5b6>
 8001790:	e076      	b.n	8001880 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	2b02      	cmp	r3, #2
 8001798:	d145      	bne.n	8001826 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179a:	4b30      	ldr	r3, [pc, #192]	; (800185c <HAL_RCC_OscConfig+0x680>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	4b2f      	ldr	r3, [pc, #188]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80017a0:	4935      	ldr	r1, [pc, #212]	; (8001878 <HAL_RCC_OscConfig+0x69c>)
 80017a2:	400a      	ands	r2, r1
 80017a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a6:	f7ff fa01 	bl	8000bac <HAL_GetTick>
 80017aa:	0003      	movs	r3, r0
 80017ac:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b0:	f7ff f9fc 	bl	8000bac <HAL_GetTick>
 80017b4:	0002      	movs	r2, r0
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e082      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017c2:	4b26      	ldr	r3, [pc, #152]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	2380      	movs	r3, #128	; 0x80
 80017c8:	049b      	lsls	r3, r3, #18
 80017ca:	4013      	ands	r3, r2
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ce:	4b23      	ldr	r3, [pc, #140]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	4a2a      	ldr	r2, [pc, #168]	; (800187c <HAL_RCC_OscConfig+0x6a0>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	0019      	movs	r1, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e0:	431a      	orrs	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	431a      	orrs	r2, r3
 80017e8:	4b1c      	ldr	r3, [pc, #112]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80017ea:	430a      	orrs	r2, r1
 80017ec:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017ee:	4b1b      	ldr	r3, [pc, #108]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	4b1a      	ldr	r3, [pc, #104]	; (800185c <HAL_RCC_OscConfig+0x680>)
 80017f4:	2180      	movs	r1, #128	; 0x80
 80017f6:	0449      	lsls	r1, r1, #17
 80017f8:	430a      	orrs	r2, r1
 80017fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fc:	f7ff f9d6 	bl	8000bac <HAL_GetTick>
 8001800:	0003      	movs	r3, r0
 8001802:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001806:	f7ff f9d1 	bl	8000bac <HAL_GetTick>
 800180a:	0002      	movs	r2, r0
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e057      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001818:	4b10      	ldr	r3, [pc, #64]	; (800185c <HAL_RCC_OscConfig+0x680>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	049b      	lsls	r3, r3, #18
 8001820:	4013      	ands	r3, r2
 8001822:	d0f0      	beq.n	8001806 <HAL_RCC_OscConfig+0x62a>
 8001824:	e04f      	b.n	80018c6 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001826:	4b0d      	ldr	r3, [pc, #52]	; (800185c <HAL_RCC_OscConfig+0x680>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <HAL_RCC_OscConfig+0x680>)
 800182c:	4912      	ldr	r1, [pc, #72]	; (8001878 <HAL_RCC_OscConfig+0x69c>)
 800182e:	400a      	ands	r2, r1
 8001830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001832:	f7ff f9bb 	bl	8000bac <HAL_GetTick>
 8001836:	0003      	movs	r3, r0
 8001838:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800183c:	f7ff f9b6 	bl	8000bac <HAL_GetTick>
 8001840:	0002      	movs	r2, r0
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e03c      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800184e:	4b03      	ldr	r3, [pc, #12]	; (800185c <HAL_RCC_OscConfig+0x680>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	2380      	movs	r3, #128	; 0x80
 8001854:	049b      	lsls	r3, r3, #18
 8001856:	4013      	ands	r3, r2
 8001858:	d1f0      	bne.n	800183c <HAL_RCC_OscConfig+0x660>
 800185a:	e034      	b.n	80018c6 <HAL_RCC_OscConfig+0x6ea>
 800185c:	40021000 	.word	0x40021000
 8001860:	ffff1fff 	.word	0xffff1fff
 8001864:	fffffeff 	.word	0xfffffeff
 8001868:	40007000 	.word	0x40007000
 800186c:	fffffbff 	.word	0xfffffbff
 8001870:	00001388 	.word	0x00001388
 8001874:	efffffff 	.word	0xefffffff
 8001878:	feffffff 	.word	0xfeffffff
 800187c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001884:	2b01      	cmp	r3, #1
 8001886:	d101      	bne.n	800188c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e01d      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800188c:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <HAL_RCC_OscConfig+0x6f4>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	025b      	lsls	r3, r3, #9
 8001898:	401a      	ands	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189e:	429a      	cmp	r2, r3
 80018a0:	d10f      	bne.n	80018c2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	23f0      	movs	r3, #240	; 0xf0
 80018a6:	039b      	lsls	r3, r3, #14
 80018a8:	401a      	ands	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d107      	bne.n	80018c2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	23c0      	movs	r3, #192	; 0xc0
 80018b6:	041b      	lsls	r3, r3, #16
 80018b8:	401a      	ands	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80018be:	429a      	cmp	r2, r3
 80018c0:	d001      	beq.n	80018c6 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	0018      	movs	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	b00a      	add	sp, #40	; 0x28
 80018ce:	bdb0      	pop	{r4, r5, r7, pc}
 80018d0:	40021000 	.word	0x40021000

080018d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018d4:	b5b0      	push	{r4, r5, r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d101      	bne.n	80018e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e128      	b.n	8001b3a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018e8:	4b96      	ldr	r3, [pc, #600]	; (8001b44 <HAL_RCC_ClockConfig+0x270>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2201      	movs	r2, #1
 80018ee:	4013      	ands	r3, r2
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d91e      	bls.n	8001934 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f6:	4b93      	ldr	r3, [pc, #588]	; (8001b44 <HAL_RCC_ClockConfig+0x270>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2201      	movs	r2, #1
 80018fc:	4393      	bics	r3, r2
 80018fe:	0019      	movs	r1, r3
 8001900:	4b90      	ldr	r3, [pc, #576]	; (8001b44 <HAL_RCC_ClockConfig+0x270>)
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	430a      	orrs	r2, r1
 8001906:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001908:	f7ff f950 	bl	8000bac <HAL_GetTick>
 800190c:	0003      	movs	r3, r0
 800190e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001910:	e009      	b.n	8001926 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001912:	f7ff f94b 	bl	8000bac <HAL_GetTick>
 8001916:	0002      	movs	r2, r0
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	4a8a      	ldr	r2, [pc, #552]	; (8001b48 <HAL_RCC_ClockConfig+0x274>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e109      	b.n	8001b3a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001926:	4b87      	ldr	r3, [pc, #540]	; (8001b44 <HAL_RCC_ClockConfig+0x270>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2201      	movs	r2, #1
 800192c:	4013      	ands	r3, r2
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	d1ee      	bne.n	8001912 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2202      	movs	r2, #2
 800193a:	4013      	ands	r3, r2
 800193c:	d009      	beq.n	8001952 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800193e:	4b83      	ldr	r3, [pc, #524]	; (8001b4c <HAL_RCC_ClockConfig+0x278>)
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	22f0      	movs	r2, #240	; 0xf0
 8001944:	4393      	bics	r3, r2
 8001946:	0019      	movs	r1, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	4b7f      	ldr	r3, [pc, #508]	; (8001b4c <HAL_RCC_ClockConfig+0x278>)
 800194e:	430a      	orrs	r2, r1
 8001950:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2201      	movs	r2, #1
 8001958:	4013      	ands	r3, r2
 800195a:	d100      	bne.n	800195e <HAL_RCC_ClockConfig+0x8a>
 800195c:	e089      	b.n	8001a72 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b02      	cmp	r3, #2
 8001964:	d107      	bne.n	8001976 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001966:	4b79      	ldr	r3, [pc, #484]	; (8001b4c <HAL_RCC_ClockConfig+0x278>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	2380      	movs	r3, #128	; 0x80
 800196c:	029b      	lsls	r3, r3, #10
 800196e:	4013      	ands	r3, r2
 8001970:	d120      	bne.n	80019b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e0e1      	b.n	8001b3a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b03      	cmp	r3, #3
 800197c:	d107      	bne.n	800198e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800197e:	4b73      	ldr	r3, [pc, #460]	; (8001b4c <HAL_RCC_ClockConfig+0x278>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	2380      	movs	r3, #128	; 0x80
 8001984:	049b      	lsls	r3, r3, #18
 8001986:	4013      	ands	r3, r2
 8001988:	d114      	bne.n	80019b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e0d5      	b.n	8001b3a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d106      	bne.n	80019a4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001996:	4b6d      	ldr	r3, [pc, #436]	; (8001b4c <HAL_RCC_ClockConfig+0x278>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2204      	movs	r2, #4
 800199c:	4013      	ands	r3, r2
 800199e:	d109      	bne.n	80019b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e0ca      	b.n	8001b3a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80019a4:	4b69      	ldr	r3, [pc, #420]	; (8001b4c <HAL_RCC_ClockConfig+0x278>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4013      	ands	r3, r2
 80019ae:	d101      	bne.n	80019b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e0c2      	b.n	8001b3a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019b4:	4b65      	ldr	r3, [pc, #404]	; (8001b4c <HAL_RCC_ClockConfig+0x278>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	2203      	movs	r2, #3
 80019ba:	4393      	bics	r3, r2
 80019bc:	0019      	movs	r1, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	4b62      	ldr	r3, [pc, #392]	; (8001b4c <HAL_RCC_ClockConfig+0x278>)
 80019c4:	430a      	orrs	r2, r1
 80019c6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019c8:	f7ff f8f0 	bl	8000bac <HAL_GetTick>
 80019cc:	0003      	movs	r3, r0
 80019ce:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d111      	bne.n	80019fc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019d8:	e009      	b.n	80019ee <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019da:	f7ff f8e7 	bl	8000bac <HAL_GetTick>
 80019de:	0002      	movs	r2, r0
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	4a58      	ldr	r2, [pc, #352]	; (8001b48 <HAL_RCC_ClockConfig+0x274>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e0a5      	b.n	8001b3a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019ee:	4b57      	ldr	r3, [pc, #348]	; (8001b4c <HAL_RCC_ClockConfig+0x278>)
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	220c      	movs	r2, #12
 80019f4:	4013      	ands	r3, r2
 80019f6:	2b08      	cmp	r3, #8
 80019f8:	d1ef      	bne.n	80019da <HAL_RCC_ClockConfig+0x106>
 80019fa:	e03a      	b.n	8001a72 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b03      	cmp	r3, #3
 8001a02:	d111      	bne.n	8001a28 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a04:	e009      	b.n	8001a1a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a06:	f7ff f8d1 	bl	8000bac <HAL_GetTick>
 8001a0a:	0002      	movs	r2, r0
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	4a4d      	ldr	r2, [pc, #308]	; (8001b48 <HAL_RCC_ClockConfig+0x274>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e08f      	b.n	8001b3a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a1a:	4b4c      	ldr	r3, [pc, #304]	; (8001b4c <HAL_RCC_ClockConfig+0x278>)
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	220c      	movs	r2, #12
 8001a20:	4013      	ands	r3, r2
 8001a22:	2b0c      	cmp	r3, #12
 8001a24:	d1ef      	bne.n	8001a06 <HAL_RCC_ClockConfig+0x132>
 8001a26:	e024      	b.n	8001a72 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d11b      	bne.n	8001a68 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a30:	e009      	b.n	8001a46 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a32:	f7ff f8bb 	bl	8000bac <HAL_GetTick>
 8001a36:	0002      	movs	r2, r0
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	4a42      	ldr	r2, [pc, #264]	; (8001b48 <HAL_RCC_ClockConfig+0x274>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e079      	b.n	8001b3a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a46:	4b41      	ldr	r3, [pc, #260]	; (8001b4c <HAL_RCC_ClockConfig+0x278>)
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d1ef      	bne.n	8001a32 <HAL_RCC_ClockConfig+0x15e>
 8001a52:	e00e      	b.n	8001a72 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a54:	f7ff f8aa 	bl	8000bac <HAL_GetTick>
 8001a58:	0002      	movs	r2, r0
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	4a3a      	ldr	r2, [pc, #232]	; (8001b48 <HAL_RCC_ClockConfig+0x274>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e068      	b.n	8001b3a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a68:	4b38      	ldr	r3, [pc, #224]	; (8001b4c <HAL_RCC_ClockConfig+0x278>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	220c      	movs	r2, #12
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a72:	4b34      	ldr	r3, [pc, #208]	; (8001b44 <HAL_RCC_ClockConfig+0x270>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2201      	movs	r2, #1
 8001a78:	4013      	ands	r3, r2
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d21e      	bcs.n	8001abe <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a80:	4b30      	ldr	r3, [pc, #192]	; (8001b44 <HAL_RCC_ClockConfig+0x270>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2201      	movs	r2, #1
 8001a86:	4393      	bics	r3, r2
 8001a88:	0019      	movs	r1, r3
 8001a8a:	4b2e      	ldr	r3, [pc, #184]	; (8001b44 <HAL_RCC_ClockConfig+0x270>)
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a92:	f7ff f88b 	bl	8000bac <HAL_GetTick>
 8001a96:	0003      	movs	r3, r0
 8001a98:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9a:	e009      	b.n	8001ab0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a9c:	f7ff f886 	bl	8000bac <HAL_GetTick>
 8001aa0:	0002      	movs	r2, r0
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	4a28      	ldr	r2, [pc, #160]	; (8001b48 <HAL_RCC_ClockConfig+0x274>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e044      	b.n	8001b3a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab0:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <HAL_RCC_ClockConfig+0x270>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d1ee      	bne.n	8001a9c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2204      	movs	r2, #4
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d009      	beq.n	8001adc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac8:	4b20      	ldr	r3, [pc, #128]	; (8001b4c <HAL_RCC_ClockConfig+0x278>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	4a20      	ldr	r2, [pc, #128]	; (8001b50 <HAL_RCC_ClockConfig+0x27c>)
 8001ace:	4013      	ands	r3, r2
 8001ad0:	0019      	movs	r1, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <HAL_RCC_ClockConfig+0x278>)
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2208      	movs	r2, #8
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d00a      	beq.n	8001afc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ae6:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <HAL_RCC_ClockConfig+0x278>)
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	4a1a      	ldr	r2, [pc, #104]	; (8001b54 <HAL_RCC_ClockConfig+0x280>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	0019      	movs	r1, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	00da      	lsls	r2, r3, #3
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <HAL_RCC_ClockConfig+0x278>)
 8001af8:	430a      	orrs	r2, r1
 8001afa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001afc:	f000 f832 	bl	8001b64 <HAL_RCC_GetSysClockFreq>
 8001b00:	0001      	movs	r1, r0
 8001b02:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <HAL_RCC_ClockConfig+0x278>)
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	091b      	lsrs	r3, r3, #4
 8001b08:	220f      	movs	r2, #15
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	4a12      	ldr	r2, [pc, #72]	; (8001b58 <HAL_RCC_ClockConfig+0x284>)
 8001b0e:	5cd3      	ldrb	r3, [r2, r3]
 8001b10:	000a      	movs	r2, r1
 8001b12:	40da      	lsrs	r2, r3
 8001b14:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <HAL_RCC_ClockConfig+0x288>)
 8001b16:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <HAL_RCC_ClockConfig+0x28c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	250b      	movs	r5, #11
 8001b1e:	197c      	adds	r4, r7, r5
 8001b20:	0018      	movs	r0, r3
 8001b22:	f7fe fffd 	bl	8000b20 <HAL_InitTick>
 8001b26:	0003      	movs	r3, r0
 8001b28:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001b2a:	197b      	adds	r3, r7, r5
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d002      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001b32:	197b      	adds	r3, r7, r5
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	e000      	b.n	8001b3a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	b004      	add	sp, #16
 8001b40:	bdb0      	pop	{r4, r5, r7, pc}
 8001b42:	46c0      	nop			; (mov r8, r8)
 8001b44:	40022000 	.word	0x40022000
 8001b48:	00001388 	.word	0x00001388
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	fffff8ff 	.word	0xfffff8ff
 8001b54:	ffffc7ff 	.word	0xffffc7ff
 8001b58:	0800373c 	.word	0x0800373c
 8001b5c:	20000008 	.word	0x20000008
 8001b60:	2000000c 	.word	0x2000000c

08001b64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b64:	b5b0      	push	{r4, r5, r7, lr}
 8001b66:	b08e      	sub	sp, #56	; 0x38
 8001b68:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001b6a:	4b4c      	ldr	r3, [pc, #304]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x138>)
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b72:	230c      	movs	r3, #12
 8001b74:	4013      	ands	r3, r2
 8001b76:	2b0c      	cmp	r3, #12
 8001b78:	d014      	beq.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x40>
 8001b7a:	d900      	bls.n	8001b7e <HAL_RCC_GetSysClockFreq+0x1a>
 8001b7c:	e07b      	b.n	8001c76 <HAL_RCC_GetSysClockFreq+0x112>
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	d002      	beq.n	8001b88 <HAL_RCC_GetSysClockFreq+0x24>
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d00b      	beq.n	8001b9e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b86:	e076      	b.n	8001c76 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001b88:	4b44      	ldr	r3, [pc, #272]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x138>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2210      	movs	r2, #16
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d002      	beq.n	8001b98 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001b92:	4b43      	ldr	r3, [pc, #268]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001b94:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001b96:	e07c      	b.n	8001c92 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001b98:	4b42      	ldr	r3, [pc, #264]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x140>)
 8001b9a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b9c:	e079      	b.n	8001c92 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b9e:	4b42      	ldr	r3, [pc, #264]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x144>)
 8001ba0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ba2:	e076      	b.n	8001c92 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba6:	0c9a      	lsrs	r2, r3, #18
 8001ba8:	230f      	movs	r3, #15
 8001baa:	401a      	ands	r2, r3
 8001bac:	4b3f      	ldr	r3, [pc, #252]	; (8001cac <HAL_RCC_GetSysClockFreq+0x148>)
 8001bae:	5c9b      	ldrb	r3, [r3, r2]
 8001bb0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb4:	0d9a      	lsrs	r2, r3, #22
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	4013      	ands	r3, r2
 8001bba:	3301      	adds	r3, #1
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bbe:	4b37      	ldr	r3, [pc, #220]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x138>)
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	2380      	movs	r3, #128	; 0x80
 8001bc4:	025b      	lsls	r3, r3, #9
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d01a      	beq.n	8001c00 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bcc:	61bb      	str	r3, [r7, #24]
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
 8001bd2:	4a35      	ldr	r2, [pc, #212]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x144>)
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	69b8      	ldr	r0, [r7, #24]
 8001bd8:	69f9      	ldr	r1, [r7, #28]
 8001bda:	f7fe fb41 	bl	8000260 <__aeabi_lmul>
 8001bde:	0002      	movs	r2, r0
 8001be0:	000b      	movs	r3, r1
 8001be2:	0010      	movs	r0, r2
 8001be4:	0019      	movs	r1, r3
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	f7fe fb15 	bl	8000220 <__aeabi_uldivmod>
 8001bf6:	0002      	movs	r2, r0
 8001bf8:	000b      	movs	r3, r1
 8001bfa:	0013      	movs	r3, r2
 8001bfc:	637b      	str	r3, [r7, #52]	; 0x34
 8001bfe:	e037      	b.n	8001c70 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c00:	4b26      	ldr	r3, [pc, #152]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x138>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2210      	movs	r2, #16
 8001c06:	4013      	ands	r3, r2
 8001c08:	d01a      	beq.n	8001c40 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	4a23      	ldr	r2, [pc, #140]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c14:	2300      	movs	r3, #0
 8001c16:	68b8      	ldr	r0, [r7, #8]
 8001c18:	68f9      	ldr	r1, [r7, #12]
 8001c1a:	f7fe fb21 	bl	8000260 <__aeabi_lmul>
 8001c1e:	0002      	movs	r2, r0
 8001c20:	000b      	movs	r3, r1
 8001c22:	0010      	movs	r0, r2
 8001c24:	0019      	movs	r1, r3
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	603b      	str	r3, [r7, #0]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	607b      	str	r3, [r7, #4]
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f7fe faf5 	bl	8000220 <__aeabi_uldivmod>
 8001c36:	0002      	movs	r2, r0
 8001c38:	000b      	movs	r3, r1
 8001c3a:	0013      	movs	r3, r2
 8001c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8001c3e:	e017      	b.n	8001c70 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c42:	0018      	movs	r0, r3
 8001c44:	2300      	movs	r3, #0
 8001c46:	0019      	movs	r1, r3
 8001c48:	4a16      	ldr	r2, [pc, #88]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x140>)
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f7fe fb08 	bl	8000260 <__aeabi_lmul>
 8001c50:	0002      	movs	r2, r0
 8001c52:	000b      	movs	r3, r1
 8001c54:	0010      	movs	r0, r2
 8001c56:	0019      	movs	r1, r3
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	001c      	movs	r4, r3
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	001d      	movs	r5, r3
 8001c60:	0022      	movs	r2, r4
 8001c62:	002b      	movs	r3, r5
 8001c64:	f7fe fadc 	bl	8000220 <__aeabi_uldivmod>
 8001c68:	0002      	movs	r2, r0
 8001c6a:	000b      	movs	r3, r1
 8001c6c:	0013      	movs	r3, r2
 8001c6e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c72:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c74:	e00d      	b.n	8001c92 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001c76:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x138>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	0b5b      	lsrs	r3, r3, #13
 8001c7c:	2207      	movs	r2, #7
 8001c7e:	4013      	ands	r3, r2
 8001c80:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001c82:	6a3b      	ldr	r3, [r7, #32]
 8001c84:	3301      	adds	r3, #1
 8001c86:	2280      	movs	r2, #128	; 0x80
 8001c88:	0212      	lsls	r2, r2, #8
 8001c8a:	409a      	lsls	r2, r3
 8001c8c:	0013      	movs	r3, r2
 8001c8e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c90:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001c94:	0018      	movs	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	b00e      	add	sp, #56	; 0x38
 8001c9a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	003d0900 	.word	0x003d0900
 8001ca4:	00f42400 	.word	0x00f42400
 8001ca8:	007a1200 	.word	0x007a1200
 8001cac:	08003754 	.word	0x08003754

08001cb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cb4:	4b02      	ldr	r3, [pc, #8]	; (8001cc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
}
 8001cb8:	0018      	movs	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	46c0      	nop			; (mov r8, r8)
 8001cc0:	20000008 	.word	0x20000008

08001cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cc8:	f7ff fff2 	bl	8001cb0 <HAL_RCC_GetHCLKFreq>
 8001ccc:	0001      	movs	r1, r0
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	0a1b      	lsrs	r3, r3, #8
 8001cd4:	2207      	movs	r2, #7
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	4a04      	ldr	r2, [pc, #16]	; (8001cec <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cda:	5cd3      	ldrb	r3, [r2, r3]
 8001cdc:	40d9      	lsrs	r1, r3
 8001cde:	000b      	movs	r3, r1
}
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	0800374c 	.word	0x0800374c

08001cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cf4:	f7ff ffdc 	bl	8001cb0 <HAL_RCC_GetHCLKFreq>
 8001cf8:	0001      	movs	r1, r0
 8001cfa:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	0adb      	lsrs	r3, r3, #11
 8001d00:	2207      	movs	r2, #7
 8001d02:	4013      	ands	r3, r2
 8001d04:	4a04      	ldr	r2, [pc, #16]	; (8001d18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d06:	5cd3      	ldrb	r3, [r2, r3]
 8001d08:	40d9      	lsrs	r1, r3
 8001d0a:	000b      	movs	r3, r1
}
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	40021000 	.word	0x40021000
 8001d18:	0800374c 	.word	0x0800374c

08001d1c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001d24:	2017      	movs	r0, #23
 8001d26:	183b      	adds	r3, r7, r0
 8001d28:	2200      	movs	r2, #0
 8001d2a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2220      	movs	r2, #32
 8001d32:	4013      	ands	r3, r2
 8001d34:	d100      	bne.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001d36:	e0c2      	b.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d38:	4b81      	ldr	r3, [pc, #516]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d3c:	2380      	movs	r3, #128	; 0x80
 8001d3e:	055b      	lsls	r3, r3, #21
 8001d40:	4013      	ands	r3, r2
 8001d42:	d109      	bne.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d44:	4b7e      	ldr	r3, [pc, #504]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d48:	4b7d      	ldr	r3, [pc, #500]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d4a:	2180      	movs	r1, #128	; 0x80
 8001d4c:	0549      	lsls	r1, r1, #21
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001d52:	183b      	adds	r3, r7, r0
 8001d54:	2201      	movs	r2, #1
 8001d56:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d58:	4b7a      	ldr	r3, [pc, #488]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	2380      	movs	r3, #128	; 0x80
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	4013      	ands	r3, r2
 8001d62:	d11a      	bne.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d64:	4b77      	ldr	r3, [pc, #476]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4b76      	ldr	r3, [pc, #472]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001d6a:	2180      	movs	r1, #128	; 0x80
 8001d6c:	0049      	lsls	r1, r1, #1
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d72:	f7fe ff1b 	bl	8000bac <HAL_GetTick>
 8001d76:	0003      	movs	r3, r0
 8001d78:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d7a:	e008      	b.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d7c:	f7fe ff16 	bl	8000bac <HAL_GetTick>
 8001d80:	0002      	movs	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b64      	cmp	r3, #100	; 0x64
 8001d88:	d901      	bls.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e0d4      	b.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8e:	4b6d      	ldr	r3, [pc, #436]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	4013      	ands	r3, r2
 8001d98:	d0f0      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001d9a:	4b69      	ldr	r3, [pc, #420]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	23c0      	movs	r3, #192	; 0xc0
 8001da0:	039b      	lsls	r3, r3, #14
 8001da2:	4013      	ands	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	23c0      	movs	r3, #192	; 0xc0
 8001dac:	039b      	lsls	r3, r3, #14
 8001dae:	4013      	ands	r3, r2
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d013      	beq.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	23c0      	movs	r3, #192	; 0xc0
 8001dbc:	029b      	lsls	r3, r3, #10
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	23c0      	movs	r3, #192	; 0xc0
 8001dc2:	029b      	lsls	r3, r3, #10
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d10a      	bne.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001dc8:	4b5d      	ldr	r3, [pc, #372]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	029b      	lsls	r3, r3, #10
 8001dd0:	401a      	ands	r2, r3
 8001dd2:	2380      	movs	r3, #128	; 0x80
 8001dd4:	029b      	lsls	r3, r3, #10
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d101      	bne.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e0ac      	b.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001dde:	4b58      	ldr	r3, [pc, #352]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001de0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001de2:	23c0      	movs	r3, #192	; 0xc0
 8001de4:	029b      	lsls	r3, r3, #10
 8001de6:	4013      	ands	r3, r2
 8001de8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d03b      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	23c0      	movs	r3, #192	; 0xc0
 8001df6:	029b      	lsls	r3, r3, #10
 8001df8:	4013      	ands	r3, r2
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d033      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2220      	movs	r2, #32
 8001e06:	4013      	ands	r3, r2
 8001e08:	d02e      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001e0a:	4b4d      	ldr	r3, [pc, #308]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e0e:	4a4e      	ldr	r2, [pc, #312]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e14:	4b4a      	ldr	r3, [pc, #296]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e18:	4b49      	ldr	r3, [pc, #292]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e1a:	2180      	movs	r1, #128	; 0x80
 8001e1c:	0309      	lsls	r1, r1, #12
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e22:	4b47      	ldr	r3, [pc, #284]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e26:	4b46      	ldr	r3, [pc, #280]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e28:	4948      	ldr	r1, [pc, #288]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e2a:	400a      	ands	r2, r1
 8001e2c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001e2e:	4b44      	ldr	r3, [pc, #272]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	2380      	movs	r3, #128	; 0x80
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d014      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3e:	f7fe feb5 	bl	8000bac <HAL_GetTick>
 8001e42:	0003      	movs	r3, r0
 8001e44:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e46:	e009      	b.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e48:	f7fe feb0 	bl	8000bac <HAL_GetTick>
 8001e4c:	0002      	movs	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	4a3f      	ldr	r2, [pc, #252]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e06d      	b.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e5c:	4b38      	ldr	r3, [pc, #224]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4013      	ands	r3, r2
 8001e66:	d0ef      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	23c0      	movs	r3, #192	; 0xc0
 8001e6e:	029b      	lsls	r3, r3, #10
 8001e70:	401a      	ands	r2, r3
 8001e72:	23c0      	movs	r3, #192	; 0xc0
 8001e74:	029b      	lsls	r3, r3, #10
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d10c      	bne.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8001e7a:	4b31      	ldr	r3, [pc, #196]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a35      	ldr	r2, [pc, #212]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	0019      	movs	r1, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	23c0      	movs	r3, #192	; 0xc0
 8001e8a:	039b      	lsls	r3, r3, #14
 8001e8c:	401a      	ands	r2, r3
 8001e8e:	4b2c      	ldr	r3, [pc, #176]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e90:	430a      	orrs	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	4b2a      	ldr	r3, [pc, #168]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e96:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	23c0      	movs	r3, #192	; 0xc0
 8001e9e:	029b      	lsls	r3, r3, #10
 8001ea0:	401a      	ands	r2, r3
 8001ea2:	4b27      	ldr	r3, [pc, #156]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ea8:	2317      	movs	r3, #23
 8001eaa:	18fb      	adds	r3, r7, r3
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d105      	bne.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb2:	4b23      	ldr	r3, [pc, #140]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001eb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eb6:	4b22      	ldr	r3, [pc, #136]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001eb8:	4927      	ldr	r1, [pc, #156]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001eba:	400a      	ands	r2, r1
 8001ebc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d009      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ec8:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ecc:	220c      	movs	r2, #12
 8001ece:	4393      	bics	r3, r2
 8001ed0:	0019      	movs	r1, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2204      	movs	r2, #4
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d009      	beq.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ee6:	4b16      	ldr	r3, [pc, #88]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eea:	4a1c      	ldr	r2, [pc, #112]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001eec:	4013      	ands	r3, r2
 8001eee:	0019      	movs	r1, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2208      	movs	r2, #8
 8001f00:	4013      	ands	r3, r2
 8001f02:	d009      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f04:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f08:	4a15      	ldr	r2, [pc, #84]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	0019      	movs	r1, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691a      	ldr	r2, [r3, #16]
 8001f12:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f14:	430a      	orrs	r2, r1
 8001f16:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2280      	movs	r2, #128	; 0x80
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d009      	beq.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001f22:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f26:	4a0f      	ldr	r2, [pc, #60]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f28:	4013      	ands	r3, r2
 8001f2a:	0019      	movs	r1, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	695a      	ldr	r2, [r3, #20]
 8001f30:	4b03      	ldr	r3, [pc, #12]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f32:	430a      	orrs	r2, r1
 8001f34:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	0018      	movs	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	b006      	add	sp, #24
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40007000 	.word	0x40007000
 8001f48:	fffcffff 	.word	0xfffcffff
 8001f4c:	fff7ffff 	.word	0xfff7ffff
 8001f50:	00001388 	.word	0x00001388
 8001f54:	ffcfffff 	.word	0xffcfffff
 8001f58:	efffffff 	.word	0xefffffff
 8001f5c:	fffff3ff 	.word	0xfffff3ff
 8001f60:	ffffcfff 	.word	0xffffcfff
 8001f64:	fff3ffff 	.word	0xfff3ffff

08001f68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e07b      	b.n	8002072 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d109      	bne.n	8001f96 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	2382      	movs	r3, #130	; 0x82
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d009      	beq.n	8001fa2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	61da      	str	r2, [r3, #28]
 8001f94:	e005      	b.n	8001fa2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2251      	movs	r2, #81	; 0x51
 8001fac:	5c9b      	ldrb	r3, [r3, r2]
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d107      	bne.n	8001fc4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2250      	movs	r2, #80	; 0x50
 8001fb8:	2100      	movs	r1, #0
 8001fba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	f7fe fc7c 	bl	80008bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2251      	movs	r2, #81	; 0x51
 8001fc8:	2102      	movs	r1, #2
 8001fca:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2140      	movs	r1, #64	; 0x40
 8001fd8:	438a      	bics	r2, r1
 8001fda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	2382      	movs	r3, #130	; 0x82
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	401a      	ands	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6899      	ldr	r1, [r3, #8]
 8001fea:	2384      	movs	r3, #132	; 0x84
 8001fec:	021b      	lsls	r3, r3, #8
 8001fee:	400b      	ands	r3, r1
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68d9      	ldr	r1, [r3, #12]
 8001ff6:	2380      	movs	r3, #128	; 0x80
 8001ff8:	011b      	lsls	r3, r3, #4
 8001ffa:	400b      	ands	r3, r1
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	2102      	movs	r1, #2
 8002004:	400b      	ands	r3, r1
 8002006:	431a      	orrs	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	2101      	movs	r1, #1
 800200e:	400b      	ands	r3, r1
 8002010:	431a      	orrs	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6999      	ldr	r1, [r3, #24]
 8002016:	2380      	movs	r3, #128	; 0x80
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	400b      	ands	r3, r1
 800201c:	431a      	orrs	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	2138      	movs	r1, #56	; 0x38
 8002024:	400b      	ands	r3, r1
 8002026:	431a      	orrs	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	2180      	movs	r1, #128	; 0x80
 800202e:	400b      	ands	r3, r1
 8002030:	431a      	orrs	r2, r3
 8002032:	0011      	movs	r1, r2
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002038:	2380      	movs	r3, #128	; 0x80
 800203a:	019b      	lsls	r3, r3, #6
 800203c:	401a      	ands	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	430a      	orrs	r2, r1
 8002044:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	0c1b      	lsrs	r3, r3, #16
 800204c:	2204      	movs	r2, #4
 800204e:	4013      	ands	r3, r2
 8002050:	0019      	movs	r1, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	2210      	movs	r2, #16
 8002058:	401a      	ands	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2251      	movs	r2, #81	; 0x51
 800206c:	2101      	movs	r1, #1
 800206e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	0018      	movs	r0, r3
 8002074:	46bd      	mov	sp, r7
 8002076:	b002      	add	sp, #8
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e044      	b.n	8002118 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002092:	2b00      	cmp	r3, #0
 8002094:	d107      	bne.n	80020a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2274      	movs	r2, #116	; 0x74
 800209a:	2100      	movs	r1, #0
 800209c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	0018      	movs	r0, r3
 80020a2:	f7fe fc4f 	bl	8000944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2224      	movs	r2, #36	; 0x24
 80020aa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2101      	movs	r1, #1
 80020b8:	438a      	bics	r2, r1
 80020ba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	0018      	movs	r0, r3
 80020c0:	f000 fc36 	bl	8002930 <UART_SetConfig>
 80020c4:	0003      	movs	r3, r0
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d101      	bne.n	80020ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e024      	b.n	8002118 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	0018      	movs	r0, r3
 80020da:	f000 fe73 	bl	8002dc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	490d      	ldr	r1, [pc, #52]	; (8002120 <HAL_UART_Init+0xa4>)
 80020ea:	400a      	ands	r2, r1
 80020ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	212a      	movs	r1, #42	; 0x2a
 80020fa:	438a      	bics	r2, r1
 80020fc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2101      	movs	r1, #1
 800210a:	430a      	orrs	r2, r1
 800210c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	0018      	movs	r0, r3
 8002112:	f000 ff0b 	bl	8002f2c <UART_CheckIdleState>
 8002116:	0003      	movs	r3, r0
}
 8002118:	0018      	movs	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	b002      	add	sp, #8
 800211e:	bd80      	pop	{r7, pc}
 8002120:	ffffb7ff 	.word	0xffffb7ff

08002124 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b08a      	sub	sp, #40	; 0x28
 8002128:	af02      	add	r7, sp, #8
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	603b      	str	r3, [r7, #0]
 8002130:	1dbb      	adds	r3, r7, #6
 8002132:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002138:	2b20      	cmp	r3, #32
 800213a:	d000      	beq.n	800213e <HAL_UART_Transmit+0x1a>
 800213c:	e095      	b.n	800226a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_UART_Transmit+0x28>
 8002144:	1dbb      	adds	r3, r7, #6
 8002146:	881b      	ldrh	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e08d      	b.n	800226c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	2380      	movs	r3, #128	; 0x80
 8002156:	015b      	lsls	r3, r3, #5
 8002158:	429a      	cmp	r2, r3
 800215a:	d109      	bne.n	8002170 <HAL_UART_Transmit+0x4c>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d105      	bne.n	8002170 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2201      	movs	r2, #1
 8002168:	4013      	ands	r3, r2
 800216a:	d001      	beq.n	8002170 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e07d      	b.n	800226c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2274      	movs	r2, #116	; 0x74
 8002174:	5c9b      	ldrb	r3, [r3, r2]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d101      	bne.n	800217e <HAL_UART_Transmit+0x5a>
 800217a:	2302      	movs	r3, #2
 800217c:	e076      	b.n	800226c <HAL_UART_Transmit+0x148>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2274      	movs	r2, #116	; 0x74
 8002182:	2101      	movs	r1, #1
 8002184:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2280      	movs	r2, #128	; 0x80
 800218a:	2100      	movs	r1, #0
 800218c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2221      	movs	r2, #33	; 0x21
 8002192:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002194:	f7fe fd0a 	bl	8000bac <HAL_GetTick>
 8002198:	0003      	movs	r3, r0
 800219a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	1dba      	adds	r2, r7, #6
 80021a0:	2150      	movs	r1, #80	; 0x50
 80021a2:	8812      	ldrh	r2, [r2, #0]
 80021a4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	1dba      	adds	r2, r7, #6
 80021aa:	2152      	movs	r1, #82	; 0x52
 80021ac:	8812      	ldrh	r2, [r2, #0]
 80021ae:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	2380      	movs	r3, #128	; 0x80
 80021b6:	015b      	lsls	r3, r3, #5
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d108      	bne.n	80021ce <HAL_UART_Transmit+0xaa>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d104      	bne.n	80021ce <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	61bb      	str	r3, [r7, #24]
 80021cc:	e003      	b.n	80021d6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2274      	movs	r2, #116	; 0x74
 80021da:	2100      	movs	r1, #0
 80021dc:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80021de:	e02c      	b.n	800223a <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	0013      	movs	r3, r2
 80021ea:	2200      	movs	r2, #0
 80021ec:	2180      	movs	r1, #128	; 0x80
 80021ee:	f000 fee5 	bl	8002fbc <UART_WaitOnFlagUntilTimeout>
 80021f2:	1e03      	subs	r3, r0, #0
 80021f4:	d001      	beq.n	80021fa <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e038      	b.n	800226c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10b      	bne.n	8002218 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	001a      	movs	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	05d2      	lsls	r2, r2, #23
 800220c:	0dd2      	lsrs	r2, r2, #23
 800220e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	3302      	adds	r3, #2
 8002214:	61bb      	str	r3, [r7, #24]
 8002216:	e007      	b.n	8002228 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	781a      	ldrb	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	3301      	adds	r3, #1
 8002226:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2252      	movs	r2, #82	; 0x52
 800222c:	5a9b      	ldrh	r3, [r3, r2]
 800222e:	b29b      	uxth	r3, r3
 8002230:	3b01      	subs	r3, #1
 8002232:	b299      	uxth	r1, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2252      	movs	r2, #82	; 0x52
 8002238:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2252      	movs	r2, #82	; 0x52
 800223e:	5a9b      	ldrh	r3, [r3, r2]
 8002240:	b29b      	uxth	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1cc      	bne.n	80021e0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	0013      	movs	r3, r2
 8002250:	2200      	movs	r2, #0
 8002252:	2140      	movs	r1, #64	; 0x40
 8002254:	f000 feb2 	bl	8002fbc <UART_WaitOnFlagUntilTimeout>
 8002258:	1e03      	subs	r3, r0, #0
 800225a:	d001      	beq.n	8002260 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e005      	b.n	800226c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2220      	movs	r2, #32
 8002264:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002266:	2300      	movs	r3, #0
 8002268:	e000      	b.n	800226c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800226a:	2302      	movs	r3, #2
  }
}
 800226c:	0018      	movs	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	b008      	add	sp, #32
 8002272:	bd80      	pop	{r7, pc}

08002274 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	1dbb      	adds	r3, r7, #6
 8002280:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002286:	2b20      	cmp	r3, #32
 8002288:	d155      	bne.n	8002336 <HAL_UART_Receive_IT+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <HAL_UART_Receive_IT+0x24>
 8002290:	1dbb      	adds	r3, r7, #6
 8002292:	881b      	ldrh	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e04d      	b.n	8002338 <HAL_UART_Receive_IT+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	2380      	movs	r3, #128	; 0x80
 80022a2:	015b      	lsls	r3, r3, #5
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d109      	bne.n	80022bc <HAL_UART_Receive_IT+0x48>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d105      	bne.n	80022bc <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2201      	movs	r2, #1
 80022b4:	4013      	ands	r3, r2
 80022b6:	d001      	beq.n	80022bc <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e03d      	b.n	8002338 <HAL_UART_Receive_IT+0xc4>
      }
    }

    __HAL_LOCK(huart);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2274      	movs	r2, #116	; 0x74
 80022c0:	5c9b      	ldrb	r3, [r3, r2]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d101      	bne.n	80022ca <HAL_UART_Receive_IT+0x56>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e036      	b.n	8002338 <HAL_UART_Receive_IT+0xc4>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2274      	movs	r2, #116	; 0x74
 80022ce:	2101      	movs	r1, #1
 80022d0:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a18      	ldr	r2, [pc, #96]	; (8002340 <HAL_UART_Receive_IT+0xcc>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d020      	beq.n	8002324 <HAL_UART_Receive_IT+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	2380      	movs	r3, #128	; 0x80
 80022ea:	041b      	lsls	r3, r3, #16
 80022ec:	4013      	ands	r3, r2
 80022ee:	d019      	beq.n	8002324 <HAL_UART_Receive_IT+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022f0:	f3ef 8310 	mrs	r3, PRIMASK
 80022f4:	613b      	str	r3, [r7, #16]
  return(result);
 80022f6:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80022f8:	61fb      	str	r3, [r7, #28]
 80022fa:	2301      	movs	r3, #1
 80022fc:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f383 8810 	msr	PRIMASK, r3
}
 8002304:	46c0      	nop			; (mov r8, r8)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2180      	movs	r1, #128	; 0x80
 8002312:	04c9      	lsls	r1, r1, #19
 8002314:	430a      	orrs	r2, r1
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	f383 8810 	msr	PRIMASK, r3
}
 8002322:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002324:	1dbb      	adds	r3, r7, #6
 8002326:	881a      	ldrh	r2, [r3, #0]
 8002328:	68b9      	ldr	r1, [r7, #8]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	0018      	movs	r0, r3
 800232e:	f000 ff09 	bl	8003144 <UART_Start_Receive_IT>
 8002332:	0003      	movs	r3, r0
 8002334:	e000      	b.n	8002338 <HAL_UART_Receive_IT+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8002336:	2302      	movs	r3, #2
  }
}
 8002338:	0018      	movs	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	b008      	add	sp, #32
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40004800 	.word	0x40004800

08002344 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002344:	b590      	push	{r4, r7, lr}
 8002346:	b0ab      	sub	sp, #172	; 0xac
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	22a4      	movs	r2, #164	; 0xa4
 8002354:	18b9      	adds	r1, r7, r2
 8002356:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	20a0      	movs	r0, #160	; 0xa0
 8002360:	1839      	adds	r1, r7, r0
 8002362:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	219c      	movs	r1, #156	; 0x9c
 800236c:	1879      	adds	r1, r7, r1
 800236e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002370:	0011      	movs	r1, r2
 8002372:	18bb      	adds	r3, r7, r2
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a99      	ldr	r2, [pc, #612]	; (80025dc <HAL_UART_IRQHandler+0x298>)
 8002378:	4013      	ands	r3, r2
 800237a:	2298      	movs	r2, #152	; 0x98
 800237c:	18bc      	adds	r4, r7, r2
 800237e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002380:	18bb      	adds	r3, r7, r2
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d114      	bne.n	80023b2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002388:	187b      	adds	r3, r7, r1
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2220      	movs	r2, #32
 800238e:	4013      	ands	r3, r2
 8002390:	d00f      	beq.n	80023b2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002392:	183b      	adds	r3, r7, r0
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2220      	movs	r2, #32
 8002398:	4013      	ands	r3, r2
 800239a:	d00a      	beq.n	80023b2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d100      	bne.n	80023a6 <HAL_UART_IRQHandler+0x62>
 80023a4:	e298      	b.n	80028d8 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	0010      	movs	r0, r2
 80023ae:	4798      	blx	r3
      }
      return;
 80023b0:	e292      	b.n	80028d8 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80023b2:	2398      	movs	r3, #152	; 0x98
 80023b4:	18fb      	adds	r3, r7, r3
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d100      	bne.n	80023be <HAL_UART_IRQHandler+0x7a>
 80023bc:	e114      	b.n	80025e8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80023be:	239c      	movs	r3, #156	; 0x9c
 80023c0:	18fb      	adds	r3, r7, r3
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2201      	movs	r2, #1
 80023c6:	4013      	ands	r3, r2
 80023c8:	d106      	bne.n	80023d8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80023ca:	23a0      	movs	r3, #160	; 0xa0
 80023cc:	18fb      	adds	r3, r7, r3
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a83      	ldr	r2, [pc, #524]	; (80025e0 <HAL_UART_IRQHandler+0x29c>)
 80023d2:	4013      	ands	r3, r2
 80023d4:	d100      	bne.n	80023d8 <HAL_UART_IRQHandler+0x94>
 80023d6:	e107      	b.n	80025e8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80023d8:	23a4      	movs	r3, #164	; 0xa4
 80023da:	18fb      	adds	r3, r7, r3
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2201      	movs	r2, #1
 80023e0:	4013      	ands	r3, r2
 80023e2:	d012      	beq.n	800240a <HAL_UART_IRQHandler+0xc6>
 80023e4:	23a0      	movs	r3, #160	; 0xa0
 80023e6:	18fb      	adds	r3, r7, r3
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	2380      	movs	r3, #128	; 0x80
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	4013      	ands	r3, r2
 80023f0:	d00b      	beq.n	800240a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2201      	movs	r2, #1
 80023f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2280      	movs	r2, #128	; 0x80
 80023fe:	589b      	ldr	r3, [r3, r2]
 8002400:	2201      	movs	r2, #1
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2180      	movs	r1, #128	; 0x80
 8002408:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800240a:	23a4      	movs	r3, #164	; 0xa4
 800240c:	18fb      	adds	r3, r7, r3
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2202      	movs	r2, #2
 8002412:	4013      	ands	r3, r2
 8002414:	d011      	beq.n	800243a <HAL_UART_IRQHandler+0xf6>
 8002416:	239c      	movs	r3, #156	; 0x9c
 8002418:	18fb      	adds	r3, r7, r3
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2201      	movs	r2, #1
 800241e:	4013      	ands	r3, r2
 8002420:	d00b      	beq.n	800243a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2202      	movs	r2, #2
 8002428:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2280      	movs	r2, #128	; 0x80
 800242e:	589b      	ldr	r3, [r3, r2]
 8002430:	2204      	movs	r2, #4
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2180      	movs	r1, #128	; 0x80
 8002438:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800243a:	23a4      	movs	r3, #164	; 0xa4
 800243c:	18fb      	adds	r3, r7, r3
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2204      	movs	r2, #4
 8002442:	4013      	ands	r3, r2
 8002444:	d011      	beq.n	800246a <HAL_UART_IRQHandler+0x126>
 8002446:	239c      	movs	r3, #156	; 0x9c
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2201      	movs	r2, #1
 800244e:	4013      	ands	r3, r2
 8002450:	d00b      	beq.n	800246a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2204      	movs	r2, #4
 8002458:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2280      	movs	r2, #128	; 0x80
 800245e:	589b      	ldr	r3, [r3, r2]
 8002460:	2202      	movs	r2, #2
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2180      	movs	r1, #128	; 0x80
 8002468:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800246a:	23a4      	movs	r3, #164	; 0xa4
 800246c:	18fb      	adds	r3, r7, r3
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2208      	movs	r2, #8
 8002472:	4013      	ands	r3, r2
 8002474:	d017      	beq.n	80024a6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002476:	23a0      	movs	r3, #160	; 0xa0
 8002478:	18fb      	adds	r3, r7, r3
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2220      	movs	r2, #32
 800247e:	4013      	ands	r3, r2
 8002480:	d105      	bne.n	800248e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002482:	239c      	movs	r3, #156	; 0x9c
 8002484:	18fb      	adds	r3, r7, r3
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2201      	movs	r2, #1
 800248a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800248c:	d00b      	beq.n	80024a6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2208      	movs	r2, #8
 8002494:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2280      	movs	r2, #128	; 0x80
 800249a:	589b      	ldr	r3, [r3, r2]
 800249c:	2208      	movs	r2, #8
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2180      	movs	r1, #128	; 0x80
 80024a4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80024a6:	23a4      	movs	r3, #164	; 0xa4
 80024a8:	18fb      	adds	r3, r7, r3
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	2380      	movs	r3, #128	; 0x80
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	4013      	ands	r3, r2
 80024b2:	d013      	beq.n	80024dc <HAL_UART_IRQHandler+0x198>
 80024b4:	23a0      	movs	r3, #160	; 0xa0
 80024b6:	18fb      	adds	r3, r7, r3
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d00c      	beq.n	80024dc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2280      	movs	r2, #128	; 0x80
 80024c8:	0112      	lsls	r2, r2, #4
 80024ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2280      	movs	r2, #128	; 0x80
 80024d0:	589b      	ldr	r3, [r3, r2]
 80024d2:	2220      	movs	r2, #32
 80024d4:	431a      	orrs	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2180      	movs	r1, #128	; 0x80
 80024da:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2280      	movs	r2, #128	; 0x80
 80024e0:	589b      	ldr	r3, [r3, r2]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d100      	bne.n	80024e8 <HAL_UART_IRQHandler+0x1a4>
 80024e6:	e1f9      	b.n	80028dc <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80024e8:	23a4      	movs	r3, #164	; 0xa4
 80024ea:	18fb      	adds	r3, r7, r3
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2220      	movs	r2, #32
 80024f0:	4013      	ands	r3, r2
 80024f2:	d00e      	beq.n	8002512 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80024f4:	23a0      	movs	r3, #160	; 0xa0
 80024f6:	18fb      	adds	r3, r7, r3
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2220      	movs	r2, #32
 80024fc:	4013      	ands	r3, r2
 80024fe:	d008      	beq.n	8002512 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002504:	2b00      	cmp	r3, #0
 8002506:	d004      	beq.n	8002512 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	0010      	movs	r0, r2
 8002510:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2280      	movs	r2, #128	; 0x80
 8002516:	589b      	ldr	r3, [r3, r2]
 8002518:	2194      	movs	r1, #148	; 0x94
 800251a:	187a      	adds	r2, r7, r1
 800251c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	2240      	movs	r2, #64	; 0x40
 8002526:	4013      	ands	r3, r2
 8002528:	2b40      	cmp	r3, #64	; 0x40
 800252a:	d004      	beq.n	8002536 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800252c:	187b      	adds	r3, r7, r1
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2228      	movs	r2, #40	; 0x28
 8002532:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002534:	d047      	beq.n	80025c6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	0018      	movs	r0, r3
 800253a:	f000 feb3 	bl	80032a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	2240      	movs	r2, #64	; 0x40
 8002546:	4013      	ands	r3, r2
 8002548:	2b40      	cmp	r3, #64	; 0x40
 800254a:	d137      	bne.n	80025bc <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800254c:	f3ef 8310 	mrs	r3, PRIMASK
 8002550:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002552:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002554:	2090      	movs	r0, #144	; 0x90
 8002556:	183a      	adds	r2, r7, r0
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	2301      	movs	r3, #1
 800255c:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800255e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002560:	f383 8810 	msr	PRIMASK, r3
}
 8002564:	46c0      	nop			; (mov r8, r8)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2140      	movs	r1, #64	; 0x40
 8002572:	438a      	bics	r2, r1
 8002574:	609a      	str	r2, [r3, #8]
 8002576:	183b      	adds	r3, r7, r0
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800257c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800257e:	f383 8810 	msr	PRIMASK, r3
}
 8002582:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002588:	2b00      	cmp	r3, #0
 800258a:	d012      	beq.n	80025b2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002590:	4a14      	ldr	r2, [pc, #80]	; (80025e4 <HAL_UART_IRQHandler+0x2a0>)
 8002592:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002598:	0018      	movs	r0, r3
 800259a:	f7fe fc53 	bl	8000e44 <HAL_DMA_Abort_IT>
 800259e:	1e03      	subs	r3, r0, #0
 80025a0:	d01a      	beq.n	80025d8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ac:	0018      	movs	r0, r3
 80025ae:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025b0:	e012      	b.n	80025d8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	0018      	movs	r0, r3
 80025b6:	f000 f9a7 	bl	8002908 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025ba:	e00d      	b.n	80025d8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	0018      	movs	r0, r3
 80025c0:	f000 f9a2 	bl	8002908 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025c4:	e008      	b.n	80025d8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	0018      	movs	r0, r3
 80025ca:	f000 f99d 	bl	8002908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2280      	movs	r2, #128	; 0x80
 80025d2:	2100      	movs	r1, #0
 80025d4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80025d6:	e181      	b.n	80028dc <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025d8:	46c0      	nop			; (mov r8, r8)
    return;
 80025da:	e17f      	b.n	80028dc <HAL_UART_IRQHandler+0x598>
 80025dc:	0000080f 	.word	0x0000080f
 80025e0:	04000120 	.word	0x04000120
 80025e4:	08003369 	.word	0x08003369

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d000      	beq.n	80025f2 <HAL_UART_IRQHandler+0x2ae>
 80025f0:	e133      	b.n	800285a <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80025f2:	23a4      	movs	r3, #164	; 0xa4
 80025f4:	18fb      	adds	r3, r7, r3
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2210      	movs	r2, #16
 80025fa:	4013      	ands	r3, r2
 80025fc:	d100      	bne.n	8002600 <HAL_UART_IRQHandler+0x2bc>
 80025fe:	e12c      	b.n	800285a <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002600:	23a0      	movs	r3, #160	; 0xa0
 8002602:	18fb      	adds	r3, r7, r3
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2210      	movs	r2, #16
 8002608:	4013      	ands	r3, r2
 800260a:	d100      	bne.n	800260e <HAL_UART_IRQHandler+0x2ca>
 800260c:	e125      	b.n	800285a <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2210      	movs	r2, #16
 8002614:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	2240      	movs	r2, #64	; 0x40
 800261e:	4013      	ands	r3, r2
 8002620:	2b40      	cmp	r3, #64	; 0x40
 8002622:	d000      	beq.n	8002626 <HAL_UART_IRQHandler+0x2e2>
 8002624:	e09d      	b.n	8002762 <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	217e      	movs	r1, #126	; 0x7e
 8002630:	187b      	adds	r3, r7, r1
 8002632:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002634:	187b      	adds	r3, r7, r1
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d100      	bne.n	800263e <HAL_UART_IRQHandler+0x2fa>
 800263c:	e150      	b.n	80028e0 <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2258      	movs	r2, #88	; 0x58
 8002642:	5a9b      	ldrh	r3, [r3, r2]
 8002644:	187a      	adds	r2, r7, r1
 8002646:	8812      	ldrh	r2, [r2, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d300      	bcc.n	800264e <HAL_UART_IRQHandler+0x30a>
 800264c:	e148      	b.n	80028e0 <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	187a      	adds	r2, r7, r1
 8002652:	215a      	movs	r1, #90	; 0x5a
 8002654:	8812      	ldrh	r2, [r2, #0]
 8002656:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2220      	movs	r2, #32
 8002662:	4013      	ands	r3, r2
 8002664:	d16e      	bne.n	8002744 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002666:	f3ef 8310 	mrs	r3, PRIMASK
 800266a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800266c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800266e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002670:	2301      	movs	r3, #1
 8002672:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002676:	f383 8810 	msr	PRIMASK, r3
}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	499a      	ldr	r1, [pc, #616]	; (80028f0 <HAL_UART_IRQHandler+0x5ac>)
 8002688:	400a      	ands	r2, r1
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800268e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002692:	f383 8810 	msr	PRIMASK, r3
}
 8002696:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002698:	f3ef 8310 	mrs	r3, PRIMASK
 800269c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800269e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026a0:	677b      	str	r3, [r7, #116]	; 0x74
 80026a2:	2301      	movs	r3, #1
 80026a4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026a8:	f383 8810 	msr	PRIMASK, r3
}
 80026ac:	46c0      	nop			; (mov r8, r8)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2101      	movs	r1, #1
 80026ba:	438a      	bics	r2, r1
 80026bc:	609a      	str	r2, [r3, #8]
 80026be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026c0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026c4:	f383 8810 	msr	PRIMASK, r3
}
 80026c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026ca:	f3ef 8310 	mrs	r3, PRIMASK
 80026ce:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80026d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026d2:	673b      	str	r3, [r7, #112]	; 0x70
 80026d4:	2301      	movs	r3, #1
 80026d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026da:	f383 8810 	msr	PRIMASK, r3
}
 80026de:	46c0      	nop			; (mov r8, r8)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2140      	movs	r1, #64	; 0x40
 80026ec:	438a      	bics	r2, r1
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026f2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026f6:	f383 8810 	msr	PRIMASK, r3
}
 80026fa:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2220      	movs	r2, #32
 8002700:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002708:	f3ef 8310 	mrs	r3, PRIMASK
 800270c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800270e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002710:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002712:	2301      	movs	r3, #1
 8002714:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002716:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002718:	f383 8810 	msr	PRIMASK, r3
}
 800271c:	46c0      	nop			; (mov r8, r8)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2110      	movs	r1, #16
 800272a:	438a      	bics	r2, r1
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002730:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002734:	f383 8810 	msr	PRIMASK, r3
}
 8002738:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273e:	0018      	movs	r0, r3
 8002740:	f7fe fb40 	bl	8000dc4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2258      	movs	r2, #88	; 0x58
 8002748:	5a9a      	ldrh	r2, [r3, r2]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	215a      	movs	r1, #90	; 0x5a
 800274e:	5a5b      	ldrh	r3, [r3, r1]
 8002750:	b29b      	uxth	r3, r3
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	b29a      	uxth	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	0011      	movs	r1, r2
 800275a:	0018      	movs	r0, r3
 800275c:	f000 f8dc 	bl	8002918 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002760:	e0be      	b.n	80028e0 <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2258      	movs	r2, #88	; 0x58
 8002766:	5a99      	ldrh	r1, [r3, r2]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	225a      	movs	r2, #90	; 0x5a
 800276c:	5a9b      	ldrh	r3, [r3, r2]
 800276e:	b29a      	uxth	r2, r3
 8002770:	208e      	movs	r0, #142	; 0x8e
 8002772:	183b      	adds	r3, r7, r0
 8002774:	1a8a      	subs	r2, r1, r2
 8002776:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	225a      	movs	r2, #90	; 0x5a
 800277c:	5a9b      	ldrh	r3, [r3, r2]
 800277e:	b29b      	uxth	r3, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	d100      	bne.n	8002786 <HAL_UART_IRQHandler+0x442>
 8002784:	e0ae      	b.n	80028e4 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 8002786:	183b      	adds	r3, r7, r0
 8002788:	881b      	ldrh	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d100      	bne.n	8002790 <HAL_UART_IRQHandler+0x44c>
 800278e:	e0a9      	b.n	80028e4 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002790:	f3ef 8310 	mrs	r3, PRIMASK
 8002794:	60fb      	str	r3, [r7, #12]
  return(result);
 8002796:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002798:	2488      	movs	r4, #136	; 0x88
 800279a:	193a      	adds	r2, r7, r4
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	2301      	movs	r3, #1
 80027a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	f383 8810 	msr	PRIMASK, r3
}
 80027a8:	46c0      	nop			; (mov r8, r8)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	494f      	ldr	r1, [pc, #316]	; (80028f4 <HAL_UART_IRQHandler+0x5b0>)
 80027b6:	400a      	ands	r2, r1
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	193b      	adds	r3, r7, r4
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f383 8810 	msr	PRIMASK, r3
}
 80027c6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027c8:	f3ef 8310 	mrs	r3, PRIMASK
 80027cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80027ce:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027d0:	2484      	movs	r4, #132	; 0x84
 80027d2:	193a      	adds	r2, r7, r4
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	2301      	movs	r3, #1
 80027d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	f383 8810 	msr	PRIMASK, r3
}
 80027e0:	46c0      	nop			; (mov r8, r8)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2101      	movs	r1, #1
 80027ee:	438a      	bics	r2, r1
 80027f0:	609a      	str	r2, [r3, #8]
 80027f2:	193b      	adds	r3, r7, r4
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027f8:	6a3b      	ldr	r3, [r7, #32]
 80027fa:	f383 8810 	msr	PRIMASK, r3
}
 80027fe:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2220      	movs	r2, #32
 8002804:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002812:	f3ef 8310 	mrs	r3, PRIMASK
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800281a:	2480      	movs	r4, #128	; 0x80
 800281c:	193a      	adds	r2, r7, r4
 800281e:	6013      	str	r3, [r2, #0]
 8002820:	2301      	movs	r3, #1
 8002822:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002826:	f383 8810 	msr	PRIMASK, r3
}
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2110      	movs	r1, #16
 8002838:	438a      	bics	r2, r1
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	193b      	adds	r3, r7, r4
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002844:	f383 8810 	msr	PRIMASK, r3
}
 8002848:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800284a:	183b      	adds	r3, r7, r0
 800284c:	881a      	ldrh	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	0011      	movs	r1, r2
 8002852:	0018      	movs	r0, r3
 8002854:	f000 f860 	bl	8002918 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002858:	e044      	b.n	80028e4 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800285a:	23a4      	movs	r3, #164	; 0xa4
 800285c:	18fb      	adds	r3, r7, r3
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	2380      	movs	r3, #128	; 0x80
 8002862:	035b      	lsls	r3, r3, #13
 8002864:	4013      	ands	r3, r2
 8002866:	d010      	beq.n	800288a <HAL_UART_IRQHandler+0x546>
 8002868:	239c      	movs	r3, #156	; 0x9c
 800286a:	18fb      	adds	r3, r7, r3
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	2380      	movs	r3, #128	; 0x80
 8002870:	03db      	lsls	r3, r3, #15
 8002872:	4013      	ands	r3, r2
 8002874:	d009      	beq.n	800288a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2280      	movs	r2, #128	; 0x80
 800287c:	0352      	lsls	r2, r2, #13
 800287e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	0018      	movs	r0, r3
 8002884:	f000 ff1a 	bl	80036bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002888:	e02f      	b.n	80028ea <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800288a:	23a4      	movs	r3, #164	; 0xa4
 800288c:	18fb      	adds	r3, r7, r3
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2280      	movs	r2, #128	; 0x80
 8002892:	4013      	ands	r3, r2
 8002894:	d00f      	beq.n	80028b6 <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002896:	23a0      	movs	r3, #160	; 0xa0
 8002898:	18fb      	adds	r3, r7, r3
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2280      	movs	r2, #128	; 0x80
 800289e:	4013      	ands	r3, r2
 80028a0:	d009      	beq.n	80028b6 <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d01e      	beq.n	80028e8 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	0010      	movs	r0, r2
 80028b2:	4798      	blx	r3
    }
    return;
 80028b4:	e018      	b.n	80028e8 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80028b6:	23a4      	movs	r3, #164	; 0xa4
 80028b8:	18fb      	adds	r3, r7, r3
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2240      	movs	r2, #64	; 0x40
 80028be:	4013      	ands	r3, r2
 80028c0:	d013      	beq.n	80028ea <HAL_UART_IRQHandler+0x5a6>
 80028c2:	23a0      	movs	r3, #160	; 0xa0
 80028c4:	18fb      	adds	r3, r7, r3
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2240      	movs	r2, #64	; 0x40
 80028ca:	4013      	ands	r3, r2
 80028cc:	d00d      	beq.n	80028ea <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	0018      	movs	r0, r3
 80028d2:	f000 fd60 	bl	8003396 <UART_EndTransmit_IT>
    return;
 80028d6:	e008      	b.n	80028ea <HAL_UART_IRQHandler+0x5a6>
      return;
 80028d8:	46c0      	nop			; (mov r8, r8)
 80028da:	e006      	b.n	80028ea <HAL_UART_IRQHandler+0x5a6>
    return;
 80028dc:	46c0      	nop			; (mov r8, r8)
 80028de:	e004      	b.n	80028ea <HAL_UART_IRQHandler+0x5a6>
      return;
 80028e0:	46c0      	nop			; (mov r8, r8)
 80028e2:	e002      	b.n	80028ea <HAL_UART_IRQHandler+0x5a6>
      return;
 80028e4:	46c0      	nop			; (mov r8, r8)
 80028e6:	e000      	b.n	80028ea <HAL_UART_IRQHandler+0x5a6>
    return;
 80028e8:	46c0      	nop			; (mov r8, r8)
  }

}
 80028ea:	46bd      	mov	sp, r7
 80028ec:	b02b      	add	sp, #172	; 0xac
 80028ee:	bd90      	pop	{r4, r7, pc}
 80028f0:	fffffeff 	.word	0xfffffeff
 80028f4:	fffffedf 	.word	0xfffffedf

080028f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002900:	46c0      	nop			; (mov r8, r8)
 8002902:	46bd      	mov	sp, r7
 8002904:	b002      	add	sp, #8
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002910:	46c0      	nop			; (mov r8, r8)
 8002912:	46bd      	mov	sp, r7
 8002914:	b002      	add	sp, #8
 8002916:	bd80      	pop	{r7, pc}

08002918 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	000a      	movs	r2, r1
 8002922:	1cbb      	adds	r3, r7, #2
 8002924:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	46bd      	mov	sp, r7
 800292a:	b002      	add	sp, #8
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002930:	b5b0      	push	{r4, r5, r7, lr}
 8002932:	b08e      	sub	sp, #56	; 0x38
 8002934:	af00      	add	r7, sp, #0
 8002936:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002938:	231a      	movs	r3, #26
 800293a:	2218      	movs	r2, #24
 800293c:	189b      	adds	r3, r3, r2
 800293e:	19db      	adds	r3, r3, r7
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	431a      	orrs	r2, r3
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	431a      	orrs	r2, r3
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	4313      	orrs	r3, r2
 800295a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4ab4      	ldr	r2, [pc, #720]	; (8002c34 <UART_SetConfig+0x304>)
 8002964:	4013      	ands	r3, r2
 8002966:	0019      	movs	r1, r3
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800296e:	430a      	orrs	r2, r1
 8002970:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	4aaf      	ldr	r2, [pc, #700]	; (8002c38 <UART_SetConfig+0x308>)
 800297a:	4013      	ands	r3, r2
 800297c:	0019      	movs	r1, r3
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4aa9      	ldr	r2, [pc, #676]	; (8002c3c <UART_SetConfig+0x30c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d004      	beq.n	80029a4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029a0:	4313      	orrs	r3, r2
 80029a2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	4aa5      	ldr	r2, [pc, #660]	; (8002c40 <UART_SetConfig+0x310>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	0019      	movs	r1, r3
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029b6:	430a      	orrs	r2, r1
 80029b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4aa1      	ldr	r2, [pc, #644]	; (8002c44 <UART_SetConfig+0x314>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d131      	bne.n	8002a28 <UART_SetConfig+0xf8>
 80029c4:	4ba0      	ldr	r3, [pc, #640]	; (8002c48 <UART_SetConfig+0x318>)
 80029c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c8:	220c      	movs	r2, #12
 80029ca:	4013      	ands	r3, r2
 80029cc:	2b0c      	cmp	r3, #12
 80029ce:	d01d      	beq.n	8002a0c <UART_SetConfig+0xdc>
 80029d0:	d823      	bhi.n	8002a1a <UART_SetConfig+0xea>
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d00c      	beq.n	80029f0 <UART_SetConfig+0xc0>
 80029d6:	d820      	bhi.n	8002a1a <UART_SetConfig+0xea>
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d002      	beq.n	80029e2 <UART_SetConfig+0xb2>
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d00e      	beq.n	80029fe <UART_SetConfig+0xce>
 80029e0:	e01b      	b.n	8002a1a <UART_SetConfig+0xea>
 80029e2:	231b      	movs	r3, #27
 80029e4:	2218      	movs	r2, #24
 80029e6:	189b      	adds	r3, r3, r2
 80029e8:	19db      	adds	r3, r3, r7
 80029ea:	2200      	movs	r2, #0
 80029ec:	701a      	strb	r2, [r3, #0]
 80029ee:	e065      	b.n	8002abc <UART_SetConfig+0x18c>
 80029f0:	231b      	movs	r3, #27
 80029f2:	2218      	movs	r2, #24
 80029f4:	189b      	adds	r3, r3, r2
 80029f6:	19db      	adds	r3, r3, r7
 80029f8:	2202      	movs	r2, #2
 80029fa:	701a      	strb	r2, [r3, #0]
 80029fc:	e05e      	b.n	8002abc <UART_SetConfig+0x18c>
 80029fe:	231b      	movs	r3, #27
 8002a00:	2218      	movs	r2, #24
 8002a02:	189b      	adds	r3, r3, r2
 8002a04:	19db      	adds	r3, r3, r7
 8002a06:	2204      	movs	r2, #4
 8002a08:	701a      	strb	r2, [r3, #0]
 8002a0a:	e057      	b.n	8002abc <UART_SetConfig+0x18c>
 8002a0c:	231b      	movs	r3, #27
 8002a0e:	2218      	movs	r2, #24
 8002a10:	189b      	adds	r3, r3, r2
 8002a12:	19db      	adds	r3, r3, r7
 8002a14:	2208      	movs	r2, #8
 8002a16:	701a      	strb	r2, [r3, #0]
 8002a18:	e050      	b.n	8002abc <UART_SetConfig+0x18c>
 8002a1a:	231b      	movs	r3, #27
 8002a1c:	2218      	movs	r2, #24
 8002a1e:	189b      	adds	r3, r3, r2
 8002a20:	19db      	adds	r3, r3, r7
 8002a22:	2210      	movs	r2, #16
 8002a24:	701a      	strb	r2, [r3, #0]
 8002a26:	e049      	b.n	8002abc <UART_SetConfig+0x18c>
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a83      	ldr	r2, [pc, #524]	; (8002c3c <UART_SetConfig+0x30c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d13e      	bne.n	8002ab0 <UART_SetConfig+0x180>
 8002a32:	4b85      	ldr	r3, [pc, #532]	; (8002c48 <UART_SetConfig+0x318>)
 8002a34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a36:	23c0      	movs	r3, #192	; 0xc0
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	22c0      	movs	r2, #192	; 0xc0
 8002a3e:	0112      	lsls	r2, r2, #4
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d027      	beq.n	8002a94 <UART_SetConfig+0x164>
 8002a44:	22c0      	movs	r2, #192	; 0xc0
 8002a46:	0112      	lsls	r2, r2, #4
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d82a      	bhi.n	8002aa2 <UART_SetConfig+0x172>
 8002a4c:	2280      	movs	r2, #128	; 0x80
 8002a4e:	0112      	lsls	r2, r2, #4
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d011      	beq.n	8002a78 <UART_SetConfig+0x148>
 8002a54:	2280      	movs	r2, #128	; 0x80
 8002a56:	0112      	lsls	r2, r2, #4
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d822      	bhi.n	8002aa2 <UART_SetConfig+0x172>
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d004      	beq.n	8002a6a <UART_SetConfig+0x13a>
 8002a60:	2280      	movs	r2, #128	; 0x80
 8002a62:	00d2      	lsls	r2, r2, #3
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d00e      	beq.n	8002a86 <UART_SetConfig+0x156>
 8002a68:	e01b      	b.n	8002aa2 <UART_SetConfig+0x172>
 8002a6a:	231b      	movs	r3, #27
 8002a6c:	2218      	movs	r2, #24
 8002a6e:	189b      	adds	r3, r3, r2
 8002a70:	19db      	adds	r3, r3, r7
 8002a72:	2200      	movs	r2, #0
 8002a74:	701a      	strb	r2, [r3, #0]
 8002a76:	e021      	b.n	8002abc <UART_SetConfig+0x18c>
 8002a78:	231b      	movs	r3, #27
 8002a7a:	2218      	movs	r2, #24
 8002a7c:	189b      	adds	r3, r3, r2
 8002a7e:	19db      	adds	r3, r3, r7
 8002a80:	2202      	movs	r2, #2
 8002a82:	701a      	strb	r2, [r3, #0]
 8002a84:	e01a      	b.n	8002abc <UART_SetConfig+0x18c>
 8002a86:	231b      	movs	r3, #27
 8002a88:	2218      	movs	r2, #24
 8002a8a:	189b      	adds	r3, r3, r2
 8002a8c:	19db      	adds	r3, r3, r7
 8002a8e:	2204      	movs	r2, #4
 8002a90:	701a      	strb	r2, [r3, #0]
 8002a92:	e013      	b.n	8002abc <UART_SetConfig+0x18c>
 8002a94:	231b      	movs	r3, #27
 8002a96:	2218      	movs	r2, #24
 8002a98:	189b      	adds	r3, r3, r2
 8002a9a:	19db      	adds	r3, r3, r7
 8002a9c:	2208      	movs	r2, #8
 8002a9e:	701a      	strb	r2, [r3, #0]
 8002aa0:	e00c      	b.n	8002abc <UART_SetConfig+0x18c>
 8002aa2:	231b      	movs	r3, #27
 8002aa4:	2218      	movs	r2, #24
 8002aa6:	189b      	adds	r3, r3, r2
 8002aa8:	19db      	adds	r3, r3, r7
 8002aaa:	2210      	movs	r2, #16
 8002aac:	701a      	strb	r2, [r3, #0]
 8002aae:	e005      	b.n	8002abc <UART_SetConfig+0x18c>
 8002ab0:	231b      	movs	r3, #27
 8002ab2:	2218      	movs	r2, #24
 8002ab4:	189b      	adds	r3, r3, r2
 8002ab6:	19db      	adds	r3, r3, r7
 8002ab8:	2210      	movs	r2, #16
 8002aba:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a5e      	ldr	r2, [pc, #376]	; (8002c3c <UART_SetConfig+0x30c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d000      	beq.n	8002ac8 <UART_SetConfig+0x198>
 8002ac6:	e084      	b.n	8002bd2 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002ac8:	231b      	movs	r3, #27
 8002aca:	2218      	movs	r2, #24
 8002acc:	189b      	adds	r3, r3, r2
 8002ace:	19db      	adds	r3, r3, r7
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d01d      	beq.n	8002b12 <UART_SetConfig+0x1e2>
 8002ad6:	dc20      	bgt.n	8002b1a <UART_SetConfig+0x1ea>
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d015      	beq.n	8002b08 <UART_SetConfig+0x1d8>
 8002adc:	dc1d      	bgt.n	8002b1a <UART_SetConfig+0x1ea>
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d002      	beq.n	8002ae8 <UART_SetConfig+0x1b8>
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d005      	beq.n	8002af2 <UART_SetConfig+0x1c2>
 8002ae6:	e018      	b.n	8002b1a <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ae8:	f7ff f8ec 	bl	8001cc4 <HAL_RCC_GetPCLK1Freq>
 8002aec:	0003      	movs	r3, r0
 8002aee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002af0:	e01c      	b.n	8002b2c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002af2:	4b55      	ldr	r3, [pc, #340]	; (8002c48 <UART_SetConfig+0x318>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2210      	movs	r2, #16
 8002af8:	4013      	ands	r3, r2
 8002afa:	d002      	beq.n	8002b02 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002afc:	4b53      	ldr	r3, [pc, #332]	; (8002c4c <UART_SetConfig+0x31c>)
 8002afe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002b00:	e014      	b.n	8002b2c <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8002b02:	4b53      	ldr	r3, [pc, #332]	; (8002c50 <UART_SetConfig+0x320>)
 8002b04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b06:	e011      	b.n	8002b2c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b08:	f7ff f82c 	bl	8001b64 <HAL_RCC_GetSysClockFreq>
 8002b0c:	0003      	movs	r3, r0
 8002b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b10:	e00c      	b.n	8002b2c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b12:	2380      	movs	r3, #128	; 0x80
 8002b14:	021b      	lsls	r3, r3, #8
 8002b16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b18:	e008      	b.n	8002b2c <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002b1e:	231a      	movs	r3, #26
 8002b20:	2218      	movs	r2, #24
 8002b22:	189b      	adds	r3, r3, r2
 8002b24:	19db      	adds	r3, r3, r7
 8002b26:	2201      	movs	r2, #1
 8002b28:	701a      	strb	r2, [r3, #0]
        break;
 8002b2a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d100      	bne.n	8002b34 <UART_SetConfig+0x204>
 8002b32:	e130      	b.n	8002d96 <UART_SetConfig+0x466>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	0013      	movs	r3, r2
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	189b      	adds	r3, r3, r2
 8002b3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d305      	bcc.n	8002b50 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d906      	bls.n	8002b5e <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8002b50:	231a      	movs	r3, #26
 8002b52:	2218      	movs	r2, #24
 8002b54:	189b      	adds	r3, r3, r2
 8002b56:	19db      	adds	r3, r3, r7
 8002b58:	2201      	movs	r2, #1
 8002b5a:	701a      	strb	r2, [r3, #0]
 8002b5c:	e11b      	b.n	8002d96 <UART_SetConfig+0x466>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b60:	613b      	str	r3, [r7, #16]
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	6939      	ldr	r1, [r7, #16]
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	000b      	movs	r3, r1
 8002b6c:	0e1b      	lsrs	r3, r3, #24
 8002b6e:	0010      	movs	r0, r2
 8002b70:	0205      	lsls	r5, r0, #8
 8002b72:	431d      	orrs	r5, r3
 8002b74:	000b      	movs	r3, r1
 8002b76:	021c      	lsls	r4, r3, #8
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	085b      	lsrs	r3, r3, #1
 8002b7e:	60bb      	str	r3, [r7, #8]
 8002b80:	2300      	movs	r3, #0
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	68b8      	ldr	r0, [r7, #8]
 8002b86:	68f9      	ldr	r1, [r7, #12]
 8002b88:	1900      	adds	r0, r0, r4
 8002b8a:	4169      	adcs	r1, r5
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	603b      	str	r3, [r7, #0]
 8002b92:	2300      	movs	r3, #0
 8002b94:	607b      	str	r3, [r7, #4]
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f7fd fb41 	bl	8000220 <__aeabi_uldivmod>
 8002b9e:	0002      	movs	r2, r0
 8002ba0:	000b      	movs	r3, r1
 8002ba2:	0013      	movs	r3, r2
 8002ba4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002ba6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ba8:	23c0      	movs	r3, #192	; 0xc0
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d309      	bcc.n	8002bc4 <UART_SetConfig+0x294>
 8002bb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bb2:	2380      	movs	r3, #128	; 0x80
 8002bb4:	035b      	lsls	r3, r3, #13
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d204      	bcs.n	8002bc4 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bc0:	60da      	str	r2, [r3, #12]
 8002bc2:	e0e8      	b.n	8002d96 <UART_SetConfig+0x466>
        }
        else
        {
          ret = HAL_ERROR;
 8002bc4:	231a      	movs	r3, #26
 8002bc6:	2218      	movs	r2, #24
 8002bc8:	189b      	adds	r3, r3, r2
 8002bca:	19db      	adds	r3, r3, r7
 8002bcc:	2201      	movs	r2, #1
 8002bce:	701a      	strb	r2, [r3, #0]
 8002bd0:	e0e1      	b.n	8002d96 <UART_SetConfig+0x466>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	69da      	ldr	r2, [r3, #28]
 8002bd6:	2380      	movs	r3, #128	; 0x80
 8002bd8:	021b      	lsls	r3, r3, #8
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d000      	beq.n	8002be0 <UART_SetConfig+0x2b0>
 8002bde:	e083      	b.n	8002ce8 <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 8002be0:	231b      	movs	r3, #27
 8002be2:	2218      	movs	r2, #24
 8002be4:	189b      	adds	r3, r3, r2
 8002be6:	19db      	adds	r3, r3, r7
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	d834      	bhi.n	8002c58 <UART_SetConfig+0x328>
 8002bee:	009a      	lsls	r2, r3, #2
 8002bf0:	4b18      	ldr	r3, [pc, #96]	; (8002c54 <UART_SetConfig+0x324>)
 8002bf2:	18d3      	adds	r3, r2, r3
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bf8:	f7ff f864 	bl	8001cc4 <HAL_RCC_GetPCLK1Freq>
 8002bfc:	0003      	movs	r3, r0
 8002bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c00:	e033      	b.n	8002c6a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c02:	f7ff f875 	bl	8001cf0 <HAL_RCC_GetPCLK2Freq>
 8002c06:	0003      	movs	r3, r0
 8002c08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c0a:	e02e      	b.n	8002c6a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c0c:	4b0e      	ldr	r3, [pc, #56]	; (8002c48 <UART_SetConfig+0x318>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2210      	movs	r2, #16
 8002c12:	4013      	ands	r3, r2
 8002c14:	d002      	beq.n	8002c1c <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002c16:	4b0d      	ldr	r3, [pc, #52]	; (8002c4c <UART_SetConfig+0x31c>)
 8002c18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002c1a:	e026      	b.n	8002c6a <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <UART_SetConfig+0x320>)
 8002c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c20:	e023      	b.n	8002c6a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c22:	f7fe ff9f 	bl	8001b64 <HAL_RCC_GetSysClockFreq>
 8002c26:	0003      	movs	r3, r0
 8002c28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c2a:	e01e      	b.n	8002c6a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c2c:	2380      	movs	r3, #128	; 0x80
 8002c2e:	021b      	lsls	r3, r3, #8
 8002c30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c32:	e01a      	b.n	8002c6a <UART_SetConfig+0x33a>
 8002c34:	efff69f3 	.word	0xefff69f3
 8002c38:	ffffcfff 	.word	0xffffcfff
 8002c3c:	40004800 	.word	0x40004800
 8002c40:	fffff4ff 	.word	0xfffff4ff
 8002c44:	40004400 	.word	0x40004400
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	003d0900 	.word	0x003d0900
 8002c50:	00f42400 	.word	0x00f42400
 8002c54:	08003760 	.word	0x08003760
      default:
        pclk = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002c5c:	231a      	movs	r3, #26
 8002c5e:	2218      	movs	r2, #24
 8002c60:	189b      	adds	r3, r3, r2
 8002c62:	19db      	adds	r3, r3, r7
 8002c64:	2201      	movs	r2, #1
 8002c66:	701a      	strb	r2, [r3, #0]
        break;
 8002c68:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d100      	bne.n	8002c72 <UART_SetConfig+0x342>
 8002c70:	e091      	b.n	8002d96 <UART_SetConfig+0x466>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c74:	005a      	lsls	r2, r3, #1
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	085b      	lsrs	r3, r3, #1
 8002c7c:	18d2      	adds	r2, r2, r3
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	0019      	movs	r1, r3
 8002c84:	0010      	movs	r0, r2
 8002c86:	f7fd fa3f 	bl	8000108 <__udivsi3>
 8002c8a:	0003      	movs	r3, r0
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c92:	2b0f      	cmp	r3, #15
 8002c94:	d921      	bls.n	8002cda <UART_SetConfig+0x3aa>
 8002c96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c98:	2380      	movs	r3, #128	; 0x80
 8002c9a:	025b      	lsls	r3, r3, #9
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d21c      	bcs.n	8002cda <UART_SetConfig+0x3aa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	200e      	movs	r0, #14
 8002ca6:	2418      	movs	r4, #24
 8002ca8:	1903      	adds	r3, r0, r4
 8002caa:	19db      	adds	r3, r3, r7
 8002cac:	210f      	movs	r1, #15
 8002cae:	438a      	bics	r2, r1
 8002cb0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb4:	085b      	lsrs	r3, r3, #1
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	2207      	movs	r2, #7
 8002cba:	4013      	ands	r3, r2
 8002cbc:	b299      	uxth	r1, r3
 8002cbe:	1903      	adds	r3, r0, r4
 8002cc0:	19db      	adds	r3, r3, r7
 8002cc2:	1902      	adds	r2, r0, r4
 8002cc4:	19d2      	adds	r2, r2, r7
 8002cc6:	8812      	ldrh	r2, [r2, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	1902      	adds	r2, r0, r4
 8002cd2:	19d2      	adds	r2, r2, r7
 8002cd4:	8812      	ldrh	r2, [r2, #0]
 8002cd6:	60da      	str	r2, [r3, #12]
 8002cd8:	e05d      	b.n	8002d96 <UART_SetConfig+0x466>
      }
      else
      {
        ret = HAL_ERROR;
 8002cda:	231a      	movs	r3, #26
 8002cdc:	2218      	movs	r2, #24
 8002cde:	189b      	adds	r3, r3, r2
 8002ce0:	19db      	adds	r3, r3, r7
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	701a      	strb	r2, [r3, #0]
 8002ce6:	e056      	b.n	8002d96 <UART_SetConfig+0x466>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ce8:	231b      	movs	r3, #27
 8002cea:	2218      	movs	r2, #24
 8002cec:	189b      	adds	r3, r3, r2
 8002cee:	19db      	adds	r3, r3, r7
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d822      	bhi.n	8002d3c <UART_SetConfig+0x40c>
 8002cf6:	009a      	lsls	r2, r3, #2
 8002cf8:	4b2e      	ldr	r3, [pc, #184]	; (8002db4 <UART_SetConfig+0x484>)
 8002cfa:	18d3      	adds	r3, r2, r3
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d00:	f7fe ffe0 	bl	8001cc4 <HAL_RCC_GetPCLK1Freq>
 8002d04:	0003      	movs	r3, r0
 8002d06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d08:	e021      	b.n	8002d4e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d0a:	f7fe fff1 	bl	8001cf0 <HAL_RCC_GetPCLK2Freq>
 8002d0e:	0003      	movs	r3, r0
 8002d10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d12:	e01c      	b.n	8002d4e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d14:	4b28      	ldr	r3, [pc, #160]	; (8002db8 <UART_SetConfig+0x488>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2210      	movs	r2, #16
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d002      	beq.n	8002d24 <UART_SetConfig+0x3f4>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002d1e:	4b27      	ldr	r3, [pc, #156]	; (8002dbc <UART_SetConfig+0x48c>)
 8002d20:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002d22:	e014      	b.n	8002d4e <UART_SetConfig+0x41e>
          pclk = (uint32_t) HSI_VALUE;
 8002d24:	4b26      	ldr	r3, [pc, #152]	; (8002dc0 <UART_SetConfig+0x490>)
 8002d26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d28:	e011      	b.n	8002d4e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d2a:	f7fe ff1b 	bl	8001b64 <HAL_RCC_GetSysClockFreq>
 8002d2e:	0003      	movs	r3, r0
 8002d30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d32:	e00c      	b.n	8002d4e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d34:	2380      	movs	r3, #128	; 0x80
 8002d36:	021b      	lsls	r3, r3, #8
 8002d38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d3a:	e008      	b.n	8002d4e <UART_SetConfig+0x41e>
      default:
        pclk = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002d40:	231a      	movs	r3, #26
 8002d42:	2218      	movs	r2, #24
 8002d44:	189b      	adds	r3, r3, r2
 8002d46:	19db      	adds	r3, r3, r7
 8002d48:	2201      	movs	r2, #1
 8002d4a:	701a      	strb	r2, [r3, #0]
        break;
 8002d4c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d020      	beq.n	8002d96 <UART_SetConfig+0x466>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	085a      	lsrs	r2, r3, #1
 8002d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5c:	18d2      	adds	r2, r2, r3
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	0019      	movs	r1, r3
 8002d64:	0010      	movs	r0, r2
 8002d66:	f7fd f9cf 	bl	8000108 <__udivsi3>
 8002d6a:	0003      	movs	r3, r0
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d72:	2b0f      	cmp	r3, #15
 8002d74:	d909      	bls.n	8002d8a <UART_SetConfig+0x45a>
 8002d76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d78:	2380      	movs	r3, #128	; 0x80
 8002d7a:	025b      	lsls	r3, r3, #9
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d204      	bcs.n	8002d8a <UART_SetConfig+0x45a>
      {
        huart->Instance->BRR = usartdiv;
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d86:	60da      	str	r2, [r3, #12]
 8002d88:	e005      	b.n	8002d96 <UART_SetConfig+0x466>
      }
      else
      {
        ret = HAL_ERROR;
 8002d8a:	231a      	movs	r3, #26
 8002d8c:	2218      	movs	r2, #24
 8002d8e:	189b      	adds	r3, r3, r2
 8002d90:	19db      	adds	r3, r3, r7
 8002d92:	2201      	movs	r2, #1
 8002d94:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002da2:	231a      	movs	r3, #26
 8002da4:	2218      	movs	r2, #24
 8002da6:	189b      	adds	r3, r3, r2
 8002da8:	19db      	adds	r3, r3, r7
 8002daa:	781b      	ldrb	r3, [r3, #0]
}
 8002dac:	0018      	movs	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	b00e      	add	sp, #56	; 0x38
 8002db2:	bdb0      	pop	{r4, r5, r7, pc}
 8002db4:	08003784 	.word	0x08003784
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	003d0900 	.word	0x003d0900
 8002dc0:	00f42400 	.word	0x00f42400

08002dc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	d00b      	beq.n	8002dee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	4a4a      	ldr	r2, [pc, #296]	; (8002f08 <UART_AdvFeatureConfig+0x144>)
 8002dde:	4013      	ands	r3, r2
 8002de0:	0019      	movs	r1, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	2202      	movs	r2, #2
 8002df4:	4013      	ands	r3, r2
 8002df6:	d00b      	beq.n	8002e10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	4a43      	ldr	r2, [pc, #268]	; (8002f0c <UART_AdvFeatureConfig+0x148>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	0019      	movs	r1, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	2204      	movs	r2, #4
 8002e16:	4013      	ands	r3, r2
 8002e18:	d00b      	beq.n	8002e32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	4a3b      	ldr	r2, [pc, #236]	; (8002f10 <UART_AdvFeatureConfig+0x14c>)
 8002e22:	4013      	ands	r3, r2
 8002e24:	0019      	movs	r1, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	2208      	movs	r2, #8
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d00b      	beq.n	8002e54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	4a34      	ldr	r2, [pc, #208]	; (8002f14 <UART_AdvFeatureConfig+0x150>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	0019      	movs	r1, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	2210      	movs	r2, #16
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d00b      	beq.n	8002e76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	4a2c      	ldr	r2, [pc, #176]	; (8002f18 <UART_AdvFeatureConfig+0x154>)
 8002e66:	4013      	ands	r3, r2
 8002e68:	0019      	movs	r1, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	d00b      	beq.n	8002e98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	4a25      	ldr	r2, [pc, #148]	; (8002f1c <UART_AdvFeatureConfig+0x158>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	0019      	movs	r1, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	2240      	movs	r2, #64	; 0x40
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	d01d      	beq.n	8002ede <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	4a1d      	ldr	r2, [pc, #116]	; (8002f20 <UART_AdvFeatureConfig+0x15c>)
 8002eaa:	4013      	ands	r3, r2
 8002eac:	0019      	movs	r1, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ebe:	2380      	movs	r3, #128	; 0x80
 8002ec0:	035b      	lsls	r3, r3, #13
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d10b      	bne.n	8002ede <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	4a15      	ldr	r2, [pc, #84]	; (8002f24 <UART_AdvFeatureConfig+0x160>)
 8002ece:	4013      	ands	r3, r2
 8002ed0:	0019      	movs	r1, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	2280      	movs	r2, #128	; 0x80
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	d00b      	beq.n	8002f00 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	4a0e      	ldr	r2, [pc, #56]	; (8002f28 <UART_AdvFeatureConfig+0x164>)
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	0019      	movs	r1, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	605a      	str	r2, [r3, #4]
  }
}
 8002f00:	46c0      	nop			; (mov r8, r8)
 8002f02:	46bd      	mov	sp, r7
 8002f04:	b002      	add	sp, #8
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	fffdffff 	.word	0xfffdffff
 8002f0c:	fffeffff 	.word	0xfffeffff
 8002f10:	fffbffff 	.word	0xfffbffff
 8002f14:	ffff7fff 	.word	0xffff7fff
 8002f18:	ffffefff 	.word	0xffffefff
 8002f1c:	ffffdfff 	.word	0xffffdfff
 8002f20:	ffefffff 	.word	0xffefffff
 8002f24:	ff9fffff 	.word	0xff9fffff
 8002f28:	fff7ffff 	.word	0xfff7ffff

08002f2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af02      	add	r7, sp, #8
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2280      	movs	r2, #128	; 0x80
 8002f38:	2100      	movs	r1, #0
 8002f3a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f3c:	f7fd fe36 	bl	8000bac <HAL_GetTick>
 8002f40:	0003      	movs	r3, r0
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2208      	movs	r2, #8
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	d10c      	bne.n	8002f6c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2280      	movs	r2, #128	; 0x80
 8002f56:	0391      	lsls	r1, r2, #14
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	4a17      	ldr	r2, [pc, #92]	; (8002fb8 <UART_CheckIdleState+0x8c>)
 8002f5c:	9200      	str	r2, [sp, #0]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f000 f82c 	bl	8002fbc <UART_WaitOnFlagUntilTimeout>
 8002f64:	1e03      	subs	r3, r0, #0
 8002f66:	d001      	beq.n	8002f6c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e021      	b.n	8002fb0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2204      	movs	r2, #4
 8002f74:	4013      	ands	r3, r2
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d10c      	bne.n	8002f94 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2280      	movs	r2, #128	; 0x80
 8002f7e:	03d1      	lsls	r1, r2, #15
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	4a0d      	ldr	r2, [pc, #52]	; (8002fb8 <UART_CheckIdleState+0x8c>)
 8002f84:	9200      	str	r2, [sp, #0]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f000 f818 	bl	8002fbc <UART_WaitOnFlagUntilTimeout>
 8002f8c:	1e03      	subs	r3, r0, #0
 8002f8e:	d001      	beq.n	8002f94 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e00d      	b.n	8002fb0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2220      	movs	r2, #32
 8002f98:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2274      	movs	r2, #116	; 0x74
 8002faa:	2100      	movs	r1, #0
 8002fac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	b004      	add	sp, #16
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	01ffffff 	.word	0x01ffffff

08002fbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b094      	sub	sp, #80	; 0x50
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	603b      	str	r3, [r7, #0]
 8002fc8:	1dfb      	adds	r3, r7, #7
 8002fca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fcc:	e0a3      	b.n	8003116 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	d100      	bne.n	8002fd6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002fd4:	e09f      	b.n	8003116 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd6:	f7fd fde9 	bl	8000bac <HAL_GetTick>
 8002fda:	0002      	movs	r2, r0
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d302      	bcc.n	8002fec <UART_WaitOnFlagUntilTimeout+0x30>
 8002fe6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d13d      	bne.n	8003068 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fec:	f3ef 8310 	mrs	r3, PRIMASK
 8002ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ff4:	647b      	str	r3, [r7, #68]	; 0x44
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffc:	f383 8810 	msr	PRIMASK, r3
}
 8003000:	46c0      	nop			; (mov r8, r8)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	494c      	ldr	r1, [pc, #304]	; (8003140 <UART_WaitOnFlagUntilTimeout+0x184>)
 800300e:	400a      	ands	r2, r1
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003014:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003018:	f383 8810 	msr	PRIMASK, r3
}
 800301c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800301e:	f3ef 8310 	mrs	r3, PRIMASK
 8003022:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003026:	643b      	str	r3, [r7, #64]	; 0x40
 8003028:	2301      	movs	r3, #1
 800302a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800302c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302e:	f383 8810 	msr	PRIMASK, r3
}
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2101      	movs	r1, #1
 8003040:	438a      	bics	r2, r1
 8003042:	609a      	str	r2, [r3, #8]
 8003044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003046:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800304a:	f383 8810 	msr	PRIMASK, r3
}
 800304e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2220      	movs	r2, #32
 8003054:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2220      	movs	r2, #32
 800305a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2274      	movs	r2, #116	; 0x74
 8003060:	2100      	movs	r1, #0
 8003062:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e067      	b.n	8003138 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2204      	movs	r2, #4
 8003070:	4013      	ands	r3, r2
 8003072:	d050      	beq.n	8003116 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	69da      	ldr	r2, [r3, #28]
 800307a:	2380      	movs	r3, #128	; 0x80
 800307c:	011b      	lsls	r3, r3, #4
 800307e:	401a      	ands	r2, r3
 8003080:	2380      	movs	r3, #128	; 0x80
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	429a      	cmp	r2, r3
 8003086:	d146      	bne.n	8003116 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2280      	movs	r2, #128	; 0x80
 800308e:	0112      	lsls	r2, r2, #4
 8003090:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003092:	f3ef 8310 	mrs	r3, PRIMASK
 8003096:	613b      	str	r3, [r7, #16]
  return(result);
 8003098:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800309a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800309c:	2301      	movs	r3, #1
 800309e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f383 8810 	msr	PRIMASK, r3
}
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4923      	ldr	r1, [pc, #140]	; (8003140 <UART_WaitOnFlagUntilTimeout+0x184>)
 80030b4:	400a      	ands	r2, r1
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	f383 8810 	msr	PRIMASK, r3
}
 80030c2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030c4:	f3ef 8310 	mrs	r3, PRIMASK
 80030c8:	61fb      	str	r3, [r7, #28]
  return(result);
 80030ca:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80030ce:	2301      	movs	r3, #1
 80030d0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	f383 8810 	msr	PRIMASK, r3
}
 80030d8:	46c0      	nop			; (mov r8, r8)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2101      	movs	r1, #1
 80030e6:	438a      	bics	r2, r1
 80030e8:	609a      	str	r2, [r3, #8]
 80030ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	f383 8810 	msr	PRIMASK, r3
}
 80030f4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2220      	movs	r2, #32
 80030fa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2220      	movs	r2, #32
 8003100:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2280      	movs	r2, #128	; 0x80
 8003106:	2120      	movs	r1, #32
 8003108:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2274      	movs	r2, #116	; 0x74
 800310e:	2100      	movs	r1, #0
 8003110:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e010      	b.n	8003138 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	4013      	ands	r3, r2
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	425a      	negs	r2, r3
 8003126:	4153      	adcs	r3, r2
 8003128:	b2db      	uxtb	r3, r3
 800312a:	001a      	movs	r2, r3
 800312c:	1dfb      	adds	r3, r7, #7
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	429a      	cmp	r2, r3
 8003132:	d100      	bne.n	8003136 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003134:	e74b      	b.n	8002fce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	0018      	movs	r0, r3
 800313a:	46bd      	mov	sp, r7
 800313c:	b014      	add	sp, #80	; 0x50
 800313e:	bd80      	pop	{r7, pc}
 8003140:	fffffe5f 	.word	0xfffffe5f

08003144 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b08c      	sub	sp, #48	; 0x30
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	1dbb      	adds	r3, r7, #6
 8003150:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	68ba      	ldr	r2, [r7, #8]
 8003156:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	1dba      	adds	r2, r7, #6
 800315c:	2158      	movs	r1, #88	; 0x58
 800315e:	8812      	ldrh	r2, [r2, #0]
 8003160:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	1dba      	adds	r2, r7, #6
 8003166:	215a      	movs	r1, #90	; 0x5a
 8003168:	8812      	ldrh	r2, [r2, #0]
 800316a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	2380      	movs	r3, #128	; 0x80
 8003178:	015b      	lsls	r3, r3, #5
 800317a:	429a      	cmp	r2, r3
 800317c:	d10d      	bne.n	800319a <UART_Start_Receive_IT+0x56>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d104      	bne.n	8003190 <UART_Start_Receive_IT+0x4c>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	225c      	movs	r2, #92	; 0x5c
 800318a:	4943      	ldr	r1, [pc, #268]	; (8003298 <UART_Start_Receive_IT+0x154>)
 800318c:	5299      	strh	r1, [r3, r2]
 800318e:	e02e      	b.n	80031ee <UART_Start_Receive_IT+0xaa>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	225c      	movs	r2, #92	; 0x5c
 8003194:	21ff      	movs	r1, #255	; 0xff
 8003196:	5299      	strh	r1, [r3, r2]
 8003198:	e029      	b.n	80031ee <UART_Start_Receive_IT+0xaa>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10d      	bne.n	80031be <UART_Start_Receive_IT+0x7a>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d104      	bne.n	80031b4 <UART_Start_Receive_IT+0x70>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	225c      	movs	r2, #92	; 0x5c
 80031ae:	21ff      	movs	r1, #255	; 0xff
 80031b0:	5299      	strh	r1, [r3, r2]
 80031b2:	e01c      	b.n	80031ee <UART_Start_Receive_IT+0xaa>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	225c      	movs	r2, #92	; 0x5c
 80031b8:	217f      	movs	r1, #127	; 0x7f
 80031ba:	5299      	strh	r1, [r3, r2]
 80031bc:	e017      	b.n	80031ee <UART_Start_Receive_IT+0xaa>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	2380      	movs	r3, #128	; 0x80
 80031c4:	055b      	lsls	r3, r3, #21
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d10d      	bne.n	80031e6 <UART_Start_Receive_IT+0xa2>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d104      	bne.n	80031dc <UART_Start_Receive_IT+0x98>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	225c      	movs	r2, #92	; 0x5c
 80031d6:	217f      	movs	r1, #127	; 0x7f
 80031d8:	5299      	strh	r1, [r3, r2]
 80031da:	e008      	b.n	80031ee <UART_Start_Receive_IT+0xaa>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	225c      	movs	r2, #92	; 0x5c
 80031e0:	213f      	movs	r1, #63	; 0x3f
 80031e2:	5299      	strh	r1, [r3, r2]
 80031e4:	e003      	b.n	80031ee <UART_Start_Receive_IT+0xaa>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	225c      	movs	r2, #92	; 0x5c
 80031ea:	2100      	movs	r1, #0
 80031ec:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2280      	movs	r2, #128	; 0x80
 80031f2:	2100      	movs	r1, #0
 80031f4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2222      	movs	r2, #34	; 0x22
 80031fa:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003200:	61fb      	str	r3, [r7, #28]
  return(result);
 8003202:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003204:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003206:	2301      	movs	r3, #1
 8003208:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	f383 8810 	msr	PRIMASK, r3
}
 8003210:	46c0      	nop			; (mov r8, r8)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2101      	movs	r1, #1
 800321e:	430a      	orrs	r2, r1
 8003220:	609a      	str	r2, [r3, #8]
 8003222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003224:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	f383 8810 	msr	PRIMASK, r3
}
 800322c:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	2380      	movs	r3, #128	; 0x80
 8003234:	015b      	lsls	r3, r3, #5
 8003236:	429a      	cmp	r2, r3
 8003238:	d107      	bne.n	800324a <UART_Start_Receive_IT+0x106>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d103      	bne.n	800324a <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4a15      	ldr	r2, [pc, #84]	; (800329c <UART_Start_Receive_IT+0x158>)
 8003246:	665a      	str	r2, [r3, #100]	; 0x64
 8003248:	e002      	b.n	8003250 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4a14      	ldr	r2, [pc, #80]	; (80032a0 <UART_Start_Receive_IT+0x15c>)
 800324e:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2274      	movs	r2, #116	; 0x74
 8003254:	2100      	movs	r1, #0
 8003256:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003258:	f3ef 8310 	mrs	r3, PRIMASK
 800325c:	613b      	str	r3, [r7, #16]
  return(result);
 800325e:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003260:	62bb      	str	r3, [r7, #40]	; 0x28
 8003262:	2301      	movs	r3, #1
 8003264:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f383 8810 	msr	PRIMASK, r3
}
 800326c:	46c0      	nop			; (mov r8, r8)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2190      	movs	r1, #144	; 0x90
 800327a:	0049      	lsls	r1, r1, #1
 800327c:	430a      	orrs	r2, r1
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003282:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	f383 8810 	msr	PRIMASK, r3
}
 800328a:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	0018      	movs	r0, r3
 8003290:	46bd      	mov	sp, r7
 8003292:	b00c      	add	sp, #48	; 0x30
 8003294:	bd80      	pop	{r7, pc}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	000001ff 	.word	0x000001ff
 800329c:	08003555 	.word	0x08003555
 80032a0:	080033ed 	.word	0x080033ed

080032a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b08e      	sub	sp, #56	; 0x38
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032ac:	f3ef 8310 	mrs	r3, PRIMASK
 80032b0:	617b      	str	r3, [r7, #20]
  return(result);
 80032b2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032b4:	637b      	str	r3, [r7, #52]	; 0x34
 80032b6:	2301      	movs	r3, #1
 80032b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	f383 8810 	msr	PRIMASK, r3
}
 80032c0:	46c0      	nop			; (mov r8, r8)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4925      	ldr	r1, [pc, #148]	; (8003364 <UART_EndRxTransfer+0xc0>)
 80032ce:	400a      	ands	r2, r1
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	f383 8810 	msr	PRIMASK, r3
}
 80032dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032de:	f3ef 8310 	mrs	r3, PRIMASK
 80032e2:	623b      	str	r3, [r7, #32]
  return(result);
 80032e4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032e6:	633b      	str	r3, [r7, #48]	; 0x30
 80032e8:	2301      	movs	r3, #1
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ee:	f383 8810 	msr	PRIMASK, r3
}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2101      	movs	r1, #1
 8003300:	438a      	bics	r2, r1
 8003302:	609a      	str	r2, [r3, #8]
 8003304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003306:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330a:	f383 8810 	msr	PRIMASK, r3
}
 800330e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003314:	2b01      	cmp	r3, #1
 8003316:	d118      	bne.n	800334a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003318:	f3ef 8310 	mrs	r3, PRIMASK
 800331c:	60bb      	str	r3, [r7, #8]
  return(result);
 800331e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003320:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003322:	2301      	movs	r3, #1
 8003324:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f383 8810 	msr	PRIMASK, r3
}
 800332c:	46c0      	nop			; (mov r8, r8)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2110      	movs	r1, #16
 800333a:	438a      	bics	r2, r1
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003340:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f383 8810 	msr	PRIMASK, r3
}
 8003348:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2220      	movs	r2, #32
 800334e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800335c:	46c0      	nop			; (mov r8, r8)
 800335e:	46bd      	mov	sp, r7
 8003360:	b00e      	add	sp, #56	; 0x38
 8003362:	bd80      	pop	{r7, pc}
 8003364:	fffffedf 	.word	0xfffffedf

08003368 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003374:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	225a      	movs	r2, #90	; 0x5a
 800337a:	2100      	movs	r1, #0
 800337c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2252      	movs	r2, #82	; 0x52
 8003382:	2100      	movs	r1, #0
 8003384:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	0018      	movs	r0, r3
 800338a:	f7ff fabd 	bl	8002908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	46bd      	mov	sp, r7
 8003392:	b004      	add	sp, #16
 8003394:	bd80      	pop	{r7, pc}

08003396 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b086      	sub	sp, #24
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800339e:	f3ef 8310 	mrs	r3, PRIMASK
 80033a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80033a4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	2301      	movs	r3, #1
 80033aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f383 8810 	msr	PRIMASK, r3
}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2140      	movs	r1, #64	; 0x40
 80033c0:	438a      	bics	r2, r1
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	f383 8810 	msr	PRIMASK, r3
}
 80033ce:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2220      	movs	r2, #32
 80033d4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	0018      	movs	r0, r3
 80033e0:	f7ff fa8a 	bl	80028f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033e4:	46c0      	nop			; (mov r8, r8)
 80033e6:	46bd      	mov	sp, r7
 80033e8:	b006      	add	sp, #24
 80033ea:	bd80      	pop	{r7, pc}

080033ec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b090      	sub	sp, #64	; 0x40
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80033f4:	203e      	movs	r0, #62	; 0x3e
 80033f6:	183b      	adds	r3, r7, r0
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	215c      	movs	r1, #92	; 0x5c
 80033fc:	5a52      	ldrh	r2, [r2, r1]
 80033fe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003404:	2b22      	cmp	r3, #34	; 0x22
 8003406:	d000      	beq.n	800340a <UART_RxISR_8BIT+0x1e>
 8003408:	e095      	b.n	8003536 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003410:	213c      	movs	r1, #60	; 0x3c
 8003412:	187b      	adds	r3, r7, r1
 8003414:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003416:	187b      	adds	r3, r7, r1
 8003418:	881b      	ldrh	r3, [r3, #0]
 800341a:	b2da      	uxtb	r2, r3
 800341c:	183b      	adds	r3, r7, r0
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	b2d9      	uxtb	r1, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003426:	400a      	ands	r2, r1
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003430:	1c5a      	adds	r2, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	225a      	movs	r2, #90	; 0x5a
 800343a:	5a9b      	ldrh	r3, [r3, r2]
 800343c:	b29b      	uxth	r3, r3
 800343e:	3b01      	subs	r3, #1
 8003440:	b299      	uxth	r1, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	225a      	movs	r2, #90	; 0x5a
 8003446:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	225a      	movs	r2, #90	; 0x5a
 800344c:	5a9b      	ldrh	r3, [r3, r2]
 800344e:	b29b      	uxth	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	d178      	bne.n	8003546 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003454:	f3ef 8310 	mrs	r3, PRIMASK
 8003458:	61bb      	str	r3, [r7, #24]
  return(result);
 800345a:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800345c:	63bb      	str	r3, [r7, #56]	; 0x38
 800345e:	2301      	movs	r3, #1
 8003460:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	f383 8810 	msr	PRIMASK, r3
}
 8003468:	46c0      	nop			; (mov r8, r8)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4936      	ldr	r1, [pc, #216]	; (8003550 <UART_RxISR_8BIT+0x164>)
 8003476:	400a      	ands	r2, r1
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	f383 8810 	msr	PRIMASK, r3
}
 8003484:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003486:	f3ef 8310 	mrs	r3, PRIMASK
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800348e:	637b      	str	r3, [r7, #52]	; 0x34
 8003490:	2301      	movs	r3, #1
 8003492:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003496:	f383 8810 	msr	PRIMASK, r3
}
 800349a:	46c0      	nop			; (mov r8, r8)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2101      	movs	r1, #1
 80034a8:	438a      	bics	r2, r1
 80034aa:	609a      	str	r2, [r3, #8]
 80034ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b2:	f383 8810 	msr	PRIMASK, r3
}
 80034b6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2220      	movs	r2, #32
 80034bc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d12f      	bne.n	800352c <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034d2:	f3ef 8310 	mrs	r3, PRIMASK
 80034d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80034d8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034da:	633b      	str	r3, [r7, #48]	; 0x30
 80034dc:	2301      	movs	r3, #1
 80034de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	f383 8810 	msr	PRIMASK, r3
}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2110      	movs	r1, #16
 80034f4:	438a      	bics	r2, r1
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f383 8810 	msr	PRIMASK, r3
}
 8003502:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	2210      	movs	r2, #16
 800350c:	4013      	ands	r3, r2
 800350e:	2b10      	cmp	r3, #16
 8003510:	d103      	bne.n	800351a <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2210      	movs	r2, #16
 8003518:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2258      	movs	r2, #88	; 0x58
 800351e:	5a9a      	ldrh	r2, [r3, r2]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	0011      	movs	r1, r2
 8003524:	0018      	movs	r0, r3
 8003526:	f7ff f9f7 	bl	8002918 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800352a:	e00c      	b.n	8003546 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	0018      	movs	r0, r3
 8003530:	f7fc fff8 	bl	8000524 <HAL_UART_RxCpltCallback>
}
 8003534:	e007      	b.n	8003546 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	699a      	ldr	r2, [r3, #24]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2108      	movs	r1, #8
 8003542:	430a      	orrs	r2, r1
 8003544:	619a      	str	r2, [r3, #24]
}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	46bd      	mov	sp, r7
 800354a:	b010      	add	sp, #64	; 0x40
 800354c:	bd80      	pop	{r7, pc}
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	fffffedf 	.word	0xfffffedf

08003554 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b090      	sub	sp, #64	; 0x40
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800355c:	203e      	movs	r0, #62	; 0x3e
 800355e:	183b      	adds	r3, r7, r0
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	215c      	movs	r1, #92	; 0x5c
 8003564:	5a52      	ldrh	r2, [r2, r1]
 8003566:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800356c:	2b22      	cmp	r3, #34	; 0x22
 800356e:	d000      	beq.n	8003572 <UART_RxISR_16BIT+0x1e>
 8003570:	e095      	b.n	800369e <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003578:	213c      	movs	r1, #60	; 0x3c
 800357a:	187b      	adds	r3, r7, r1
 800357c:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003582:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8003584:	187b      	adds	r3, r7, r1
 8003586:	183a      	adds	r2, r7, r0
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	8812      	ldrh	r2, [r2, #0]
 800358c:	4013      	ands	r3, r2
 800358e:	b29a      	uxth	r2, r3
 8003590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003592:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003598:	1c9a      	adds	r2, r3, #2
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	225a      	movs	r2, #90	; 0x5a
 80035a2:	5a9b      	ldrh	r3, [r3, r2]
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	3b01      	subs	r3, #1
 80035a8:	b299      	uxth	r1, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	225a      	movs	r2, #90	; 0x5a
 80035ae:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	225a      	movs	r2, #90	; 0x5a
 80035b4:	5a9b      	ldrh	r3, [r3, r2]
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d178      	bne.n	80036ae <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035bc:	f3ef 8310 	mrs	r3, PRIMASK
 80035c0:	617b      	str	r3, [r7, #20]
  return(result);
 80035c2:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035c4:	637b      	str	r3, [r7, #52]	; 0x34
 80035c6:	2301      	movs	r3, #1
 80035c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	f383 8810 	msr	PRIMASK, r3
}
 80035d0:	46c0      	nop			; (mov r8, r8)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4936      	ldr	r1, [pc, #216]	; (80036b8 <UART_RxISR_16BIT+0x164>)
 80035de:	400a      	ands	r2, r1
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	f383 8810 	msr	PRIMASK, r3
}
 80035ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035ee:	f3ef 8310 	mrs	r3, PRIMASK
 80035f2:	623b      	str	r3, [r7, #32]
  return(result);
 80035f4:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035f6:	633b      	str	r3, [r7, #48]	; 0x30
 80035f8:	2301      	movs	r3, #1
 80035fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	f383 8810 	msr	PRIMASK, r3
}
 8003602:	46c0      	nop			; (mov r8, r8)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2101      	movs	r1, #1
 8003610:	438a      	bics	r2, r1
 8003612:	609a      	str	r2, [r3, #8]
 8003614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003616:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361a:	f383 8810 	msr	PRIMASK, r3
}
 800361e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2220      	movs	r2, #32
 8003624:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003630:	2b01      	cmp	r3, #1
 8003632:	d12f      	bne.n	8003694 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800363a:	f3ef 8310 	mrs	r3, PRIMASK
 800363e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003640:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003642:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003644:	2301      	movs	r3, #1
 8003646:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f383 8810 	msr	PRIMASK, r3
}
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2110      	movs	r1, #16
 800365c:	438a      	bics	r2, r1
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003662:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	f383 8810 	msr	PRIMASK, r3
}
 800366a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	2210      	movs	r2, #16
 8003674:	4013      	ands	r3, r2
 8003676:	2b10      	cmp	r3, #16
 8003678:	d103      	bne.n	8003682 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2210      	movs	r2, #16
 8003680:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2258      	movs	r2, #88	; 0x58
 8003686:	5a9a      	ldrh	r2, [r3, r2]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	0011      	movs	r1, r2
 800368c:	0018      	movs	r0, r3
 800368e:	f7ff f943 	bl	8002918 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003692:	e00c      	b.n	80036ae <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	0018      	movs	r0, r3
 8003698:	f7fc ff44 	bl	8000524 <HAL_UART_RxCpltCallback>
}
 800369c:	e007      	b.n	80036ae <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	699a      	ldr	r2, [r3, #24]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2108      	movs	r1, #8
 80036aa:	430a      	orrs	r2, r1
 80036ac:	619a      	str	r2, [r3, #24]
}
 80036ae:	46c0      	nop			; (mov r8, r8)
 80036b0:	46bd      	mov	sp, r7
 80036b2:	b010      	add	sp, #64	; 0x40
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	46c0      	nop			; (mov r8, r8)
 80036b8:	fffffedf 	.word	0xfffffedf

080036bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80036c4:	46c0      	nop			; (mov r8, r8)
 80036c6:	46bd      	mov	sp, r7
 80036c8:	b002      	add	sp, #8
 80036ca:	bd80      	pop	{r7, pc}

080036cc <__libc_init_array>:
 80036cc:	b570      	push	{r4, r5, r6, lr}
 80036ce:	2600      	movs	r6, #0
 80036d0:	4d0c      	ldr	r5, [pc, #48]	; (8003704 <__libc_init_array+0x38>)
 80036d2:	4c0d      	ldr	r4, [pc, #52]	; (8003708 <__libc_init_array+0x3c>)
 80036d4:	1b64      	subs	r4, r4, r5
 80036d6:	10a4      	asrs	r4, r4, #2
 80036d8:	42a6      	cmp	r6, r4
 80036da:	d109      	bne.n	80036f0 <__libc_init_array+0x24>
 80036dc:	2600      	movs	r6, #0
 80036de:	f000 f821 	bl	8003724 <_init>
 80036e2:	4d0a      	ldr	r5, [pc, #40]	; (800370c <__libc_init_array+0x40>)
 80036e4:	4c0a      	ldr	r4, [pc, #40]	; (8003710 <__libc_init_array+0x44>)
 80036e6:	1b64      	subs	r4, r4, r5
 80036e8:	10a4      	asrs	r4, r4, #2
 80036ea:	42a6      	cmp	r6, r4
 80036ec:	d105      	bne.n	80036fa <__libc_init_array+0x2e>
 80036ee:	bd70      	pop	{r4, r5, r6, pc}
 80036f0:	00b3      	lsls	r3, r6, #2
 80036f2:	58eb      	ldr	r3, [r5, r3]
 80036f4:	4798      	blx	r3
 80036f6:	3601      	adds	r6, #1
 80036f8:	e7ee      	b.n	80036d8 <__libc_init_array+0xc>
 80036fa:	00b3      	lsls	r3, r6, #2
 80036fc:	58eb      	ldr	r3, [r5, r3]
 80036fe:	4798      	blx	r3
 8003700:	3601      	adds	r6, #1
 8003702:	e7f2      	b.n	80036ea <__libc_init_array+0x1e>
 8003704:	080037b0 	.word	0x080037b0
 8003708:	080037b0 	.word	0x080037b0
 800370c:	080037b0 	.word	0x080037b0
 8003710:	080037b4 	.word	0x080037b4

08003714 <memset>:
 8003714:	0003      	movs	r3, r0
 8003716:	1882      	adds	r2, r0, r2
 8003718:	4293      	cmp	r3, r2
 800371a:	d100      	bne.n	800371e <memset+0xa>
 800371c:	4770      	bx	lr
 800371e:	7019      	strb	r1, [r3, #0]
 8003720:	3301      	adds	r3, #1
 8003722:	e7f9      	b.n	8003718 <memset+0x4>

08003724 <_init>:
 8003724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003726:	46c0      	nop			; (mov r8, r8)
 8003728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800372a:	bc08      	pop	{r3}
 800372c:	469e      	mov	lr, r3
 800372e:	4770      	bx	lr

08003730 <_fini>:
 8003730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003736:	bc08      	pop	{r3}
 8003738:	469e      	mov	lr, r3
 800373a:	4770      	bx	lr
