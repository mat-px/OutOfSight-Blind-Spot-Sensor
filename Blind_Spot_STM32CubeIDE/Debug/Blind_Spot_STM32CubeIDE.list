
Blind_Spot_STM32CubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003860  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003920  08003920  00013920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039a4  080039a4  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  080039a4  080039a4  000139a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039ac  080039ac  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039ac  080039ac  000139ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039b0  080039b0  000139b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080039b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000024  080039d8  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  080039d8  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b6cb  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bb9  00000000  00000000  0002b717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000928  00000000  00000000  0002d2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000880  00000000  00000000  0002dbf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011097  00000000  00000000  0002e478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c058  00000000  00000000  0003f50f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00064860  00000000  00000000  0004b567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000afdc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000202c  00000000  00000000  000afe18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000024 	.word	0x20000024
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003908 	.word	0x08003908

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000028 	.word	0x20000028
 8000104:	08003908 	.word	0x08003908

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f834 	bl	80002cc <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46ce      	mov	lr, r9
 8000274:	4647      	mov	r7, r8
 8000276:	b580      	push	{r7, lr}
 8000278:	0007      	movs	r7, r0
 800027a:	4699      	mov	r9, r3
 800027c:	0c3b      	lsrs	r3, r7, #16
 800027e:	469c      	mov	ip, r3
 8000280:	0413      	lsls	r3, r2, #16
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0400      	lsls	r0, r0, #16
 800028c:	0c14      	lsrs	r4, r2, #16
 800028e:	0c00      	lsrs	r0, r0, #16
 8000290:	4345      	muls	r5, r0
 8000292:	434b      	muls	r3, r1
 8000294:	4360      	muls	r0, r4
 8000296:	4361      	muls	r1, r4
 8000298:	18c0      	adds	r0, r0, r3
 800029a:	0c2c      	lsrs	r4, r5, #16
 800029c:	1820      	adds	r0, r4, r0
 800029e:	468c      	mov	ip, r1
 80002a0:	4283      	cmp	r3, r0
 80002a2:	d903      	bls.n	80002ac <__aeabi_lmul+0x3c>
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	025b      	lsls	r3, r3, #9
 80002a8:	4698      	mov	r8, r3
 80002aa:	44c4      	add	ip, r8
 80002ac:	4649      	mov	r1, r9
 80002ae:	4379      	muls	r1, r7
 80002b0:	4372      	muls	r2, r6
 80002b2:	0c03      	lsrs	r3, r0, #16
 80002b4:	4463      	add	r3, ip
 80002b6:	042d      	lsls	r5, r5, #16
 80002b8:	0c2d      	lsrs	r5, r5, #16
 80002ba:	18c9      	adds	r1, r1, r3
 80002bc:	0400      	lsls	r0, r0, #16
 80002be:	1940      	adds	r0, r0, r5
 80002c0:	1889      	adds	r1, r1, r2
 80002c2:	bcc0      	pop	{r6, r7}
 80002c4:	46b9      	mov	r9, r7
 80002c6:	46b0      	mov	r8, r6
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)

080002cc <__udivmoddi4>:
 80002cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ce:	4657      	mov	r7, sl
 80002d0:	464e      	mov	r6, r9
 80002d2:	4645      	mov	r5, r8
 80002d4:	46de      	mov	lr, fp
 80002d6:	b5e0      	push	{r5, r6, r7, lr}
 80002d8:	0004      	movs	r4, r0
 80002da:	000d      	movs	r5, r1
 80002dc:	4692      	mov	sl, r2
 80002de:	4699      	mov	r9, r3
 80002e0:	b083      	sub	sp, #12
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d830      	bhi.n	8000348 <__udivmoddi4+0x7c>
 80002e6:	d02d      	beq.n	8000344 <__udivmoddi4+0x78>
 80002e8:	4649      	mov	r1, r9
 80002ea:	4650      	mov	r0, sl
 80002ec:	f000 f8ba 	bl	8000464 <__clzdi2>
 80002f0:	0029      	movs	r1, r5
 80002f2:	0006      	movs	r6, r0
 80002f4:	0020      	movs	r0, r4
 80002f6:	f000 f8b5 	bl	8000464 <__clzdi2>
 80002fa:	1a33      	subs	r3, r6, r0
 80002fc:	4698      	mov	r8, r3
 80002fe:	3b20      	subs	r3, #32
 8000300:	469b      	mov	fp, r3
 8000302:	d433      	bmi.n	800036c <__udivmoddi4+0xa0>
 8000304:	465a      	mov	r2, fp
 8000306:	4653      	mov	r3, sl
 8000308:	4093      	lsls	r3, r2
 800030a:	4642      	mov	r2, r8
 800030c:	001f      	movs	r7, r3
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	001e      	movs	r6, r3
 8000314:	42af      	cmp	r7, r5
 8000316:	d83a      	bhi.n	800038e <__udivmoddi4+0xc2>
 8000318:	42af      	cmp	r7, r5
 800031a:	d100      	bne.n	800031e <__udivmoddi4+0x52>
 800031c:	e078      	b.n	8000410 <__udivmoddi4+0x144>
 800031e:	465b      	mov	r3, fp
 8000320:	1ba4      	subs	r4, r4, r6
 8000322:	41bd      	sbcs	r5, r7
 8000324:	2b00      	cmp	r3, #0
 8000326:	da00      	bge.n	800032a <__udivmoddi4+0x5e>
 8000328:	e075      	b.n	8000416 <__udivmoddi4+0x14a>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	465a      	mov	r2, fp
 8000336:	4093      	lsls	r3, r2
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	4642      	mov	r2, r8
 800033e:	4093      	lsls	r3, r2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	e028      	b.n	8000396 <__udivmoddi4+0xca>
 8000344:	4282      	cmp	r2, r0
 8000346:	d9cf      	bls.n	80002e8 <__udivmoddi4+0x1c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <__udivmoddi4+0x8e>
 8000356:	601c      	str	r4, [r3, #0]
 8000358:	605d      	str	r5, [r3, #4]
 800035a:	9800      	ldr	r0, [sp, #0]
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	b003      	add	sp, #12
 8000360:	bcf0      	pop	{r4, r5, r6, r7}
 8000362:	46bb      	mov	fp, r7
 8000364:	46b2      	mov	sl, r6
 8000366:	46a9      	mov	r9, r5
 8000368:	46a0      	mov	r8, r4
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	4642      	mov	r2, r8
 800036e:	2320      	movs	r3, #32
 8000370:	1a9b      	subs	r3, r3, r2
 8000372:	4652      	mov	r2, sl
 8000374:	40da      	lsrs	r2, r3
 8000376:	4641      	mov	r1, r8
 8000378:	0013      	movs	r3, r2
 800037a:	464a      	mov	r2, r9
 800037c:	408a      	lsls	r2, r1
 800037e:	0017      	movs	r7, r2
 8000380:	4642      	mov	r2, r8
 8000382:	431f      	orrs	r7, r3
 8000384:	4653      	mov	r3, sl
 8000386:	4093      	lsls	r3, r2
 8000388:	001e      	movs	r6, r3
 800038a:	42af      	cmp	r7, r5
 800038c:	d9c4      	bls.n	8000318 <__udivmoddi4+0x4c>
 800038e:	2200      	movs	r2, #0
 8000390:	2300      	movs	r3, #0
 8000392:	9200      	str	r2, [sp, #0]
 8000394:	9301      	str	r3, [sp, #4]
 8000396:	4643      	mov	r3, r8
 8000398:	2b00      	cmp	r3, #0
 800039a:	d0d9      	beq.n	8000350 <__udivmoddi4+0x84>
 800039c:	07fb      	lsls	r3, r7, #31
 800039e:	0872      	lsrs	r2, r6, #1
 80003a0:	431a      	orrs	r2, r3
 80003a2:	4646      	mov	r6, r8
 80003a4:	087b      	lsrs	r3, r7, #1
 80003a6:	e00e      	b.n	80003c6 <__udivmoddi4+0xfa>
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	d101      	bne.n	80003b0 <__udivmoddi4+0xe4>
 80003ac:	42a2      	cmp	r2, r4
 80003ae:	d80c      	bhi.n	80003ca <__udivmoddi4+0xfe>
 80003b0:	1aa4      	subs	r4, r4, r2
 80003b2:	419d      	sbcs	r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	1924      	adds	r4, r4, r4
 80003b8:	416d      	adcs	r5, r5
 80003ba:	2100      	movs	r1, #0
 80003bc:	3e01      	subs	r6, #1
 80003be:	1824      	adds	r4, r4, r0
 80003c0:	414d      	adcs	r5, r1
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d006      	beq.n	80003d4 <__udivmoddi4+0x108>
 80003c6:	42ab      	cmp	r3, r5
 80003c8:	d9ee      	bls.n	80003a8 <__udivmoddi4+0xdc>
 80003ca:	3e01      	subs	r6, #1
 80003cc:	1924      	adds	r4, r4, r4
 80003ce:	416d      	adcs	r5, r5
 80003d0:	2e00      	cmp	r6, #0
 80003d2:	d1f8      	bne.n	80003c6 <__udivmoddi4+0xfa>
 80003d4:	9800      	ldr	r0, [sp, #0]
 80003d6:	9901      	ldr	r1, [sp, #4]
 80003d8:	465b      	mov	r3, fp
 80003da:	1900      	adds	r0, r0, r4
 80003dc:	4169      	adcs	r1, r5
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db24      	blt.n	800042c <__udivmoddi4+0x160>
 80003e2:	002b      	movs	r3, r5
 80003e4:	465a      	mov	r2, fp
 80003e6:	4644      	mov	r4, r8
 80003e8:	40d3      	lsrs	r3, r2
 80003ea:	002a      	movs	r2, r5
 80003ec:	40e2      	lsrs	r2, r4
 80003ee:	001c      	movs	r4, r3
 80003f0:	465b      	mov	r3, fp
 80003f2:	0015      	movs	r5, r2
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	db2a      	blt.n	800044e <__udivmoddi4+0x182>
 80003f8:	0026      	movs	r6, r4
 80003fa:	409e      	lsls	r6, r3
 80003fc:	0033      	movs	r3, r6
 80003fe:	0026      	movs	r6, r4
 8000400:	4647      	mov	r7, r8
 8000402:	40be      	lsls	r6, r7
 8000404:	0032      	movs	r2, r6
 8000406:	1a80      	subs	r0, r0, r2
 8000408:	4199      	sbcs	r1, r3
 800040a:	9000      	str	r0, [sp, #0]
 800040c:	9101      	str	r1, [sp, #4]
 800040e:	e79f      	b.n	8000350 <__udivmoddi4+0x84>
 8000410:	42a3      	cmp	r3, r4
 8000412:	d8bc      	bhi.n	800038e <__udivmoddi4+0xc2>
 8000414:	e783      	b.n	800031e <__udivmoddi4+0x52>
 8000416:	4642      	mov	r2, r8
 8000418:	2320      	movs	r3, #32
 800041a:	2100      	movs	r1, #0
 800041c:	1a9b      	subs	r3, r3, r2
 800041e:	2200      	movs	r2, #0
 8000420:	9100      	str	r1, [sp, #0]
 8000422:	9201      	str	r2, [sp, #4]
 8000424:	2201      	movs	r2, #1
 8000426:	40da      	lsrs	r2, r3
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	e786      	b.n	800033a <__udivmoddi4+0x6e>
 800042c:	4642      	mov	r2, r8
 800042e:	2320      	movs	r3, #32
 8000430:	1a9b      	subs	r3, r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	4646      	mov	r6, r8
 8000436:	409a      	lsls	r2, r3
 8000438:	0023      	movs	r3, r4
 800043a:	40f3      	lsrs	r3, r6
 800043c:	4644      	mov	r4, r8
 800043e:	4313      	orrs	r3, r2
 8000440:	002a      	movs	r2, r5
 8000442:	40e2      	lsrs	r2, r4
 8000444:	001c      	movs	r4, r3
 8000446:	465b      	mov	r3, fp
 8000448:	0015      	movs	r5, r2
 800044a:	2b00      	cmp	r3, #0
 800044c:	dad4      	bge.n	80003f8 <__udivmoddi4+0x12c>
 800044e:	4642      	mov	r2, r8
 8000450:	002f      	movs	r7, r5
 8000452:	2320      	movs	r3, #32
 8000454:	0026      	movs	r6, r4
 8000456:	4097      	lsls	r7, r2
 8000458:	1a9b      	subs	r3, r3, r2
 800045a:	40de      	lsrs	r6, r3
 800045c:	003b      	movs	r3, r7
 800045e:	4333      	orrs	r3, r6
 8000460:	e7cd      	b.n	80003fe <__udivmoddi4+0x132>
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__clzdi2>:
 8000464:	b510      	push	{r4, lr}
 8000466:	2900      	cmp	r1, #0
 8000468:	d103      	bne.n	8000472 <__clzdi2+0xe>
 800046a:	f000 f807 	bl	800047c <__clzsi2>
 800046e:	3020      	adds	r0, #32
 8000470:	e002      	b.n	8000478 <__clzdi2+0x14>
 8000472:	0008      	movs	r0, r1
 8000474:	f000 f802 	bl	800047c <__clzsi2>
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__clzsi2>:
 800047c:	211c      	movs	r1, #28
 800047e:	2301      	movs	r3, #1
 8000480:	041b      	lsls	r3, r3, #16
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0xe>
 8000486:	0c00      	lsrs	r0, r0, #16
 8000488:	3910      	subs	r1, #16
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	4298      	cmp	r0, r3
 800048e:	d301      	bcc.n	8000494 <__clzsi2+0x18>
 8000490:	0a00      	lsrs	r0, r0, #8
 8000492:	3908      	subs	r1, #8
 8000494:	091b      	lsrs	r3, r3, #4
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0x22>
 800049a:	0900      	lsrs	r0, r0, #4
 800049c:	3904      	subs	r1, #4
 800049e:	a202      	add	r2, pc, #8	; (adr r2, 80004a8 <__clzsi2+0x2c>)
 80004a0:	5c10      	ldrb	r0, [r2, r0]
 80004a2:	1840      	adds	r0, r0, r1
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	02020304 	.word	0x02020304
 80004ac:	01010101 	.word	0x01010101
	...

080004b8 <main>:
void receive(uint8_t* data, uint16_t len);
void lidar_init();
void hex_to_char(uint8_t *hex_array, uint8_t hex_len, char *char_array);

int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  HAL_Init();
 80004bc:	f000 fc0a 	bl	8000cd4 <HAL_Init>
  SystemClock_Config();
 80004c0:	f000 f958 	bl	8000774 <SystemClock_Config>
  MX_GPIO_Init();
 80004c4:	f000 fa2a 	bl	800091c <MX_GPIO_Init>
  MX_SPI1_Init();
 80004c8:	f000 f9c0 	bl	800084c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80004cc:	f000 f9f6 	bl	80008bc <MX_USART2_UART_Init>

  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80004d0:	2200      	movs	r2, #0
 80004d2:	2100      	movs	r1, #0
 80004d4:	201c      	movs	r0, #28
 80004d6:	f000 fd3d 	bl	8000f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80004da:	201c      	movs	r0, #28
 80004dc:	f000 fd4f 	bl	8000f7e <HAL_NVIC_EnableIRQ>

  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80004e0:	4b11      	ldr	r3, [pc, #68]	; (8000528 <main+0x70>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	4b10      	ldr	r3, [pc, #64]	; (8000528 <main+0x70>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	2120      	movs	r1, #32
 80004ec:	430a      	orrs	r2, r1
 80004ee:	601a      	str	r2, [r3, #0]

  lidar_init();
 80004f0:	f000 f892 	bl	8000618 <lidar_init>
//	  char msg1[] = "\n\rProof of Emtry rx_buffer: ";
//	  HAL_UART_Transmit(&huart2, (uint8_t*)msg1, strlen(msg1), HAL_MAX_DELAY);
//	  hex_to_char(rx_buffer, sizeof(rx_buffer), char_array);
//	  HAL_UART_Transmit(&huart2, (uint8_t*)char_array, strlen(char_array), HAL_MAX_DELAY);

	  if(transmit == 0){
 80004f4:	4b0d      	ldr	r3, [pc, #52]	; (800052c <main+0x74>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d10e      	bne.n	800051c <main+0x64>
		  HAL_UART_Receive_IT(&huart2, &rx_buffer[rx_buffer_index], 1);
 80004fe:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <main+0x78>)
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <main+0x7c>)
 8000504:	18d1      	adds	r1, r2, r3
 8000506:	4b08      	ldr	r3, [pc, #32]	; (8000528 <main+0x70>)
 8000508:	2201      	movs	r2, #1
 800050a:	0018      	movs	r0, r3
 800050c:	f001 ffac 	bl	8002468 <HAL_UART_Receive_IT>
		  HAL_UART_Transmit(&huart2, sampleTriggerCMD, sizeof(sampleTriggerCMD), 5000);
 8000510:	4b09      	ldr	r3, [pc, #36]	; (8000538 <main+0x80>)
 8000512:	490a      	ldr	r1, [pc, #40]	; (800053c <main+0x84>)
 8000514:	4804      	ldr	r0, [pc, #16]	; (8000528 <main+0x70>)
 8000516:	2204      	movs	r2, #4
 8000518:	f001 fefe 	bl	8002318 <HAL_UART_Transmit>
//  			  HAL_Delay(1000);
//  			  HAL_GPIO_WritePin(LED_OUT_GPIO_Port, LED_OUT_Pin, GPIO_PIN_RESET);
//  			__HAL_UART_CLEAR_FLAG(&huart2, UART_FLAG_RXNE);
//  	  }

  	  HAL_Delay(1000);
 800051c:	23fa      	movs	r3, #250	; 0xfa
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	0018      	movs	r0, r3
 8000522:	f000 fc47 	bl	8000db4 <HAL_Delay>
	  if(transmit == 0){
 8000526:	e7e5      	b.n	80004f4 <main+0x3c>
 8000528:	20000098 	.word	0x20000098
 800052c:	20000135 	.word	0x20000135
 8000530:	2000011c 	.word	0x2000011c
 8000534:	20000120 	.word	0x20000120
 8000538:	00001388 	.word	0x00001388
 800053c:	2000000c 	.word	0x2000000c

08000540 <hex_to_char>:
//	  HAL_GPIO_WritePin(LED_OUT_GPIO_Port, LED_OUT_Pin, GPIO_PIN_RESET);
  }
}

void hex_to_char(uint8_t *hex_array, uint8_t hex_len, char *char_array)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af00      	add	r7, sp, #0
 8000546:	60f8      	str	r0, [r7, #12]
 8000548:	607a      	str	r2, [r7, #4]
 800054a:	230b      	movs	r3, #11
 800054c:	18fb      	adds	r3, r7, r3
 800054e:	1c0a      	adds	r2, r1, #0
 8000550:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < hex_len; i++)
 8000552:	2300      	movs	r3, #0
 8000554:	617b      	str	r3, [r7, #20]
 8000556:	e04d      	b.n	80005f4 <hex_to_char+0xb4>
    {
        char_array[2 * i]     = hex_array[i] >> 4;
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	68fa      	ldr	r2, [r7, #12]
 800055c:	18d3      	adds	r3, r2, r3
 800055e:	781a      	ldrb	r2, [r3, #0]
 8000560:	697b      	ldr	r3, [r7, #20]
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	0019      	movs	r1, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	185b      	adds	r3, r3, r1
 800056a:	0912      	lsrs	r2, r2, #4
 800056c:	b2d2      	uxtb	r2, r2
 800056e:	701a      	strb	r2, [r3, #0]
        char_array[2 * i + 1] = hex_array[i] & 0x0f;
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	68fa      	ldr	r2, [r7, #12]
 8000574:	18d3      	adds	r3, r2, r3
 8000576:	781a      	ldrb	r2, [r3, #0]
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	005b      	lsls	r3, r3, #1
 800057c:	3301      	adds	r3, #1
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	18cb      	adds	r3, r1, r3
 8000582:	210f      	movs	r1, #15
 8000584:	400a      	ands	r2, r1
 8000586:	b2d2      	uxtb	r2, r2
 8000588:	701a      	strb	r2, [r3, #0]
        char_array[2 * i]     += char_array[2 * i] > 9 ? 'A' - 10 : '0';
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	001a      	movs	r2, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	189b      	adds	r3, r3, r2
 8000594:	7819      	ldrb	r1, [r3, #0]
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	001a      	movs	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	189b      	adds	r3, r3, r2
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	2b09      	cmp	r3, #9
 80005a4:	d901      	bls.n	80005aa <hex_to_char+0x6a>
 80005a6:	2337      	movs	r3, #55	; 0x37
 80005a8:	e000      	b.n	80005ac <hex_to_char+0x6c>
 80005aa:	2330      	movs	r3, #48	; 0x30
 80005ac:	697a      	ldr	r2, [r7, #20]
 80005ae:	0052      	lsls	r2, r2, #1
 80005b0:	0010      	movs	r0, r2
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	1812      	adds	r2, r2, r0
 80005b6:	185b      	adds	r3, r3, r1
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	7013      	strb	r3, [r2, #0]
        char_array[2 * i + 1] += char_array[2 * i + 1] > 9 ? 'A' - 10 : '0';
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	3301      	adds	r3, #1
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	18d3      	adds	r3, r2, r3
 80005c6:	7819      	ldrb	r1, [r3, #0]
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	3301      	adds	r3, #1
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	18d3      	adds	r3, r2, r3
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b09      	cmp	r3, #9
 80005d6:	d901      	bls.n	80005dc <hex_to_char+0x9c>
 80005d8:	2337      	movs	r3, #55	; 0x37
 80005da:	e000      	b.n	80005de <hex_to_char+0x9e>
 80005dc:	2330      	movs	r3, #48	; 0x30
 80005de:	697a      	ldr	r2, [r7, #20]
 80005e0:	0052      	lsls	r2, r2, #1
 80005e2:	3201      	adds	r2, #1
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	1882      	adds	r2, r0, r2
 80005e8:	185b      	adds	r3, r3, r1
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	7013      	strb	r3, [r2, #0]
    for (int i = 0; i < hex_len; i++)
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	3301      	adds	r3, #1
 80005f2:	617b      	str	r3, [r7, #20]
 80005f4:	210b      	movs	r1, #11
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	697a      	ldr	r2, [r7, #20]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	dbab      	blt.n	8000558 <hex_to_char+0x18>
    }
    char_array[2 * hex_len] = '\0';
 8000600:	187b      	adds	r3, r7, r1
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	001a      	movs	r2, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	189b      	adds	r3, r3, r2
 800060c:	2200      	movs	r2, #0
 800060e:	701a      	strb	r2, [r3, #0]
}
 8000610:	46c0      	nop			; (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	b006      	add	sp, #24
 8000616:	bd80      	pop	{r7, pc}

08000618 <lidar_init>:


void lidar_init(){
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	//Send soft reset command
	HAL_UART_Transmit(&huart2, softResetCMD, sizeof(softResetCMD), 100);
 800061c:	4911      	ldr	r1, [pc, #68]	; (8000664 <lidar_init+0x4c>)
 800061e:	4812      	ldr	r0, [pc, #72]	; (8000668 <lidar_init+0x50>)
 8000620:	2364      	movs	r3, #100	; 0x64
 8000622:	2204      	movs	r2, #4
 8000624:	f001 fe78 	bl	8002318 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000628:	23fa      	movs	r3, #250	; 0xfa
 800062a:	005b      	lsls	r3, r3, #1
 800062c:	0018      	movs	r0, r3
 800062e:	f000 fbc1 	bl	8000db4 <HAL_Delay>

	//Send sample at 0Hz command
	HAL_UART_Transmit(&huart2, sampleFreq0HzCMD, sizeof(sampleFreq0HzCMD), 100);
 8000632:	490e      	ldr	r1, [pc, #56]	; (800066c <lidar_init+0x54>)
 8000634:	480c      	ldr	r0, [pc, #48]	; (8000668 <lidar_init+0x50>)
 8000636:	2364      	movs	r3, #100	; 0x64
 8000638:	2206      	movs	r2, #6
 800063a:	f001 fe6d 	bl	8002318 <HAL_UART_Transmit>
	HAL_Delay(500);
 800063e:	23fa      	movs	r3, #250	; 0xfa
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	0018      	movs	r0, r3
 8000644:	f000 fbb6 	bl	8000db4 <HAL_Delay>

	//Send output format 9-byte/cm
	HAL_UART_Transmit(&huart2, outForm9B_cmCMD, sizeof(outForm9B_cmCMD), 100);
 8000648:	4909      	ldr	r1, [pc, #36]	; (8000670 <lidar_init+0x58>)
 800064a:	4807      	ldr	r0, [pc, #28]	; (8000668 <lidar_init+0x50>)
 800064c:	2364      	movs	r3, #100	; 0x64
 800064e:	2205      	movs	r2, #5
 8000650:	f001 fe62 	bl	8002318 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000654:	23fa      	movs	r3, #250	; 0xfa
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	0018      	movs	r0, r3
 800065a:	f000 fbab 	bl	8000db4 <HAL_Delay>
}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000000 	.word	0x20000000
 8000668:	20000098 	.word	0x20000098
 800066c:	20000004 	.word	0x20000004
 8000670:	20000010 	.word	0x20000010

08000674 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000674:	b5b0      	push	{r4, r5, r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	if(rx_buffer_index < RX_BUFFER_SIZE - 1) {
 800067c:	4b23      	ldr	r3, [pc, #140]	; (800070c <HAL_UART_RxCpltCallback+0x98>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b07      	cmp	r3, #7
 8000682:	d817      	bhi.n	80006b4 <HAL_UART_RxCpltCallback+0x40>
		transmit = 1;
 8000684:	4b22      	ldr	r3, [pc, #136]	; (8000710 <HAL_UART_RxCpltCallback+0x9c>)
 8000686:	2201      	movs	r2, #1
 8000688:	701a      	strb	r2, [r3, #0]
		rx_buffer[rx_buffer_index++] = huart->Instance->RDR;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000690:	4b1e      	ldr	r3, [pc, #120]	; (800070c <HAL_UART_RxCpltCallback+0x98>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	1c59      	adds	r1, r3, #1
 8000696:	4a1d      	ldr	r2, [pc, #116]	; (800070c <HAL_UART_RxCpltCallback+0x98>)
 8000698:	6011      	str	r1, [r2, #0]
 800069a:	b2c1      	uxtb	r1, r0
 800069c:	4a1d      	ldr	r2, [pc, #116]	; (8000714 <HAL_UART_RxCpltCallback+0xa0>)
 800069e:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Receive_IT(&huart2, &rx_buffer[rx_buffer_index], 1);
 80006a0:	4b1a      	ldr	r3, [pc, #104]	; (800070c <HAL_UART_RxCpltCallback+0x98>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <HAL_UART_RxCpltCallback+0xa0>)
 80006a6:	18d1      	adds	r1, r2, r3
 80006a8:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <HAL_UART_RxCpltCallback+0xa4>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	0018      	movs	r0, r3
 80006ae:	f001 fedb 	bl	8002468 <HAL_UART_Receive_IT>
		hex_to_char(rx_buffer, RX_BUFFER_SIZE, char_array);
		HAL_UART_Transmit(&huart2, (uint8_t*)char_array, strlen(char_array), 100);
		transmit = 0;
	}

}
 80006b2:	e026      	b.n	8000702 <HAL_UART_RxCpltCallback+0x8e>
		char msg[] = "\n\rReceived: ";
 80006b4:	2408      	movs	r4, #8
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	4a18      	ldr	r2, [pc, #96]	; (800071c <HAL_UART_RxCpltCallback+0xa8>)
 80006ba:	ca23      	ldmia	r2!, {r0, r1, r5}
 80006bc:	c323      	stmia	r3!, {r0, r1, r5}
 80006be:	7812      	ldrb	r2, [r2, #0]
 80006c0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	0018      	movs	r0, r3
 80006c6:	f7ff fd1f 	bl	8000108 <strlen>
 80006ca:	0003      	movs	r3, r0
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	2301      	movs	r3, #1
 80006d0:	425b      	negs	r3, r3
 80006d2:	1939      	adds	r1, r7, r4
 80006d4:	4810      	ldr	r0, [pc, #64]	; (8000718 <HAL_UART_RxCpltCallback+0xa4>)
 80006d6:	f001 fe1f 	bl	8002318 <HAL_UART_Transmit>
		hex_to_char(rx_buffer, RX_BUFFER_SIZE, char_array);
 80006da:	4a11      	ldr	r2, [pc, #68]	; (8000720 <HAL_UART_RxCpltCallback+0xac>)
 80006dc:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <HAL_UART_RxCpltCallback+0xa0>)
 80006de:	2109      	movs	r1, #9
 80006e0:	0018      	movs	r0, r3
 80006e2:	f7ff ff2d 	bl	8000540 <hex_to_char>
		HAL_UART_Transmit(&huart2, (uint8_t*)char_array, strlen(char_array), 100);
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <HAL_UART_RxCpltCallback+0xac>)
 80006e8:	0018      	movs	r0, r3
 80006ea:	f7ff fd0d 	bl	8000108 <strlen>
 80006ee:	0003      	movs	r3, r0
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	490b      	ldr	r1, [pc, #44]	; (8000720 <HAL_UART_RxCpltCallback+0xac>)
 80006f4:	4808      	ldr	r0, [pc, #32]	; (8000718 <HAL_UART_RxCpltCallback+0xa4>)
 80006f6:	2364      	movs	r3, #100	; 0x64
 80006f8:	f001 fe0e 	bl	8002318 <HAL_UART_Transmit>
		transmit = 0;
 80006fc:	4b04      	ldr	r3, [pc, #16]	; (8000710 <HAL_UART_RxCpltCallback+0x9c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	b006      	add	sp, #24
 8000708:	bdb0      	pop	{r4, r5, r7, pc}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	2000011c 	.word	0x2000011c
 8000710:	20000135 	.word	0x20000135
 8000714:	20000120 	.word	0x20000120
 8000718:	20000098 	.word	0x20000098
 800071c:	08003920 	.word	0x08003920
 8000720:	2000012c 	.word	0x2000012c

08000724 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000724:	b590      	push	{r4, r7, lr}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	char msg[] = "Sent\r\n";
 800072c:	2008      	movs	r0, #8
 800072e:	183b      	adds	r3, r7, r0
 8000730:	4a0e      	ldr	r2, [pc, #56]	; (800076c <HAL_UART_TxCpltCallback+0x48>)
 8000732:	6811      	ldr	r1, [r2, #0]
 8000734:	6019      	str	r1, [r3, #0]
 8000736:	8891      	ldrh	r1, [r2, #4]
 8000738:	8099      	strh	r1, [r3, #4]
 800073a:	7992      	ldrb	r2, [r2, #6]
 800073c:	719a      	strb	r2, [r3, #6]
	if(huart->Instance == huart2.Instance){
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <HAL_UART_TxCpltCallback+0x4c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	429a      	cmp	r2, r3
 8000748:	d10c      	bne.n	8000764 <HAL_UART_TxCpltCallback+0x40>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800074a:	0004      	movs	r4, r0
 800074c:	183b      	adds	r3, r7, r0
 800074e:	0018      	movs	r0, r3
 8000750:	f7ff fcda 	bl	8000108 <strlen>
 8000754:	0003      	movs	r3, r0
 8000756:	b29a      	uxth	r2, r3
 8000758:	2301      	movs	r3, #1
 800075a:	425b      	negs	r3, r3
 800075c:	1939      	adds	r1, r7, r4
 800075e:	4804      	ldr	r0, [pc, #16]	; (8000770 <HAL_UART_TxCpltCallback+0x4c>)
 8000760:	f001 fdda 	bl	8002318 <HAL_UART_Transmit>
	}
}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	b005      	add	sp, #20
 800076a:	bd90      	pop	{r4, r7, pc}
 800076c:	08003930 	.word	0x08003930
 8000770:	20000098 	.word	0x20000098

08000774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b099      	sub	sp, #100	; 0x64
 8000778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077a:	242c      	movs	r4, #44	; 0x2c
 800077c:	193b      	adds	r3, r7, r4
 800077e:	0018      	movs	r0, r3
 8000780:	2334      	movs	r3, #52	; 0x34
 8000782:	001a      	movs	r2, r3
 8000784:	2100      	movs	r1, #0
 8000786:	f003 f8b7 	bl	80038f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078a:	2318      	movs	r3, #24
 800078c:	18fb      	adds	r3, r7, r3
 800078e:	0018      	movs	r0, r3
 8000790:	2314      	movs	r3, #20
 8000792:	001a      	movs	r2, r3
 8000794:	2100      	movs	r1, #0
 8000796:	f003 f8af 	bl	80038f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800079a:	003b      	movs	r3, r7
 800079c:	0018      	movs	r0, r3
 800079e:	2318      	movs	r3, #24
 80007a0:	001a      	movs	r2, r3
 80007a2:	2100      	movs	r1, #0
 80007a4:	f003 f8a8 	bl	80038f8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a8:	4b26      	ldr	r3, [pc, #152]	; (8000844 <SystemClock_Config+0xd0>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a26      	ldr	r2, [pc, #152]	; (8000848 <SystemClock_Config+0xd4>)
 80007ae:	401a      	ands	r2, r3
 80007b0:	4b24      	ldr	r3, [pc, #144]	; (8000844 <SystemClock_Config+0xd0>)
 80007b2:	2180      	movs	r1, #128	; 0x80
 80007b4:	0109      	lsls	r1, r1, #4
 80007b6:	430a      	orrs	r2, r1
 80007b8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007ba:	0021      	movs	r1, r4
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2210      	movs	r2, #16
 80007c0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	2201      	movs	r2, #1
 80007c6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	22a0      	movs	r2, #160	; 0xa0
 80007d2:	0212      	lsls	r2, r2, #8
 80007d4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	2200      	movs	r2, #0
 80007da:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	0018      	movs	r0, r3
 80007e0:	f000 fdf6 	bl	80013d0 <HAL_RCC_OscConfig>
 80007e4:	1e03      	subs	r3, r0, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0x78>
  {
    Error_Handler();
 80007e8:	f000 f948 	bl	8000a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ec:	2118      	movs	r1, #24
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	220f      	movs	r2, #15
 80007f2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2200      	movs	r2, #0
 80007f8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800080c:	187b      	adds	r3, r7, r1
 800080e:	2100      	movs	r1, #0
 8000810:	0018      	movs	r0, r3
 8000812:	f001 f959 	bl	8001ac8 <HAL_RCC_ClockConfig>
 8000816:	1e03      	subs	r3, r0, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800081a:	f000 f92f 	bl	8000a7c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800081e:	003b      	movs	r3, r7
 8000820:	2202      	movs	r2, #2
 8000822:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000824:	003b      	movs	r3, r7
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800082a:	003b      	movs	r3, r7
 800082c:	0018      	movs	r0, r3
 800082e:	f001 fb6f 	bl	8001f10 <HAL_RCCEx_PeriphCLKConfig>
 8000832:	1e03      	subs	r3, r0, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000836:	f000 f921 	bl	8000a7c <Error_Handler>
  }
}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	46bd      	mov	sp, r7
 800083e:	b019      	add	sp, #100	; 0x64
 8000840:	bd90      	pop	{r4, r7, pc}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	40007000 	.word	0x40007000
 8000848:	ffffe7ff 	.word	0xffffe7ff

0800084c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000850:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <MX_SPI1_Init+0x68>)
 8000852:	4a19      	ldr	r2, [pc, #100]	; (80008b8 <MX_SPI1_Init+0x6c>)
 8000854:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_SPI1_Init+0x68>)
 8000858:	2282      	movs	r2, #130	; 0x82
 800085a:	0052      	lsls	r2, r2, #1
 800085c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800085e:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <MX_SPI1_Init+0x68>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000864:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <MX_SPI1_Init+0x68>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800086a:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <MX_SPI1_Init+0x68>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000870:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <MX_SPI1_Init+0x68>)
 8000872:	2200      	movs	r2, #0
 8000874:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_SPI1_Init+0x68>)
 8000878:	2280      	movs	r2, #128	; 0x80
 800087a:	0092      	lsls	r2, r2, #2
 800087c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800087e:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <MX_SPI1_Init+0x68>)
 8000880:	2200      	movs	r2, #0
 8000882:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000884:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_SPI1_Init+0x68>)
 8000886:	2200      	movs	r2, #0
 8000888:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800088a:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <MX_SPI1_Init+0x68>)
 800088c:	2200      	movs	r2, #0
 800088e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <MX_SPI1_Init+0x68>)
 8000892:	2200      	movs	r2, #0
 8000894:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000896:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <MX_SPI1_Init+0x68>)
 8000898:	2207      	movs	r2, #7
 800089a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <MX_SPI1_Init+0x68>)
 800089e:	0018      	movs	r0, r3
 80008a0:	f001 fc5c 	bl	800215c <HAL_SPI_Init>
 80008a4:	1e03      	subs	r3, r0, #0
 80008a6:	d001      	beq.n	80008ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008a8:	f000 f8e8 	bl	8000a7c <Error_Handler>
  }
}
 80008ac:	46c0      	nop			; (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	20000040 	.word	0x20000040
 80008b8:	40013000 	.word	0x40013000

080008bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_USART2_UART_Init+0x58>)
 80008c2:	4a15      	ldr	r2, [pc, #84]	; (8000918 <MX_USART2_UART_Init+0x5c>)
 80008c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008c6:	4b13      	ldr	r3, [pc, #76]	; (8000914 <MX_USART2_UART_Init+0x58>)
 80008c8:	22e1      	movs	r2, #225	; 0xe1
 80008ca:	0252      	lsls	r2, r2, #9
 80008cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_USART2_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_USART2_UART_Init+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_USART2_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_USART2_UART_Init+0x58>)
 80008e2:	220c      	movs	r2, #12
 80008e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <MX_USART2_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_USART2_UART_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <MX_USART2_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_USART2_UART_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008fe:	4b05      	ldr	r3, [pc, #20]	; (8000914 <MX_USART2_UART_Init+0x58>)
 8000900:	0018      	movs	r0, r3
 8000902:	f001 fcb5 	bl	8002270 <HAL_UART_Init>
 8000906:	1e03      	subs	r3, r0, #0
 8000908:	d001      	beq.n	800090e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800090a:	f000 f8b7 	bl	8000a7c <Error_Handler>
  }
}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000098 	.word	0x20000098
 8000918:	40004400 	.word	0x40004400

0800091c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800091c:	b590      	push	{r4, r7, lr}
 800091e:	b089      	sub	sp, #36	; 0x24
 8000920:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000922:	240c      	movs	r4, #12
 8000924:	193b      	adds	r3, r7, r4
 8000926:	0018      	movs	r0, r3
 8000928:	2314      	movs	r3, #20
 800092a:	001a      	movs	r2, r3
 800092c:	2100      	movs	r1, #0
 800092e:	f002 ffe3 	bl	80038f8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000932:	4b4c      	ldr	r3, [pc, #304]	; (8000a64 <MX_GPIO_Init+0x148>)
 8000934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000936:	4b4b      	ldr	r3, [pc, #300]	; (8000a64 <MX_GPIO_Init+0x148>)
 8000938:	2104      	movs	r1, #4
 800093a:	430a      	orrs	r2, r1
 800093c:	62da      	str	r2, [r3, #44]	; 0x2c
 800093e:	4b49      	ldr	r3, [pc, #292]	; (8000a64 <MX_GPIO_Init+0x148>)
 8000940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000942:	2204      	movs	r2, #4
 8000944:	4013      	ands	r3, r2
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	4b46      	ldr	r3, [pc, #280]	; (8000a64 <MX_GPIO_Init+0x148>)
 800094c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800094e:	4b45      	ldr	r3, [pc, #276]	; (8000a64 <MX_GPIO_Init+0x148>)
 8000950:	2101      	movs	r1, #1
 8000952:	430a      	orrs	r2, r1
 8000954:	62da      	str	r2, [r3, #44]	; 0x2c
 8000956:	4b43      	ldr	r3, [pc, #268]	; (8000a64 <MX_GPIO_Init+0x148>)
 8000958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800095a:	2201      	movs	r2, #1
 800095c:	4013      	ands	r3, r2
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000962:	4b40      	ldr	r3, [pc, #256]	; (8000a64 <MX_GPIO_Init+0x148>)
 8000964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000966:	4b3f      	ldr	r3, [pc, #252]	; (8000a64 <MX_GPIO_Init+0x148>)
 8000968:	2102      	movs	r1, #2
 800096a:	430a      	orrs	r2, r1
 800096c:	62da      	str	r2, [r3, #44]	; 0x2c
 800096e:	4b3d      	ldr	r3, [pc, #244]	; (8000a64 <MX_GPIO_Init+0x148>)
 8000970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000972:	2202      	movs	r2, #2
 8000974:	4013      	ands	r3, r2
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MISC_GPIO3_Pin|MISC_GPIO4_Pin, GPIO_PIN_RESET);
 800097a:	23c0      	movs	r3, #192	; 0xc0
 800097c:	021b      	lsls	r3, r3, #8
 800097e:	483a      	ldr	r0, [pc, #232]	; (8000a68 <MX_GPIO_Init+0x14c>)
 8000980:	2200      	movs	r2, #0
 8000982:	0019      	movs	r1, r3
 8000984:	f000 fd06 	bl	8001394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ACCEL_SPI1_CS_Pin|GPIO_PIN_4|GPIO_PIN_13|LED_OUT_Pin, GPIO_PIN_RESET);
 8000988:	4938      	ldr	r1, [pc, #224]	; (8000a6c <MX_GPIO_Init+0x150>)
 800098a:	23a0      	movs	r3, #160	; 0xa0
 800098c:	05db      	lsls	r3, r3, #23
 800098e:	2200      	movs	r2, #0
 8000990:	0018      	movs	r0, r3
 8000992:	f000 fcff 	bl	8001394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MISC_GPIO2_GPIO_Port, MISC_GPIO2_Pin, GPIO_PIN_RESET);
 8000996:	4b36      	ldr	r3, [pc, #216]	; (8000a70 <MX_GPIO_Init+0x154>)
 8000998:	2200      	movs	r2, #0
 800099a:	2102      	movs	r1, #2
 800099c:	0018      	movs	r0, r3
 800099e:	f000 fcf9 	bl	8001394 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MISC_GPIO3_Pin MISC_GPIO4_Pin */
  GPIO_InitStruct.Pin = MISC_GPIO3_Pin|MISC_GPIO4_Pin;
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	22c0      	movs	r2, #192	; 0xc0
 80009a6:	0212      	lsls	r2, r2, #8
 80009a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009aa:	193b      	adds	r3, r7, r4
 80009ac:	2201      	movs	r2, #1
 80009ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	193b      	adds	r3, r7, r4
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	193b      	adds	r3, r7, r4
 80009b8:	2200      	movs	r2, #0
 80009ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009bc:	193b      	adds	r3, r7, r4
 80009be:	4a2a      	ldr	r2, [pc, #168]	; (8000a68 <MX_GPIO_Init+0x14c>)
 80009c0:	0019      	movs	r1, r3
 80009c2:	0010      	movs	r0, r2
 80009c4:	f000 fb80 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ON_OFF_MODE_Pin ACCEL_INT2_Pin ACCEL_INT1_Pin */
  GPIO_InitStruct.Pin = ON_OFF_MODE_Pin|ACCEL_INT2_Pin|ACCEL_INT1_Pin;
 80009c8:	193b      	adds	r3, r7, r4
 80009ca:	4a2a      	ldr	r2, [pc, #168]	; (8000a74 <MX_GPIO_Init+0x158>)
 80009cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ce:	193b      	adds	r3, r7, r4
 80009d0:	2200      	movs	r2, #0
 80009d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	193b      	adds	r3, r7, r4
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	193a      	adds	r2, r7, r4
 80009dc:	23a0      	movs	r3, #160	; 0xa0
 80009de:	05db      	lsls	r3, r3, #23
 80009e0:	0011      	movs	r1, r2
 80009e2:	0018      	movs	r0, r3
 80009e4:	f000 fb70 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_SPI1_CS_Pin PA4 PA13 */
  GPIO_InitStruct.Pin = ACCEL_SPI1_CS_Pin|GPIO_PIN_4|GPIO_PIN_13;
 80009e8:	193b      	adds	r3, r7, r4
 80009ea:	4a23      	ldr	r2, [pc, #140]	; (8000a78 <MX_GPIO_Init+0x15c>)
 80009ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	193b      	adds	r3, r7, r4
 80009f0:	2201      	movs	r2, #1
 80009f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	193b      	adds	r3, r7, r4
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	193b      	adds	r3, r7, r4
 80009fc:	2200      	movs	r2, #0
 80009fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	193a      	adds	r2, r7, r4
 8000a02:	23a0      	movs	r3, #160	; 0xa0
 8000a04:	05db      	lsls	r3, r3, #23
 8000a06:	0011      	movs	r1, r2
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f000 fb5d 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MISC_GPIO2_Pin */
  GPIO_InitStruct.Pin = MISC_GPIO2_Pin;
 8000a0e:	193b      	adds	r3, r7, r4
 8000a10:	2202      	movs	r2, #2
 8000a12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a14:	193b      	adds	r3, r7, r4
 8000a16:	2201      	movs	r2, #1
 8000a18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	193b      	adds	r3, r7, r4
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	193b      	adds	r3, r7, r4
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MISC_GPIO2_GPIO_Port, &GPIO_InitStruct);
 8000a26:	193b      	adds	r3, r7, r4
 8000a28:	4a11      	ldr	r2, [pc, #68]	; (8000a70 <MX_GPIO_Init+0x154>)
 8000a2a:	0019      	movs	r1, r3
 8000a2c:	0010      	movs	r0, r2
 8000a2e:	f000 fb4b 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_OUT_Pin */
  GPIO_InitStruct.Pin = LED_OUT_Pin;
 8000a32:	0021      	movs	r1, r4
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	2280      	movs	r2, #128	; 0x80
 8000a38:	01d2      	lsls	r2, r2, #7
 8000a3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2201      	movs	r2, #1
 8000a40:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2201      	movs	r2, #1
 8000a46:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	187a      	adds	r2, r7, r1
 8000a50:	23a0      	movs	r3, #160	; 0xa0
 8000a52:	05db      	lsls	r3, r3, #23
 8000a54:	0011      	movs	r1, r2
 8000a56:	0018      	movs	r0, r3
 8000a58:	f000 fb36 	bl	80010c8 <HAL_GPIO_Init>

}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	b009      	add	sp, #36	; 0x24
 8000a62:	bd90      	pop	{r4, r7, pc}
 8000a64:	40021000 	.word	0x40021000
 8000a68:	50000800 	.word	0x50000800
 8000a6c:	00006018 	.word	0x00006018
 8000a70:	50000400 	.word	0x50000400
 8000a74:	00000602 	.word	0x00000602
 8000a78:	00002018 	.word	0x00002018

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <Error_Handler+0x8>
	...

08000a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <HAL_MspInit+0x24>)
 8000a8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <HAL_MspInit+0x24>)
 8000a92:	2101      	movs	r1, #1
 8000a94:	430a      	orrs	r2, r1
 8000a96:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a98:	4b04      	ldr	r3, [pc, #16]	; (8000aac <HAL_MspInit+0x24>)
 8000a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a9c:	4b03      	ldr	r3, [pc, #12]	; (8000aac <HAL_MspInit+0x24>)
 8000a9e:	2180      	movs	r1, #128	; 0x80
 8000aa0:	0549      	lsls	r1, r1, #21
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40021000 	.word	0x40021000

08000ab0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b089      	sub	sp, #36	; 0x24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	240c      	movs	r4, #12
 8000aba:	193b      	adds	r3, r7, r4
 8000abc:	0018      	movs	r0, r3
 8000abe:	2314      	movs	r3, #20
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	f002 ff18 	bl	80038f8 <memset>
  if(hspi->Instance==SPI1)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a18      	ldr	r2, [pc, #96]	; (8000b30 <HAL_SPI_MspInit+0x80>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d129      	bne.n	8000b26 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ad2:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <HAL_SPI_MspInit+0x84>)
 8000ad4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <HAL_SPI_MspInit+0x84>)
 8000ad8:	2180      	movs	r1, #128	; 0x80
 8000ada:	0149      	lsls	r1, r1, #5
 8000adc:	430a      	orrs	r2, r1
 8000ade:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <HAL_SPI_MspInit+0x84>)
 8000ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ae4:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <HAL_SPI_MspInit+0x84>)
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	62da      	str	r2, [r3, #44]	; 0x2c
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <HAL_SPI_MspInit+0x84>)
 8000aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af0:	2201      	movs	r2, #1
 8000af2:	4013      	ands	r3, r2
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000af8:	0021      	movs	r1, r4
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	22e0      	movs	r2, #224	; 0xe0
 8000afe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	2202      	movs	r2, #2
 8000b04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	2203      	movs	r2, #3
 8000b10:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b18:	187a      	adds	r2, r7, r1
 8000b1a:	23a0      	movs	r3, #160	; 0xa0
 8000b1c:	05db      	lsls	r3, r3, #23
 8000b1e:	0011      	movs	r1, r2
 8000b20:	0018      	movs	r0, r3
 8000b22:	f000 fad1 	bl	80010c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	b009      	add	sp, #36	; 0x24
 8000b2c:	bd90      	pop	{r4, r7, pc}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	40013000 	.word	0x40013000
 8000b34:	40021000 	.word	0x40021000

08000b38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b089      	sub	sp, #36	; 0x24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	240c      	movs	r4, #12
 8000b42:	193b      	adds	r3, r7, r4
 8000b44:	0018      	movs	r0, r3
 8000b46:	2314      	movs	r3, #20
 8000b48:	001a      	movs	r2, r3
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	f002 fed4 	bl	80038f8 <memset>
  if(huart->Instance==USART2)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a27      	ldr	r2, [pc, #156]	; (8000bf4 <HAL_UART_MspInit+0xbc>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d147      	bne.n	8000bea <HAL_UART_MspInit+0xb2>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b5a:	4b27      	ldr	r3, [pc, #156]	; (8000bf8 <HAL_UART_MspInit+0xc0>)
 8000b5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b5e:	4b26      	ldr	r3, [pc, #152]	; (8000bf8 <HAL_UART_MspInit+0xc0>)
 8000b60:	2180      	movs	r1, #128	; 0x80
 8000b62:	0289      	lsls	r1, r1, #10
 8000b64:	430a      	orrs	r2, r1
 8000b66:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b68:	4b23      	ldr	r3, [pc, #140]	; (8000bf8 <HAL_UART_MspInit+0xc0>)
 8000b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b6c:	4b22      	ldr	r3, [pc, #136]	; (8000bf8 <HAL_UART_MspInit+0xc0>)
 8000b6e:	2101      	movs	r1, #1
 8000b70:	430a      	orrs	r2, r1
 8000b72:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b74:	4b20      	ldr	r3, [pc, #128]	; (8000bf8 <HAL_UART_MspInit+0xc0>)
 8000b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b78:	2201      	movs	r2, #1
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA0-CK_IN     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b80:	193b      	adds	r3, r7, r4
 8000b82:	2201      	movs	r2, #1
 8000b84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	193b      	adds	r3, r7, r4
 8000b88:	2202      	movs	r2, #2
 8000b8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	193b      	adds	r3, r7, r4
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b92:	193b      	adds	r3, r7, r4
 8000b94:	2203      	movs	r2, #3
 8000b96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 8000b98:	193b      	adds	r3, r7, r4
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	193a      	adds	r2, r7, r4
 8000ba0:	23a0      	movs	r3, #160	; 0xa0
 8000ba2:	05db      	lsls	r3, r3, #23
 8000ba4:	0011      	movs	r1, r2
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f000 fa8e 	bl	80010c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bac:	0021      	movs	r1, r4
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	2204      	movs	r2, #4
 8000bb2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	2202      	movs	r2, #2
 8000bb8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	2203      	movs	r2, #3
 8000bc4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	2204      	movs	r2, #4
 8000bca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bcc:	187a      	adds	r2, r7, r1
 8000bce:	23a0      	movs	r3, #160	; 0xa0
 8000bd0:	05db      	lsls	r3, r3, #23
 8000bd2:	0011      	movs	r1, r2
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f000 fa77 	bl	80010c8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	201c      	movs	r0, #28
 8000be0:	f000 f9b8 	bl	8000f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000be4:	201c      	movs	r0, #28
 8000be6:	f000 f9ca 	bl	8000f7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	46bd      	mov	sp, r7
 8000bee:	b009      	add	sp, #36	; 0x24
 8000bf0:	bd90      	pop	{r4, r7, pc}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	40004400 	.word	0x40004400
 8000bf8:	40021000 	.word	0x40021000

08000bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <NMI_Handler+0x4>

08000c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <HardFault_Handler+0x4>

08000c08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c0c:	46c0      	nop			; (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c20:	f000 f8ac 	bl	8000d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c24:	46c0      	nop			; (mov r8, r8)
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
//	char msg[] = "Received\r\n";
//	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c30:	4b03      	ldr	r3, [pc, #12]	; (8000c40 <USART2_IRQHandler+0x14>)
 8000c32:	0018      	movs	r0, r3
 8000c34:	f001 fc80 	bl	8002538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c38:	46c0      	nop			; (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	20000098 	.word	0x20000098

08000c44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c48:	46c0      	nop			; (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000c50:	4813      	ldr	r0, [pc, #76]	; (8000ca0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000c52:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000c54:	4813      	ldr	r0, [pc, #76]	; (8000ca4 <LoopForever+0x6>)
    LDR R1, [R0]
 8000c56:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000c58:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000c5a:	4a13      	ldr	r2, [pc, #76]	; (8000ca8 <LoopForever+0xa>)
    CMP R1, R2
 8000c5c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000c5e:	d105      	bne.n	8000c6c <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000c60:	4812      	ldr	r0, [pc, #72]	; (8000cac <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000c62:	4913      	ldr	r1, [pc, #76]	; (8000cb0 <LoopForever+0x12>)
    STR R1, [R0]
 8000c64:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000c66:	4813      	ldr	r0, [pc, #76]	; (8000cb4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000c68:	4913      	ldr	r1, [pc, #76]	; (8000cb8 <LoopForever+0x1a>)
    STR R1, [R0]
 8000c6a:	6001      	str	r1, [r0, #0]

08000c6c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c6c:	4813      	ldr	r0, [pc, #76]	; (8000cbc <LoopForever+0x1e>)
  ldr r1, =_edata
 8000c6e:	4914      	ldr	r1, [pc, #80]	; (8000cc0 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000c70:	4a14      	ldr	r2, [pc, #80]	; (8000cc4 <LoopForever+0x26>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c74:	e002      	b.n	8000c7c <LoopCopyDataInit>

08000c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7a:	3304      	adds	r3, #4

08000c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c80:	d3f9      	bcc.n	8000c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c82:	4a11      	ldr	r2, [pc, #68]	; (8000cc8 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000c84:	4c11      	ldr	r4, [pc, #68]	; (8000ccc <LoopForever+0x2e>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c88:	e001      	b.n	8000c8e <LoopFillZerobss>

08000c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c8c:	3204      	adds	r2, #4

08000c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c90:	d3fb      	bcc.n	8000c8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c92:	f7ff ffd7 	bl	8000c44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c96:	f002 fe0b 	bl	80038b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c9a:	f7ff fc0d 	bl	80004b8 <main>

08000c9e <LoopForever>:

LoopForever:
    b LoopForever
 8000c9e:	e7fe      	b.n	8000c9e <LoopForever>
   ldr   r0, =_estack
 8000ca0:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000ca4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000ca8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000cac:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000cb0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000cb4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000cb8:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc0:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000cc4:	080039b4 	.word	0x080039b4
  ldr r2, =_sbss
 8000cc8:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000ccc:	2000013c 	.word	0x2000013c

08000cd0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC1_IRQHandler>
	...

08000cd4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cda:	1dfb      	adds	r3, r7, #7
 8000cdc:	2200      	movs	r2, #0
 8000cde:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <HAL_Init+0x3c>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <HAL_Init+0x3c>)
 8000ce6:	2140      	movs	r1, #64	; 0x40
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cec:	2003      	movs	r0, #3
 8000cee:	f000 f811 	bl	8000d14 <HAL_InitTick>
 8000cf2:	1e03      	subs	r3, r0, #0
 8000cf4:	d003      	beq.n	8000cfe <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000cf6:	1dfb      	adds	r3, r7, #7
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	701a      	strb	r2, [r3, #0]
 8000cfc:	e001      	b.n	8000d02 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cfe:	f7ff fec3 	bl	8000a88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d02:	1dfb      	adds	r3, r7, #7
 8000d04:	781b      	ldrb	r3, [r3, #0]
}
 8000d06:	0018      	movs	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b002      	add	sp, #8
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	40022000 	.word	0x40022000

08000d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d14:	b590      	push	{r4, r7, lr}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d1c:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <HAL_InitTick+0x5c>)
 8000d1e:	681c      	ldr	r4, [r3, #0]
 8000d20:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <HAL_InitTick+0x60>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	0019      	movs	r1, r3
 8000d26:	23fa      	movs	r3, #250	; 0xfa
 8000d28:	0098      	lsls	r0, r3, #2
 8000d2a:	f7ff f9f5 	bl	8000118 <__udivsi3>
 8000d2e:	0003      	movs	r3, r0
 8000d30:	0019      	movs	r1, r3
 8000d32:	0020      	movs	r0, r4
 8000d34:	f7ff f9f0 	bl	8000118 <__udivsi3>
 8000d38:	0003      	movs	r3, r0
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f000 f92f 	bl	8000f9e <HAL_SYSTICK_Config>
 8000d40:	1e03      	subs	r3, r0, #0
 8000d42:	d001      	beq.n	8000d48 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	e00f      	b.n	8000d68 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b03      	cmp	r3, #3
 8000d4c:	d80b      	bhi.n	8000d66 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	2301      	movs	r3, #1
 8000d52:	425b      	negs	r3, r3
 8000d54:	2200      	movs	r2, #0
 8000d56:	0018      	movs	r0, r3
 8000d58:	f000 f8fc 	bl	8000f54 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_InitTick+0x64>)
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d62:	2300      	movs	r3, #0
 8000d64:	e000      	b.n	8000d68 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
}
 8000d68:	0018      	movs	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	b003      	add	sp, #12
 8000d6e:	bd90      	pop	{r4, r7, pc}
 8000d70:	20000018 	.word	0x20000018
 8000d74:	20000020 	.word	0x20000020
 8000d78:	2000001c 	.word	0x2000001c

08000d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <HAL_IncTick+0x1c>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	001a      	movs	r2, r3
 8000d86:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <HAL_IncTick+0x20>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	18d2      	adds	r2, r2, r3
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <HAL_IncTick+0x20>)
 8000d8e:	601a      	str	r2, [r3, #0]
}
 8000d90:	46c0      	nop			; (mov r8, r8)
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	20000020 	.word	0x20000020
 8000d9c:	20000138 	.word	0x20000138

08000da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  return uwTick;
 8000da4:	4b02      	ldr	r3, [pc, #8]	; (8000db0 <HAL_GetTick+0x10>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	0018      	movs	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	20000138 	.word	0x20000138

08000db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dbc:	f7ff fff0 	bl	8000da0 <HAL_GetTick>
 8000dc0:	0003      	movs	r3, r0
 8000dc2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	d005      	beq.n	8000dda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_Delay+0x44>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	001a      	movs	r2, r3
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	189b      	adds	r3, r3, r2
 8000dd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	f7ff ffe0 	bl	8000da0 <HAL_GetTick>
 8000de0:	0002      	movs	r2, r0
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d8f7      	bhi.n	8000ddc <HAL_Delay+0x28>
  {
  }
}
 8000dec:	46c0      	nop			; (mov r8, r8)
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	46bd      	mov	sp, r7
 8000df2:	b004      	add	sp, #16
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	20000020 	.word	0x20000020

08000dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	0002      	movs	r2, r0
 8000e04:	1dfb      	adds	r3, r7, #7
 8000e06:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e08:	1dfb      	adds	r3, r7, #7
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b7f      	cmp	r3, #127	; 0x7f
 8000e0e:	d809      	bhi.n	8000e24 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e10:	1dfb      	adds	r3, r7, #7
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	001a      	movs	r2, r3
 8000e16:	231f      	movs	r3, #31
 8000e18:	401a      	ands	r2, r3
 8000e1a:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <__NVIC_EnableIRQ+0x30>)
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	4091      	lsls	r1, r2
 8000e20:	000a      	movs	r2, r1
 8000e22:	601a      	str	r2, [r3, #0]
  }
}
 8000e24:	46c0      	nop			; (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b002      	add	sp, #8
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	e000e100 	.word	0xe000e100

08000e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e30:	b590      	push	{r4, r7, lr}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	0002      	movs	r2, r0
 8000e38:	6039      	str	r1, [r7, #0]
 8000e3a:	1dfb      	adds	r3, r7, #7
 8000e3c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e3e:	1dfb      	adds	r3, r7, #7
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b7f      	cmp	r3, #127	; 0x7f
 8000e44:	d828      	bhi.n	8000e98 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e46:	4a2f      	ldr	r2, [pc, #188]	; (8000f04 <__NVIC_SetPriority+0xd4>)
 8000e48:	1dfb      	adds	r3, r7, #7
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	b25b      	sxtb	r3, r3
 8000e4e:	089b      	lsrs	r3, r3, #2
 8000e50:	33c0      	adds	r3, #192	; 0xc0
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	589b      	ldr	r3, [r3, r2]
 8000e56:	1dfa      	adds	r2, r7, #7
 8000e58:	7812      	ldrb	r2, [r2, #0]
 8000e5a:	0011      	movs	r1, r2
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	400a      	ands	r2, r1
 8000e60:	00d2      	lsls	r2, r2, #3
 8000e62:	21ff      	movs	r1, #255	; 0xff
 8000e64:	4091      	lsls	r1, r2
 8000e66:	000a      	movs	r2, r1
 8000e68:	43d2      	mvns	r2, r2
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	019b      	lsls	r3, r3, #6
 8000e72:	22ff      	movs	r2, #255	; 0xff
 8000e74:	401a      	ands	r2, r3
 8000e76:	1dfb      	adds	r3, r7, #7
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	4003      	ands	r3, r0
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e84:	481f      	ldr	r0, [pc, #124]	; (8000f04 <__NVIC_SetPriority+0xd4>)
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	b25b      	sxtb	r3, r3
 8000e8c:	089b      	lsrs	r3, r3, #2
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	33c0      	adds	r3, #192	; 0xc0
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e96:	e031      	b.n	8000efc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e98:	4a1b      	ldr	r2, [pc, #108]	; (8000f08 <__NVIC_SetPriority+0xd8>)
 8000e9a:	1dfb      	adds	r3, r7, #7
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	0019      	movs	r1, r3
 8000ea0:	230f      	movs	r3, #15
 8000ea2:	400b      	ands	r3, r1
 8000ea4:	3b08      	subs	r3, #8
 8000ea6:	089b      	lsrs	r3, r3, #2
 8000ea8:	3306      	adds	r3, #6
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	18d3      	adds	r3, r2, r3
 8000eae:	3304      	adds	r3, #4
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	1dfa      	adds	r2, r7, #7
 8000eb4:	7812      	ldrb	r2, [r2, #0]
 8000eb6:	0011      	movs	r1, r2
 8000eb8:	2203      	movs	r2, #3
 8000eba:	400a      	ands	r2, r1
 8000ebc:	00d2      	lsls	r2, r2, #3
 8000ebe:	21ff      	movs	r1, #255	; 0xff
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	000a      	movs	r2, r1
 8000ec4:	43d2      	mvns	r2, r2
 8000ec6:	401a      	ands	r2, r3
 8000ec8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	019b      	lsls	r3, r3, #6
 8000ece:	22ff      	movs	r2, #255	; 0xff
 8000ed0:	401a      	ands	r2, r3
 8000ed2:	1dfb      	adds	r3, r7, #7
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	2303      	movs	r3, #3
 8000eda:	4003      	ands	r3, r0
 8000edc:	00db      	lsls	r3, r3, #3
 8000ede:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ee0:	4809      	ldr	r0, [pc, #36]	; (8000f08 <__NVIC_SetPriority+0xd8>)
 8000ee2:	1dfb      	adds	r3, r7, #7
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	001c      	movs	r4, r3
 8000ee8:	230f      	movs	r3, #15
 8000eea:	4023      	ands	r3, r4
 8000eec:	3b08      	subs	r3, #8
 8000eee:	089b      	lsrs	r3, r3, #2
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	3306      	adds	r3, #6
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	18c3      	adds	r3, r0, r3
 8000ef8:	3304      	adds	r3, #4
 8000efa:	601a      	str	r2, [r3, #0]
}
 8000efc:	46c0      	nop			; (mov r8, r8)
 8000efe:	46bd      	mov	sp, r7
 8000f00:	b003      	add	sp, #12
 8000f02:	bd90      	pop	{r4, r7, pc}
 8000f04:	e000e100 	.word	0xe000e100
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	1e5a      	subs	r2, r3, #1
 8000f18:	2380      	movs	r3, #128	; 0x80
 8000f1a:	045b      	lsls	r3, r3, #17
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d301      	bcc.n	8000f24 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f20:	2301      	movs	r3, #1
 8000f22:	e010      	b.n	8000f46 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f24:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <SysTick_Config+0x44>)
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	3a01      	subs	r2, #1
 8000f2a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	425b      	negs	r3, r3
 8000f30:	2103      	movs	r1, #3
 8000f32:	0018      	movs	r0, r3
 8000f34:	f7ff ff7c 	bl	8000e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f38:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <SysTick_Config+0x44>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f3e:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <SysTick_Config+0x44>)
 8000f40:	2207      	movs	r2, #7
 8000f42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	0018      	movs	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b002      	add	sp, #8
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	e000e010 	.word	0xe000e010

08000f54 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60b9      	str	r1, [r7, #8]
 8000f5c:	607a      	str	r2, [r7, #4]
 8000f5e:	210f      	movs	r1, #15
 8000f60:	187b      	adds	r3, r7, r1
 8000f62:	1c02      	adds	r2, r0, #0
 8000f64:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	187b      	adds	r3, r7, r1
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b25b      	sxtb	r3, r3
 8000f6e:	0011      	movs	r1, r2
 8000f70:	0018      	movs	r0, r3
 8000f72:	f7ff ff5d 	bl	8000e30 <__NVIC_SetPriority>
}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	b004      	add	sp, #16
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	0002      	movs	r2, r0
 8000f86:	1dfb      	adds	r3, r7, #7
 8000f88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f8a:	1dfb      	adds	r3, r7, #7
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	b25b      	sxtb	r3, r3
 8000f90:	0018      	movs	r0, r3
 8000f92:	f7ff ff33 	bl	8000dfc <__NVIC_EnableIRQ>
}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	b002      	add	sp, #8
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f7ff ffaf 	bl	8000f0c <SysTick_Config>
 8000fae:	0003      	movs	r3, r0
}
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b002      	add	sp, #8
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fc0:	230f      	movs	r3, #15
 8000fc2:	18fb      	adds	r3, r7, r3
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2225      	movs	r2, #37	; 0x25
 8000fcc:	5c9b      	ldrb	r3, [r3, r2]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d008      	beq.n	8000fe6 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2204      	movs	r2, #4
 8000fd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2224      	movs	r2, #36	; 0x24
 8000fde:	2100      	movs	r1, #0
 8000fe0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e024      	b.n	8001030 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	210e      	movs	r1, #14
 8000ff2:	438a      	bics	r2, r1
 8000ff4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2101      	movs	r1, #1
 8001002:	438a      	bics	r2, r1
 8001004:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	221c      	movs	r2, #28
 800100c:	401a      	ands	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	2101      	movs	r1, #1
 8001014:	4091      	lsls	r1, r2
 8001016:	000a      	movs	r2, r1
 8001018:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2225      	movs	r2, #37	; 0x25
 800101e:	2101      	movs	r1, #1
 8001020:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2224      	movs	r2, #36	; 0x24
 8001026:	2100      	movs	r1, #0
 8001028:	5499      	strb	r1, [r3, r2]

    return status;
 800102a:	230f      	movs	r3, #15
 800102c:	18fb      	adds	r3, r7, r3
 800102e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001030:	0018      	movs	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	b004      	add	sp, #16
 8001036:	bd80      	pop	{r7, pc}

08001038 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001040:	210f      	movs	r1, #15
 8001042:	187b      	adds	r3, r7, r1
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2225      	movs	r2, #37	; 0x25
 800104c:	5c9b      	ldrb	r3, [r3, r2]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d006      	beq.n	8001062 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2204      	movs	r2, #4
 8001058:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800105a:	187b      	adds	r3, r7, r1
 800105c:	2201      	movs	r2, #1
 800105e:	701a      	strb	r2, [r3, #0]
 8001060:	e02a      	b.n	80010b8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	210e      	movs	r1, #14
 800106e:	438a      	bics	r2, r1
 8001070:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2101      	movs	r1, #1
 800107e:	438a      	bics	r2, r1
 8001080:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	221c      	movs	r2, #28
 8001088:	401a      	ands	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	2101      	movs	r1, #1
 8001090:	4091      	lsls	r1, r2
 8001092:	000a      	movs	r2, r1
 8001094:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2225      	movs	r2, #37	; 0x25
 800109a:	2101      	movs	r1, #1
 800109c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2224      	movs	r2, #36	; 0x24
 80010a2:	2100      	movs	r1, #0
 80010a4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d004      	beq.n	80010b8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	0010      	movs	r0, r2
 80010b6:	4798      	blx	r3
    }
  }
  return status;
 80010b8:	230f      	movs	r3, #15
 80010ba:	18fb      	adds	r3, r7, r3
 80010bc:	781b      	ldrb	r3, [r3, #0]
}
 80010be:	0018      	movs	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	b004      	add	sp, #16
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80010de:	e143      	b.n	8001368 <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2101      	movs	r1, #1
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	4091      	lsls	r1, r2
 80010ea:	000a      	movs	r2, r1
 80010ec:	4013      	ands	r3, r2
 80010ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d100      	bne.n	80010f8 <HAL_GPIO_Init+0x30>
 80010f6:	e134      	b.n	8001362 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2203      	movs	r2, #3
 80010fe:	4013      	ands	r3, r2
 8001100:	2b01      	cmp	r3, #1
 8001102:	d005      	beq.n	8001110 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2203      	movs	r2, #3
 800110a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800110c:	2b02      	cmp	r3, #2
 800110e:	d130      	bne.n	8001172 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	409a      	lsls	r2, r3
 800111e:	0013      	movs	r3, r2
 8001120:	43da      	mvns	r2, r3
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	68da      	ldr	r2, [r3, #12]
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	409a      	lsls	r2, r3
 8001132:	0013      	movs	r3, r2
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4313      	orrs	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001146:	2201      	movs	r2, #1
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	409a      	lsls	r2, r3
 800114c:	0013      	movs	r3, r2
 800114e:	43da      	mvns	r2, r3
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	091b      	lsrs	r3, r3, #4
 800115c:	2201      	movs	r2, #1
 800115e:	401a      	ands	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	409a      	lsls	r2, r3
 8001164:	0013      	movs	r3, r2
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2203      	movs	r2, #3
 8001178:	4013      	ands	r3, r2
 800117a:	2b03      	cmp	r3, #3
 800117c:	d017      	beq.n	80011ae <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	2203      	movs	r2, #3
 800118a:	409a      	lsls	r2, r3
 800118c:	0013      	movs	r3, r2
 800118e:	43da      	mvns	r2, r3
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	689a      	ldr	r2, [r3, #8]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	409a      	lsls	r2, r3
 80011a0:	0013      	movs	r3, r2
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2203      	movs	r2, #3
 80011b4:	4013      	ands	r3, r2
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d123      	bne.n	8001202 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	08da      	lsrs	r2, r3, #3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3208      	adds	r2, #8
 80011c2:	0092      	lsls	r2, r2, #2
 80011c4:	58d3      	ldr	r3, [r2, r3]
 80011c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	2207      	movs	r2, #7
 80011cc:	4013      	ands	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	220f      	movs	r2, #15
 80011d2:	409a      	lsls	r2, r3
 80011d4:	0013      	movs	r3, r2
 80011d6:	43da      	mvns	r2, r3
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	4013      	ands	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	691a      	ldr	r2, [r3, #16]
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	2107      	movs	r1, #7
 80011e6:	400b      	ands	r3, r1
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	409a      	lsls	r2, r3
 80011ec:	0013      	movs	r3, r2
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	08da      	lsrs	r2, r3, #3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3208      	adds	r2, #8
 80011fc:	0092      	lsls	r2, r2, #2
 80011fe:	6939      	ldr	r1, [r7, #16]
 8001200:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	2203      	movs	r2, #3
 800120e:	409a      	lsls	r2, r3
 8001210:	0013      	movs	r3, r2
 8001212:	43da      	mvns	r2, r3
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2203      	movs	r2, #3
 8001220:	401a      	ands	r2, r3
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	409a      	lsls	r2, r3
 8001228:	0013      	movs	r3, r2
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685a      	ldr	r2, [r3, #4]
 800123a:	23c0      	movs	r3, #192	; 0xc0
 800123c:	029b      	lsls	r3, r3, #10
 800123e:	4013      	ands	r3, r2
 8001240:	d100      	bne.n	8001244 <HAL_GPIO_Init+0x17c>
 8001242:	e08e      	b.n	8001362 <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001244:	4b4e      	ldr	r3, [pc, #312]	; (8001380 <HAL_GPIO_Init+0x2b8>)
 8001246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001248:	4b4d      	ldr	r3, [pc, #308]	; (8001380 <HAL_GPIO_Init+0x2b8>)
 800124a:	2101      	movs	r1, #1
 800124c:	430a      	orrs	r2, r1
 800124e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001250:	4a4c      	ldr	r2, [pc, #304]	; (8001384 <HAL_GPIO_Init+0x2bc>)
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	089b      	lsrs	r3, r3, #2
 8001256:	3302      	adds	r3, #2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	589b      	ldr	r3, [r3, r2]
 800125c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	2203      	movs	r2, #3
 8001262:	4013      	ands	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	220f      	movs	r2, #15
 8001268:	409a      	lsls	r2, r3
 800126a:	0013      	movs	r3, r2
 800126c:	43da      	mvns	r2, r3
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	23a0      	movs	r3, #160	; 0xa0
 8001278:	05db      	lsls	r3, r3, #23
 800127a:	429a      	cmp	r2, r3
 800127c:	d00d      	beq.n	800129a <HAL_GPIO_Init+0x1d2>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a41      	ldr	r2, [pc, #260]	; (8001388 <HAL_GPIO_Init+0x2c0>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d007      	beq.n	8001296 <HAL_GPIO_Init+0x1ce>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a40      	ldr	r2, [pc, #256]	; (800138c <HAL_GPIO_Init+0x2c4>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d101      	bne.n	8001292 <HAL_GPIO_Init+0x1ca>
 800128e:	2302      	movs	r3, #2
 8001290:	e004      	b.n	800129c <HAL_GPIO_Init+0x1d4>
 8001292:	2306      	movs	r3, #6
 8001294:	e002      	b.n	800129c <HAL_GPIO_Init+0x1d4>
 8001296:	2301      	movs	r3, #1
 8001298:	e000      	b.n	800129c <HAL_GPIO_Init+0x1d4>
 800129a:	2300      	movs	r3, #0
 800129c:	697a      	ldr	r2, [r7, #20]
 800129e:	2103      	movs	r1, #3
 80012a0:	400a      	ands	r2, r1
 80012a2:	0092      	lsls	r2, r2, #2
 80012a4:	4093      	lsls	r3, r2
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012ac:	4935      	ldr	r1, [pc, #212]	; (8001384 <HAL_GPIO_Init+0x2bc>)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	089b      	lsrs	r3, r3, #2
 80012b2:	3302      	adds	r3, #2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ba:	4b35      	ldr	r3, [pc, #212]	; (8001390 <HAL_GPIO_Init+0x2c8>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	43da      	mvns	r2, r3
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4013      	ands	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	2380      	movs	r3, #128	; 0x80
 80012d0:	025b      	lsls	r3, r3, #9
 80012d2:	4013      	ands	r3, r2
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4313      	orrs	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012de:	4b2c      	ldr	r3, [pc, #176]	; (8001390 <HAL_GPIO_Init+0x2c8>)
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80012e4:	4b2a      	ldr	r3, [pc, #168]	; (8001390 <HAL_GPIO_Init+0x2c8>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	43da      	mvns	r2, r3
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	4013      	ands	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	029b      	lsls	r3, r3, #10
 80012fc:	4013      	ands	r3, r2
 80012fe:	d003      	beq.n	8001308 <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	4313      	orrs	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001308:	4b21      	ldr	r3, [pc, #132]	; (8001390 <HAL_GPIO_Init+0x2c8>)
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800130e:	4b20      	ldr	r3, [pc, #128]	; (8001390 <HAL_GPIO_Init+0x2c8>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	43da      	mvns	r2, r3
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4013      	ands	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	035b      	lsls	r3, r3, #13
 8001326:	4013      	ands	r3, r2
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4313      	orrs	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <HAL_GPIO_Init+0x2c8>)
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001338:	4b15      	ldr	r3, [pc, #84]	; (8001390 <HAL_GPIO_Init+0x2c8>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	43da      	mvns	r2, r3
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4013      	ands	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	039b      	lsls	r3, r3, #14
 8001350:	4013      	ands	r3, r2
 8001352:	d003      	beq.n	800135c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4313      	orrs	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <HAL_GPIO_Init+0x2c8>)
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	3301      	adds	r3, #1
 8001366:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	40da      	lsrs	r2, r3
 8001370:	1e13      	subs	r3, r2, #0
 8001372:	d000      	beq.n	8001376 <HAL_GPIO_Init+0x2ae>
 8001374:	e6b4      	b.n	80010e0 <HAL_GPIO_Init+0x18>
  }
}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	46c0      	nop			; (mov r8, r8)
 800137a:	46bd      	mov	sp, r7
 800137c:	b006      	add	sp, #24
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40021000 	.word	0x40021000
 8001384:	40010000 	.word	0x40010000
 8001388:	50000400 	.word	0x50000400
 800138c:	50000800 	.word	0x50000800
 8001390:	40010400 	.word	0x40010400

08001394 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	0008      	movs	r0, r1
 800139e:	0011      	movs	r1, r2
 80013a0:	1cbb      	adds	r3, r7, #2
 80013a2:	1c02      	adds	r2, r0, #0
 80013a4:	801a      	strh	r2, [r3, #0]
 80013a6:	1c7b      	adds	r3, r7, #1
 80013a8:	1c0a      	adds	r2, r1, #0
 80013aa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013ac:	1c7b      	adds	r3, r7, #1
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d004      	beq.n	80013be <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013b4:	1cbb      	adds	r3, r7, #2
 80013b6:	881a      	ldrh	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80013bc:	e003      	b.n	80013c6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80013be:	1cbb      	adds	r3, r7, #2
 80013c0:	881a      	ldrh	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	46bd      	mov	sp, r7
 80013ca:	b002      	add	sp, #8
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013d0:	b5b0      	push	{r4, r5, r7, lr}
 80013d2:	b08a      	sub	sp, #40	; 0x28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d102      	bne.n	80013e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	f000 fb6c 	bl	8001abc <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013e4:	4bc8      	ldr	r3, [pc, #800]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	220c      	movs	r2, #12
 80013ea:	4013      	ands	r3, r2
 80013ec:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013ee:	4bc6      	ldr	r3, [pc, #792]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 80013f0:	68da      	ldr	r2, [r3, #12]
 80013f2:	2380      	movs	r3, #128	; 0x80
 80013f4:	025b      	lsls	r3, r3, #9
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2201      	movs	r2, #1
 8001400:	4013      	ands	r3, r2
 8001402:	d100      	bne.n	8001406 <HAL_RCC_OscConfig+0x36>
 8001404:	e07d      	b.n	8001502 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	2b08      	cmp	r3, #8
 800140a:	d007      	beq.n	800141c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	2b0c      	cmp	r3, #12
 8001410:	d112      	bne.n	8001438 <HAL_RCC_OscConfig+0x68>
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	025b      	lsls	r3, r3, #9
 8001418:	429a      	cmp	r2, r3
 800141a:	d10d      	bne.n	8001438 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800141c:	4bba      	ldr	r3, [pc, #744]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	029b      	lsls	r3, r3, #10
 8001424:	4013      	ands	r3, r2
 8001426:	d100      	bne.n	800142a <HAL_RCC_OscConfig+0x5a>
 8001428:	e06a      	b.n	8001500 <HAL_RCC_OscConfig+0x130>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d166      	bne.n	8001500 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	f000 fb42 	bl	8001abc <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	2380      	movs	r3, #128	; 0x80
 800143e:	025b      	lsls	r3, r3, #9
 8001440:	429a      	cmp	r2, r3
 8001442:	d107      	bne.n	8001454 <HAL_RCC_OscConfig+0x84>
 8001444:	4bb0      	ldr	r3, [pc, #704]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4baf      	ldr	r3, [pc, #700]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 800144a:	2180      	movs	r1, #128	; 0x80
 800144c:	0249      	lsls	r1, r1, #9
 800144e:	430a      	orrs	r2, r1
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	e027      	b.n	80014a4 <HAL_RCC_OscConfig+0xd4>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	23a0      	movs	r3, #160	; 0xa0
 800145a:	02db      	lsls	r3, r3, #11
 800145c:	429a      	cmp	r2, r3
 800145e:	d10e      	bne.n	800147e <HAL_RCC_OscConfig+0xae>
 8001460:	4ba9      	ldr	r3, [pc, #676]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4ba8      	ldr	r3, [pc, #672]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 8001466:	2180      	movs	r1, #128	; 0x80
 8001468:	02c9      	lsls	r1, r1, #11
 800146a:	430a      	orrs	r2, r1
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	4ba6      	ldr	r3, [pc, #664]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	4ba5      	ldr	r3, [pc, #660]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 8001474:	2180      	movs	r1, #128	; 0x80
 8001476:	0249      	lsls	r1, r1, #9
 8001478:	430a      	orrs	r2, r1
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	e012      	b.n	80014a4 <HAL_RCC_OscConfig+0xd4>
 800147e:	4ba2      	ldr	r3, [pc, #648]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	4ba1      	ldr	r3, [pc, #644]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 8001484:	49a1      	ldr	r1, [pc, #644]	; (800170c <HAL_RCC_OscConfig+0x33c>)
 8001486:	400a      	ands	r2, r1
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	4b9f      	ldr	r3, [pc, #636]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	2380      	movs	r3, #128	; 0x80
 8001490:	025b      	lsls	r3, r3, #9
 8001492:	4013      	ands	r3, r2
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4b9b      	ldr	r3, [pc, #620]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b9a      	ldr	r3, [pc, #616]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 800149e:	499c      	ldr	r1, [pc, #624]	; (8001710 <HAL_RCC_OscConfig+0x340>)
 80014a0:	400a      	ands	r2, r1
 80014a2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d014      	beq.n	80014d6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff fc78 	bl	8000da0 <HAL_GetTick>
 80014b0:	0003      	movs	r3, r0
 80014b2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b6:	f7ff fc73 	bl	8000da0 <HAL_GetTick>
 80014ba:	0002      	movs	r2, r0
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b64      	cmp	r3, #100	; 0x64
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e2f9      	b.n	8001abc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014c8:	4b8f      	ldr	r3, [pc, #572]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	2380      	movs	r3, #128	; 0x80
 80014ce:	029b      	lsls	r3, r3, #10
 80014d0:	4013      	ands	r3, r2
 80014d2:	d0f0      	beq.n	80014b6 <HAL_RCC_OscConfig+0xe6>
 80014d4:	e015      	b.n	8001502 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d6:	f7ff fc63 	bl	8000da0 <HAL_GetTick>
 80014da:	0003      	movs	r3, r0
 80014dc:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e0:	f7ff fc5e 	bl	8000da0 <HAL_GetTick>
 80014e4:	0002      	movs	r2, r0
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b64      	cmp	r3, #100	; 0x64
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e2e4      	b.n	8001abc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014f2:	4b85      	ldr	r3, [pc, #532]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	2380      	movs	r3, #128	; 0x80
 80014f8:	029b      	lsls	r3, r3, #10
 80014fa:	4013      	ands	r3, r2
 80014fc:	d1f0      	bne.n	80014e0 <HAL_RCC_OscConfig+0x110>
 80014fe:	e000      	b.n	8001502 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001500:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2202      	movs	r2, #2
 8001508:	4013      	ands	r3, r2
 800150a:	d100      	bne.n	800150e <HAL_RCC_OscConfig+0x13e>
 800150c:	e099      	b.n	8001642 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	2220      	movs	r2, #32
 8001518:	4013      	ands	r3, r2
 800151a:	d009      	beq.n	8001530 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800151c:	4b7a      	ldr	r3, [pc, #488]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b79      	ldr	r3, [pc, #484]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 8001522:	2120      	movs	r1, #32
 8001524:	430a      	orrs	r2, r1
 8001526:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	2220      	movs	r2, #32
 800152c:	4393      	bics	r3, r2
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	2b04      	cmp	r3, #4
 8001534:	d005      	beq.n	8001542 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	2b0c      	cmp	r3, #12
 800153a:	d13e      	bne.n	80015ba <HAL_RCC_OscConfig+0x1ea>
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d13b      	bne.n	80015ba <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001542:	4b71      	ldr	r3, [pc, #452]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2204      	movs	r2, #4
 8001548:	4013      	ands	r3, r2
 800154a:	d004      	beq.n	8001556 <HAL_RCC_OscConfig+0x186>
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e2b2      	b.n	8001abc <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001556:	4b6c      	ldr	r3, [pc, #432]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	4a6e      	ldr	r2, [pc, #440]	; (8001714 <HAL_RCC_OscConfig+0x344>)
 800155c:	4013      	ands	r3, r2
 800155e:	0019      	movs	r1, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	021a      	lsls	r2, r3, #8
 8001566:	4b68      	ldr	r3, [pc, #416]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 8001568:	430a      	orrs	r2, r1
 800156a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800156c:	4b66      	ldr	r3, [pc, #408]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2209      	movs	r2, #9
 8001572:	4393      	bics	r3, r2
 8001574:	0019      	movs	r1, r3
 8001576:	4b64      	ldr	r3, [pc, #400]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 8001578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800157a:	430a      	orrs	r2, r1
 800157c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800157e:	f000 fbeb 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 8001582:	0001      	movs	r1, r0
 8001584:	4b60      	ldr	r3, [pc, #384]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	091b      	lsrs	r3, r3, #4
 800158a:	220f      	movs	r2, #15
 800158c:	4013      	ands	r3, r2
 800158e:	4a62      	ldr	r2, [pc, #392]	; (8001718 <HAL_RCC_OscConfig+0x348>)
 8001590:	5cd3      	ldrb	r3, [r2, r3]
 8001592:	000a      	movs	r2, r1
 8001594:	40da      	lsrs	r2, r3
 8001596:	4b61      	ldr	r3, [pc, #388]	; (800171c <HAL_RCC_OscConfig+0x34c>)
 8001598:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800159a:	4b61      	ldr	r3, [pc, #388]	; (8001720 <HAL_RCC_OscConfig+0x350>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2513      	movs	r5, #19
 80015a0:	197c      	adds	r4, r7, r5
 80015a2:	0018      	movs	r0, r3
 80015a4:	f7ff fbb6 	bl	8000d14 <HAL_InitTick>
 80015a8:	0003      	movs	r3, r0
 80015aa:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80015ac:	197b      	adds	r3, r7, r5
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d046      	beq.n	8001642 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80015b4:	197b      	adds	r3, r7, r5
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	e280      	b.n	8001abc <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d027      	beq.n	8001610 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80015c0:	4b51      	ldr	r3, [pc, #324]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2209      	movs	r2, #9
 80015c6:	4393      	bics	r3, r2
 80015c8:	0019      	movs	r1, r3
 80015ca:	4b4f      	ldr	r3, [pc, #316]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 80015cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ce:	430a      	orrs	r2, r1
 80015d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d2:	f7ff fbe5 	bl	8000da0 <HAL_GetTick>
 80015d6:	0003      	movs	r3, r0
 80015d8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015dc:	f7ff fbe0 	bl	8000da0 <HAL_GetTick>
 80015e0:	0002      	movs	r2, r0
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e266      	b.n	8001abc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015ee:	4b46      	ldr	r3, [pc, #280]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2204      	movs	r2, #4
 80015f4:	4013      	ands	r3, r2
 80015f6:	d0f1      	beq.n	80015dc <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f8:	4b43      	ldr	r3, [pc, #268]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	4a45      	ldr	r2, [pc, #276]	; (8001714 <HAL_RCC_OscConfig+0x344>)
 80015fe:	4013      	ands	r3, r2
 8001600:	0019      	movs	r1, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	021a      	lsls	r2, r3, #8
 8001608:	4b3f      	ldr	r3, [pc, #252]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 800160a:	430a      	orrs	r2, r1
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	e018      	b.n	8001642 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001610:	4b3d      	ldr	r3, [pc, #244]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b3c      	ldr	r3, [pc, #240]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 8001616:	2101      	movs	r1, #1
 8001618:	438a      	bics	r2, r1
 800161a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161c:	f7ff fbc0 	bl	8000da0 <HAL_GetTick>
 8001620:	0003      	movs	r3, r0
 8001622:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001626:	f7ff fbbb 	bl	8000da0 <HAL_GetTick>
 800162a:	0002      	movs	r2, r0
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e241      	b.n	8001abc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001638:	4b33      	ldr	r3, [pc, #204]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2204      	movs	r2, #4
 800163e:	4013      	ands	r3, r2
 8001640:	d1f1      	bne.n	8001626 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2210      	movs	r2, #16
 8001648:	4013      	ands	r3, r2
 800164a:	d100      	bne.n	800164e <HAL_RCC_OscConfig+0x27e>
 800164c:	e0a1      	b.n	8001792 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d140      	bne.n	80016d6 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001654:	4b2c      	ldr	r3, [pc, #176]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4013      	ands	r3, r2
 800165e:	d005      	beq.n	800166c <HAL_RCC_OscConfig+0x29c>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e227      	b.n	8001abc <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800166c:	4b26      	ldr	r3, [pc, #152]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	4a2c      	ldr	r2, [pc, #176]	; (8001724 <HAL_RCC_OscConfig+0x354>)
 8001672:	4013      	ands	r3, r2
 8001674:	0019      	movs	r1, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a1a      	ldr	r2, [r3, #32]
 800167a:	4b23      	ldr	r3, [pc, #140]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 800167c:	430a      	orrs	r2, r1
 800167e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001680:	4b21      	ldr	r3, [pc, #132]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	021b      	lsls	r3, r3, #8
 8001686:	0a19      	lsrs	r1, r3, #8
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	69db      	ldr	r3, [r3, #28]
 800168c:	061a      	lsls	r2, r3, #24
 800168e:	4b1e      	ldr	r3, [pc, #120]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 8001690:	430a      	orrs	r2, r1
 8001692:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	0b5b      	lsrs	r3, r3, #13
 800169a:	3301      	adds	r3, #1
 800169c:	2280      	movs	r2, #128	; 0x80
 800169e:	0212      	lsls	r2, r2, #8
 80016a0:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80016a2:	4b19      	ldr	r3, [pc, #100]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	091b      	lsrs	r3, r3, #4
 80016a8:	210f      	movs	r1, #15
 80016aa:	400b      	ands	r3, r1
 80016ac:	491a      	ldr	r1, [pc, #104]	; (8001718 <HAL_RCC_OscConfig+0x348>)
 80016ae:	5ccb      	ldrb	r3, [r1, r3]
 80016b0:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80016b2:	4b1a      	ldr	r3, [pc, #104]	; (800171c <HAL_RCC_OscConfig+0x34c>)
 80016b4:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80016b6:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <HAL_RCC_OscConfig+0x350>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2513      	movs	r5, #19
 80016bc:	197c      	adds	r4, r7, r5
 80016be:	0018      	movs	r0, r3
 80016c0:	f7ff fb28 	bl	8000d14 <HAL_InitTick>
 80016c4:	0003      	movs	r3, r0
 80016c6:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80016c8:	197b      	adds	r3, r7, r5
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d060      	beq.n	8001792 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80016d0:	197b      	adds	r3, r7, r5
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	e1f2      	b.n	8001abc <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d03f      	beq.n	800175e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016de:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <HAL_RCC_OscConfig+0x338>)
 80016e4:	2180      	movs	r1, #128	; 0x80
 80016e6:	0049      	lsls	r1, r1, #1
 80016e8:	430a      	orrs	r2, r1
 80016ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ec:	f7ff fb58 	bl	8000da0 <HAL_GetTick>
 80016f0:	0003      	movs	r3, r0
 80016f2:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016f4:	e018      	b.n	8001728 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016f6:	f7ff fb53 	bl	8000da0 <HAL_GetTick>
 80016fa:	0002      	movs	r2, r0
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d911      	bls.n	8001728 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e1d9      	b.n	8001abc <HAL_RCC_OscConfig+0x6ec>
 8001708:	40021000 	.word	0x40021000
 800170c:	fffeffff 	.word	0xfffeffff
 8001710:	fffbffff 	.word	0xfffbffff
 8001714:	ffffe0ff 	.word	0xffffe0ff
 8001718:	08003938 	.word	0x08003938
 800171c:	20000018 	.word	0x20000018
 8001720:	2000001c 	.word	0x2000001c
 8001724:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001728:	4bc9      	ldr	r3, [pc, #804]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4013      	ands	r3, r2
 8001732:	d0e0      	beq.n	80016f6 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001734:	4bc6      	ldr	r3, [pc, #792]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	4ac6      	ldr	r2, [pc, #792]	; (8001a54 <HAL_RCC_OscConfig+0x684>)
 800173a:	4013      	ands	r3, r2
 800173c:	0019      	movs	r1, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a1a      	ldr	r2, [r3, #32]
 8001742:	4bc3      	ldr	r3, [pc, #780]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 8001744:	430a      	orrs	r2, r1
 8001746:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001748:	4bc1      	ldr	r3, [pc, #772]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	021b      	lsls	r3, r3, #8
 800174e:	0a19      	lsrs	r1, r3, #8
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	061a      	lsls	r2, r3, #24
 8001756:	4bbe      	ldr	r3, [pc, #760]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 8001758:	430a      	orrs	r2, r1
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	e019      	b.n	8001792 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800175e:	4bbc      	ldr	r3, [pc, #752]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	4bbb      	ldr	r3, [pc, #748]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 8001764:	49bc      	ldr	r1, [pc, #752]	; (8001a58 <HAL_RCC_OscConfig+0x688>)
 8001766:	400a      	ands	r2, r1
 8001768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176a:	f7ff fb19 	bl	8000da0 <HAL_GetTick>
 800176e:	0003      	movs	r3, r0
 8001770:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001774:	f7ff fb14 	bl	8000da0 <HAL_GetTick>
 8001778:	0002      	movs	r2, r0
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e19a      	b.n	8001abc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001786:	4bb2      	ldr	r3, [pc, #712]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	2380      	movs	r3, #128	; 0x80
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4013      	ands	r3, r2
 8001790:	d1f0      	bne.n	8001774 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2208      	movs	r2, #8
 8001798:	4013      	ands	r3, r2
 800179a:	d036      	beq.n	800180a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d019      	beq.n	80017d8 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017a4:	4baa      	ldr	r3, [pc, #680]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 80017a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017a8:	4ba9      	ldr	r3, [pc, #676]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 80017aa:	2101      	movs	r1, #1
 80017ac:	430a      	orrs	r2, r1
 80017ae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b0:	f7ff faf6 	bl	8000da0 <HAL_GetTick>
 80017b4:	0003      	movs	r3, r0
 80017b6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ba:	f7ff faf1 	bl	8000da0 <HAL_GetTick>
 80017be:	0002      	movs	r2, r0
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e177      	b.n	8001abc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017cc:	4ba0      	ldr	r3, [pc, #640]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 80017ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017d0:	2202      	movs	r2, #2
 80017d2:	4013      	ands	r3, r2
 80017d4:	d0f1      	beq.n	80017ba <HAL_RCC_OscConfig+0x3ea>
 80017d6:	e018      	b.n	800180a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d8:	4b9d      	ldr	r3, [pc, #628]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 80017da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017dc:	4b9c      	ldr	r3, [pc, #624]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 80017de:	2101      	movs	r1, #1
 80017e0:	438a      	bics	r2, r1
 80017e2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e4:	f7ff fadc 	bl	8000da0 <HAL_GetTick>
 80017e8:	0003      	movs	r3, r0
 80017ea:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ee:	f7ff fad7 	bl	8000da0 <HAL_GetTick>
 80017f2:	0002      	movs	r2, r0
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e15d      	b.n	8001abc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001800:	4b93      	ldr	r3, [pc, #588]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 8001802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001804:	2202      	movs	r2, #2
 8001806:	4013      	ands	r3, r2
 8001808:	d1f1      	bne.n	80017ee <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2204      	movs	r2, #4
 8001810:	4013      	ands	r3, r2
 8001812:	d100      	bne.n	8001816 <HAL_RCC_OscConfig+0x446>
 8001814:	e0ae      	b.n	8001974 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001816:	2023      	movs	r0, #35	; 0x23
 8001818:	183b      	adds	r3, r7, r0
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800181e:	4b8c      	ldr	r3, [pc, #560]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 8001820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001822:	2380      	movs	r3, #128	; 0x80
 8001824:	055b      	lsls	r3, r3, #21
 8001826:	4013      	ands	r3, r2
 8001828:	d109      	bne.n	800183e <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800182a:	4b89      	ldr	r3, [pc, #548]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 800182c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800182e:	4b88      	ldr	r3, [pc, #544]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 8001830:	2180      	movs	r1, #128	; 0x80
 8001832:	0549      	lsls	r1, r1, #21
 8001834:	430a      	orrs	r2, r1
 8001836:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001838:	183b      	adds	r3, r7, r0
 800183a:	2201      	movs	r2, #1
 800183c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183e:	4b87      	ldr	r3, [pc, #540]	; (8001a5c <HAL_RCC_OscConfig+0x68c>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	2380      	movs	r3, #128	; 0x80
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4013      	ands	r3, r2
 8001848:	d11a      	bne.n	8001880 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800184a:	4b84      	ldr	r3, [pc, #528]	; (8001a5c <HAL_RCC_OscConfig+0x68c>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	4b83      	ldr	r3, [pc, #524]	; (8001a5c <HAL_RCC_OscConfig+0x68c>)
 8001850:	2180      	movs	r1, #128	; 0x80
 8001852:	0049      	lsls	r1, r1, #1
 8001854:	430a      	orrs	r2, r1
 8001856:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001858:	f7ff faa2 	bl	8000da0 <HAL_GetTick>
 800185c:	0003      	movs	r3, r0
 800185e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001862:	f7ff fa9d 	bl	8000da0 <HAL_GetTick>
 8001866:	0002      	movs	r2, r0
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b64      	cmp	r3, #100	; 0x64
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e123      	b.n	8001abc <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001874:	4b79      	ldr	r3, [pc, #484]	; (8001a5c <HAL_RCC_OscConfig+0x68c>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	4013      	ands	r3, r2
 800187e:	d0f0      	beq.n	8001862 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	2380      	movs	r3, #128	; 0x80
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	429a      	cmp	r2, r3
 800188a:	d107      	bne.n	800189c <HAL_RCC_OscConfig+0x4cc>
 800188c:	4b70      	ldr	r3, [pc, #448]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 800188e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001890:	4b6f      	ldr	r3, [pc, #444]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 8001892:	2180      	movs	r1, #128	; 0x80
 8001894:	0049      	lsls	r1, r1, #1
 8001896:	430a      	orrs	r2, r1
 8001898:	651a      	str	r2, [r3, #80]	; 0x50
 800189a:	e031      	b.n	8001900 <HAL_RCC_OscConfig+0x530>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d10c      	bne.n	80018be <HAL_RCC_OscConfig+0x4ee>
 80018a4:	4b6a      	ldr	r3, [pc, #424]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 80018a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018a8:	4b69      	ldr	r3, [pc, #420]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 80018aa:	496b      	ldr	r1, [pc, #428]	; (8001a58 <HAL_RCC_OscConfig+0x688>)
 80018ac:	400a      	ands	r2, r1
 80018ae:	651a      	str	r2, [r3, #80]	; 0x50
 80018b0:	4b67      	ldr	r3, [pc, #412]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 80018b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018b4:	4b66      	ldr	r3, [pc, #408]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 80018b6:	496a      	ldr	r1, [pc, #424]	; (8001a60 <HAL_RCC_OscConfig+0x690>)
 80018b8:	400a      	ands	r2, r1
 80018ba:	651a      	str	r2, [r3, #80]	; 0x50
 80018bc:	e020      	b.n	8001900 <HAL_RCC_OscConfig+0x530>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	23a0      	movs	r3, #160	; 0xa0
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d10e      	bne.n	80018e8 <HAL_RCC_OscConfig+0x518>
 80018ca:	4b61      	ldr	r3, [pc, #388]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 80018cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018ce:	4b60      	ldr	r3, [pc, #384]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 80018d0:	2180      	movs	r1, #128	; 0x80
 80018d2:	00c9      	lsls	r1, r1, #3
 80018d4:	430a      	orrs	r2, r1
 80018d6:	651a      	str	r2, [r3, #80]	; 0x50
 80018d8:	4b5d      	ldr	r3, [pc, #372]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 80018da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018dc:	4b5c      	ldr	r3, [pc, #368]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 80018de:	2180      	movs	r1, #128	; 0x80
 80018e0:	0049      	lsls	r1, r1, #1
 80018e2:	430a      	orrs	r2, r1
 80018e4:	651a      	str	r2, [r3, #80]	; 0x50
 80018e6:	e00b      	b.n	8001900 <HAL_RCC_OscConfig+0x530>
 80018e8:	4b59      	ldr	r3, [pc, #356]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 80018ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018ec:	4b58      	ldr	r3, [pc, #352]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 80018ee:	495a      	ldr	r1, [pc, #360]	; (8001a58 <HAL_RCC_OscConfig+0x688>)
 80018f0:	400a      	ands	r2, r1
 80018f2:	651a      	str	r2, [r3, #80]	; 0x50
 80018f4:	4b56      	ldr	r3, [pc, #344]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 80018f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018f8:	4b55      	ldr	r3, [pc, #340]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 80018fa:	4959      	ldr	r1, [pc, #356]	; (8001a60 <HAL_RCC_OscConfig+0x690>)
 80018fc:	400a      	ands	r2, r1
 80018fe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d015      	beq.n	8001934 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001908:	f7ff fa4a 	bl	8000da0 <HAL_GetTick>
 800190c:	0003      	movs	r3, r0
 800190e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001910:	e009      	b.n	8001926 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001912:	f7ff fa45 	bl	8000da0 <HAL_GetTick>
 8001916:	0002      	movs	r2, r0
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	4a51      	ldr	r2, [pc, #324]	; (8001a64 <HAL_RCC_OscConfig+0x694>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e0ca      	b.n	8001abc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001926:	4b4a      	ldr	r3, [pc, #296]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 8001928:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800192a:	2380      	movs	r3, #128	; 0x80
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4013      	ands	r3, r2
 8001930:	d0ef      	beq.n	8001912 <HAL_RCC_OscConfig+0x542>
 8001932:	e014      	b.n	800195e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001934:	f7ff fa34 	bl	8000da0 <HAL_GetTick>
 8001938:	0003      	movs	r3, r0
 800193a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800193c:	e009      	b.n	8001952 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800193e:	f7ff fa2f 	bl	8000da0 <HAL_GetTick>
 8001942:	0002      	movs	r2, r0
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	4a46      	ldr	r2, [pc, #280]	; (8001a64 <HAL_RCC_OscConfig+0x694>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e0b4      	b.n	8001abc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001952:	4b3f      	ldr	r3, [pc, #252]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 8001954:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001956:	2380      	movs	r3, #128	; 0x80
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4013      	ands	r3, r2
 800195c:	d1ef      	bne.n	800193e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800195e:	2323      	movs	r3, #35	; 0x23
 8001960:	18fb      	adds	r3, r7, r3
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d105      	bne.n	8001974 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001968:	4b39      	ldr	r3, [pc, #228]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 800196a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800196c:	4b38      	ldr	r3, [pc, #224]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 800196e:	493e      	ldr	r1, [pc, #248]	; (8001a68 <HAL_RCC_OscConfig+0x698>)
 8001970:	400a      	ands	r2, r1
 8001972:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	2b00      	cmp	r3, #0
 800197a:	d100      	bne.n	800197e <HAL_RCC_OscConfig+0x5ae>
 800197c:	e09d      	b.n	8001aba <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	2b0c      	cmp	r3, #12
 8001982:	d100      	bne.n	8001986 <HAL_RCC_OscConfig+0x5b6>
 8001984:	e076      	b.n	8001a74 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198a:	2b02      	cmp	r3, #2
 800198c:	d145      	bne.n	8001a1a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198e:	4b30      	ldr	r3, [pc, #192]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	4b2f      	ldr	r3, [pc, #188]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 8001994:	4935      	ldr	r1, [pc, #212]	; (8001a6c <HAL_RCC_OscConfig+0x69c>)
 8001996:	400a      	ands	r2, r1
 8001998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199a:	f7ff fa01 	bl	8000da0 <HAL_GetTick>
 800199e:	0003      	movs	r3, r0
 80019a0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a4:	f7ff f9fc 	bl	8000da0 <HAL_GetTick>
 80019a8:	0002      	movs	r2, r0
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e082      	b.n	8001abc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019b6:	4b26      	ldr	r3, [pc, #152]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	2380      	movs	r3, #128	; 0x80
 80019bc:	049b      	lsls	r3, r3, #18
 80019be:	4013      	ands	r3, r2
 80019c0:	d1f0      	bne.n	80019a4 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019c2:	4b23      	ldr	r3, [pc, #140]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	4a2a      	ldr	r2, [pc, #168]	; (8001a70 <HAL_RCC_OscConfig+0x6a0>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	0019      	movs	r1, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d4:	431a      	orrs	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	431a      	orrs	r2, r3
 80019dc:	4b1c      	ldr	r3, [pc, #112]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 80019de:	430a      	orrs	r2, r1
 80019e0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e2:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	4b1a      	ldr	r3, [pc, #104]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 80019e8:	2180      	movs	r1, #128	; 0x80
 80019ea:	0449      	lsls	r1, r1, #17
 80019ec:	430a      	orrs	r2, r1
 80019ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f0:	f7ff f9d6 	bl	8000da0 <HAL_GetTick>
 80019f4:	0003      	movs	r3, r0
 80019f6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019fa:	f7ff f9d1 	bl	8000da0 <HAL_GetTick>
 80019fe:	0002      	movs	r2, r0
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e057      	b.n	8001abc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001a0c:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	049b      	lsls	r3, r3, #18
 8001a14:	4013      	ands	r3, r2
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x62a>
 8001a18:	e04f      	b.n	8001aba <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 8001a20:	4912      	ldr	r1, [pc, #72]	; (8001a6c <HAL_RCC_OscConfig+0x69c>)
 8001a22:	400a      	ands	r2, r1
 8001a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a26:	f7ff f9bb 	bl	8000da0 <HAL_GetTick>
 8001a2a:	0003      	movs	r3, r0
 8001a2c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a30:	f7ff f9b6 	bl	8000da0 <HAL_GetTick>
 8001a34:	0002      	movs	r2, r0
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e03c      	b.n	8001abc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a42:	4b03      	ldr	r3, [pc, #12]	; (8001a50 <HAL_RCC_OscConfig+0x680>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	049b      	lsls	r3, r3, #18
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d1f0      	bne.n	8001a30 <HAL_RCC_OscConfig+0x660>
 8001a4e:	e034      	b.n	8001aba <HAL_RCC_OscConfig+0x6ea>
 8001a50:	40021000 	.word	0x40021000
 8001a54:	ffff1fff 	.word	0xffff1fff
 8001a58:	fffffeff 	.word	0xfffffeff
 8001a5c:	40007000 	.word	0x40007000
 8001a60:	fffffbff 	.word	0xfffffbff
 8001a64:	00001388 	.word	0x00001388
 8001a68:	efffffff 	.word	0xefffffff
 8001a6c:	feffffff 	.word	0xfeffffff
 8001a70:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d101      	bne.n	8001a80 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e01d      	b.n	8001abc <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a80:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <HAL_RCC_OscConfig+0x6f4>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	025b      	lsls	r3, r3, #9
 8001a8c:	401a      	ands	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d10f      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	23f0      	movs	r3, #240	; 0xf0
 8001a9a:	039b      	lsls	r3, r3, #14
 8001a9c:	401a      	ands	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d107      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	23c0      	movs	r3, #192	; 0xc0
 8001aaa:	041b      	lsls	r3, r3, #16
 8001aac:	401a      	ands	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d001      	beq.n	8001aba <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e000      	b.n	8001abc <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	0018      	movs	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b00a      	add	sp, #40	; 0x28
 8001ac2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ac4:	40021000 	.word	0x40021000

08001ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac8:	b5b0      	push	{r4, r5, r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e128      	b.n	8001d2e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001adc:	4b96      	ldr	r3, [pc, #600]	; (8001d38 <HAL_RCC_ClockConfig+0x270>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d91e      	bls.n	8001b28 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aea:	4b93      	ldr	r3, [pc, #588]	; (8001d38 <HAL_RCC_ClockConfig+0x270>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2201      	movs	r2, #1
 8001af0:	4393      	bics	r3, r2
 8001af2:	0019      	movs	r1, r3
 8001af4:	4b90      	ldr	r3, [pc, #576]	; (8001d38 <HAL_RCC_ClockConfig+0x270>)
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	430a      	orrs	r2, r1
 8001afa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001afc:	f7ff f950 	bl	8000da0 <HAL_GetTick>
 8001b00:	0003      	movs	r3, r0
 8001b02:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b04:	e009      	b.n	8001b1a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b06:	f7ff f94b 	bl	8000da0 <HAL_GetTick>
 8001b0a:	0002      	movs	r2, r0
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	4a8a      	ldr	r2, [pc, #552]	; (8001d3c <HAL_RCC_ClockConfig+0x274>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e109      	b.n	8001d2e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1a:	4b87      	ldr	r3, [pc, #540]	; (8001d38 <HAL_RCC_ClockConfig+0x270>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	4013      	ands	r3, r2
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d1ee      	bne.n	8001b06 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d009      	beq.n	8001b46 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b32:	4b83      	ldr	r3, [pc, #524]	; (8001d40 <HAL_RCC_ClockConfig+0x278>)
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	22f0      	movs	r2, #240	; 0xf0
 8001b38:	4393      	bics	r3, r2
 8001b3a:	0019      	movs	r1, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	4b7f      	ldr	r3, [pc, #508]	; (8001d40 <HAL_RCC_ClockConfig+0x278>)
 8001b42:	430a      	orrs	r2, r1
 8001b44:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d100      	bne.n	8001b52 <HAL_RCC_ClockConfig+0x8a>
 8001b50:	e089      	b.n	8001c66 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d107      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b5a:	4b79      	ldr	r3, [pc, #484]	; (8001d40 <HAL_RCC_ClockConfig+0x278>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	2380      	movs	r3, #128	; 0x80
 8001b60:	029b      	lsls	r3, r3, #10
 8001b62:	4013      	ands	r3, r2
 8001b64:	d120      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e0e1      	b.n	8001d2e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b03      	cmp	r3, #3
 8001b70:	d107      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b72:	4b73      	ldr	r3, [pc, #460]	; (8001d40 <HAL_RCC_ClockConfig+0x278>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	2380      	movs	r3, #128	; 0x80
 8001b78:	049b      	lsls	r3, r3, #18
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d114      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e0d5      	b.n	8001d2e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d106      	bne.n	8001b98 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b8a:	4b6d      	ldr	r3, [pc, #436]	; (8001d40 <HAL_RCC_ClockConfig+0x278>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2204      	movs	r2, #4
 8001b90:	4013      	ands	r3, r2
 8001b92:	d109      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e0ca      	b.n	8001d2e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b98:	4b69      	ldr	r3, [pc, #420]	; (8001d40 <HAL_RCC_ClockConfig+0x278>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	2380      	movs	r3, #128	; 0x80
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0c2      	b.n	8001d2e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ba8:	4b65      	ldr	r3, [pc, #404]	; (8001d40 <HAL_RCC_ClockConfig+0x278>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	2203      	movs	r2, #3
 8001bae:	4393      	bics	r3, r2
 8001bb0:	0019      	movs	r1, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	4b62      	ldr	r3, [pc, #392]	; (8001d40 <HAL_RCC_ClockConfig+0x278>)
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bbc:	f7ff f8f0 	bl	8000da0 <HAL_GetTick>
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d111      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bcc:	e009      	b.n	8001be2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bce:	f7ff f8e7 	bl	8000da0 <HAL_GetTick>
 8001bd2:	0002      	movs	r2, r0
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	4a58      	ldr	r2, [pc, #352]	; (8001d3c <HAL_RCC_ClockConfig+0x274>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e0a5      	b.n	8001d2e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001be2:	4b57      	ldr	r3, [pc, #348]	; (8001d40 <HAL_RCC_ClockConfig+0x278>)
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	220c      	movs	r2, #12
 8001be8:	4013      	ands	r3, r2
 8001bea:	2b08      	cmp	r3, #8
 8001bec:	d1ef      	bne.n	8001bce <HAL_RCC_ClockConfig+0x106>
 8001bee:	e03a      	b.n	8001c66 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b03      	cmp	r3, #3
 8001bf6:	d111      	bne.n	8001c1c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bf8:	e009      	b.n	8001c0e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bfa:	f7ff f8d1 	bl	8000da0 <HAL_GetTick>
 8001bfe:	0002      	movs	r2, r0
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	4a4d      	ldr	r2, [pc, #308]	; (8001d3c <HAL_RCC_ClockConfig+0x274>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e08f      	b.n	8001d2e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c0e:	4b4c      	ldr	r3, [pc, #304]	; (8001d40 <HAL_RCC_ClockConfig+0x278>)
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	220c      	movs	r2, #12
 8001c14:	4013      	ands	r3, r2
 8001c16:	2b0c      	cmp	r3, #12
 8001c18:	d1ef      	bne.n	8001bfa <HAL_RCC_ClockConfig+0x132>
 8001c1a:	e024      	b.n	8001c66 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d11b      	bne.n	8001c5c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c24:	e009      	b.n	8001c3a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c26:	f7ff f8bb 	bl	8000da0 <HAL_GetTick>
 8001c2a:	0002      	movs	r2, r0
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	4a42      	ldr	r2, [pc, #264]	; (8001d3c <HAL_RCC_ClockConfig+0x274>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e079      	b.n	8001d2e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c3a:	4b41      	ldr	r3, [pc, #260]	; (8001d40 <HAL_RCC_ClockConfig+0x278>)
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	220c      	movs	r2, #12
 8001c40:	4013      	ands	r3, r2
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	d1ef      	bne.n	8001c26 <HAL_RCC_ClockConfig+0x15e>
 8001c46:	e00e      	b.n	8001c66 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c48:	f7ff f8aa 	bl	8000da0 <HAL_GetTick>
 8001c4c:	0002      	movs	r2, r0
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	4a3a      	ldr	r2, [pc, #232]	; (8001d3c <HAL_RCC_ClockConfig+0x274>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e068      	b.n	8001d2e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c5c:	4b38      	ldr	r3, [pc, #224]	; (8001d40 <HAL_RCC_ClockConfig+0x278>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	220c      	movs	r2, #12
 8001c62:	4013      	ands	r3, r2
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c66:	4b34      	ldr	r3, [pc, #208]	; (8001d38 <HAL_RCC_ClockConfig+0x270>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d21e      	bcs.n	8001cb2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c74:	4b30      	ldr	r3, [pc, #192]	; (8001d38 <HAL_RCC_ClockConfig+0x270>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	4393      	bics	r3, r2
 8001c7c:	0019      	movs	r1, r3
 8001c7e:	4b2e      	ldr	r3, [pc, #184]	; (8001d38 <HAL_RCC_ClockConfig+0x270>)
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c86:	f7ff f88b 	bl	8000da0 <HAL_GetTick>
 8001c8a:	0003      	movs	r3, r0
 8001c8c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8e:	e009      	b.n	8001ca4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c90:	f7ff f886 	bl	8000da0 <HAL_GetTick>
 8001c94:	0002      	movs	r2, r0
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	4a28      	ldr	r2, [pc, #160]	; (8001d3c <HAL_RCC_ClockConfig+0x274>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e044      	b.n	8001d2e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca4:	4b24      	ldr	r3, [pc, #144]	; (8001d38 <HAL_RCC_ClockConfig+0x270>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	4013      	ands	r3, r2
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d1ee      	bne.n	8001c90 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2204      	movs	r2, #4
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d009      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cbc:	4b20      	ldr	r3, [pc, #128]	; (8001d40 <HAL_RCC_ClockConfig+0x278>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	4a20      	ldr	r2, [pc, #128]	; (8001d44 <HAL_RCC_ClockConfig+0x27c>)
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	0019      	movs	r1, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <HAL_RCC_ClockConfig+0x278>)
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2208      	movs	r2, #8
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d00a      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cda:	4b19      	ldr	r3, [pc, #100]	; (8001d40 <HAL_RCC_ClockConfig+0x278>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	4a1a      	ldr	r2, [pc, #104]	; (8001d48 <HAL_RCC_ClockConfig+0x280>)
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	0019      	movs	r1, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	00da      	lsls	r2, r3, #3
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <HAL_RCC_ClockConfig+0x278>)
 8001cec:	430a      	orrs	r2, r1
 8001cee:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cf0:	f000 f832 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 8001cf4:	0001      	movs	r1, r0
 8001cf6:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <HAL_RCC_ClockConfig+0x278>)
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	091b      	lsrs	r3, r3, #4
 8001cfc:	220f      	movs	r2, #15
 8001cfe:	4013      	ands	r3, r2
 8001d00:	4a12      	ldr	r2, [pc, #72]	; (8001d4c <HAL_RCC_ClockConfig+0x284>)
 8001d02:	5cd3      	ldrb	r3, [r2, r3]
 8001d04:	000a      	movs	r2, r1
 8001d06:	40da      	lsrs	r2, r3
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <HAL_RCC_ClockConfig+0x288>)
 8001d0a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <HAL_RCC_ClockConfig+0x28c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	250b      	movs	r5, #11
 8001d12:	197c      	adds	r4, r7, r5
 8001d14:	0018      	movs	r0, r3
 8001d16:	f7fe fffd 	bl	8000d14 <HAL_InitTick>
 8001d1a:	0003      	movs	r3, r0
 8001d1c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001d1e:	197b      	adds	r3, r7, r5
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d002      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001d26:	197b      	adds	r3, r7, r5
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	e000      	b.n	8001d2e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	0018      	movs	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	b004      	add	sp, #16
 8001d34:	bdb0      	pop	{r4, r5, r7, pc}
 8001d36:	46c0      	nop			; (mov r8, r8)
 8001d38:	40022000 	.word	0x40022000
 8001d3c:	00001388 	.word	0x00001388
 8001d40:	40021000 	.word	0x40021000
 8001d44:	fffff8ff 	.word	0xfffff8ff
 8001d48:	ffffc7ff 	.word	0xffffc7ff
 8001d4c:	08003938 	.word	0x08003938
 8001d50:	20000018 	.word	0x20000018
 8001d54:	2000001c 	.word	0x2000001c

08001d58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d58:	b5b0      	push	{r4, r5, r7, lr}
 8001d5a:	b08e      	sub	sp, #56	; 0x38
 8001d5c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001d5e:	4b4c      	ldr	r3, [pc, #304]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d66:	230c      	movs	r3, #12
 8001d68:	4013      	ands	r3, r2
 8001d6a:	2b0c      	cmp	r3, #12
 8001d6c:	d014      	beq.n	8001d98 <HAL_RCC_GetSysClockFreq+0x40>
 8001d6e:	d900      	bls.n	8001d72 <HAL_RCC_GetSysClockFreq+0x1a>
 8001d70:	e07b      	b.n	8001e6a <HAL_RCC_GetSysClockFreq+0x112>
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	d002      	beq.n	8001d7c <HAL_RCC_GetSysClockFreq+0x24>
 8001d76:	2b08      	cmp	r3, #8
 8001d78:	d00b      	beq.n	8001d92 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d7a:	e076      	b.n	8001e6a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d7c:	4b44      	ldr	r3, [pc, #272]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2210      	movs	r2, #16
 8001d82:	4013      	ands	r3, r2
 8001d84:	d002      	beq.n	8001d8c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001d86:	4b43      	ldr	r3, [pc, #268]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d88:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001d8a:	e07c      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001d8c:	4b42      	ldr	r3, [pc, #264]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x140>)
 8001d8e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d90:	e079      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d92:	4b42      	ldr	r3, [pc, #264]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x144>)
 8001d94:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d96:	e076      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d9a:	0c9a      	lsrs	r2, r3, #18
 8001d9c:	230f      	movs	r3, #15
 8001d9e:	401a      	ands	r2, r3
 8001da0:	4b3f      	ldr	r3, [pc, #252]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x148>)
 8001da2:	5c9b      	ldrb	r3, [r3, r2]
 8001da4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da8:	0d9a      	lsrs	r2, r3, #22
 8001daa:	2303      	movs	r3, #3
 8001dac:	4013      	ands	r3, r2
 8001dae:	3301      	adds	r3, #1
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001db2:	4b37      	ldr	r3, [pc, #220]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x138>)
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	2380      	movs	r3, #128	; 0x80
 8001db8:	025b      	lsls	r3, r3, #9
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d01a      	beq.n	8001df4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc0:	61bb      	str	r3, [r7, #24]
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61fb      	str	r3, [r7, #28]
 8001dc6:	4a35      	ldr	r2, [pc, #212]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x144>)
 8001dc8:	2300      	movs	r3, #0
 8001dca:	69b8      	ldr	r0, [r7, #24]
 8001dcc:	69f9      	ldr	r1, [r7, #28]
 8001dce:	f7fe fa4f 	bl	8000270 <__aeabi_lmul>
 8001dd2:	0002      	movs	r2, r0
 8001dd4:	000b      	movs	r3, r1
 8001dd6:	0010      	movs	r0, r2
 8001dd8:	0019      	movs	r1, r3
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f7fe fa23 	bl	8000230 <__aeabi_uldivmod>
 8001dea:	0002      	movs	r2, r0
 8001dec:	000b      	movs	r3, r1
 8001dee:	0013      	movs	r3, r2
 8001df0:	637b      	str	r3, [r7, #52]	; 0x34
 8001df2:	e037      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001df4:	4b26      	ldr	r3, [pc, #152]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x138>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2210      	movs	r2, #16
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d01a      	beq.n	8001e34 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	4a23      	ldr	r2, [pc, #140]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	68b8      	ldr	r0, [r7, #8]
 8001e0c:	68f9      	ldr	r1, [r7, #12]
 8001e0e:	f7fe fa2f 	bl	8000270 <__aeabi_lmul>
 8001e12:	0002      	movs	r2, r0
 8001e14:	000b      	movs	r3, r1
 8001e16:	0010      	movs	r0, r2
 8001e18:	0019      	movs	r1, r3
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	603b      	str	r3, [r7, #0]
 8001e1e:	2300      	movs	r3, #0
 8001e20:	607b      	str	r3, [r7, #4]
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f7fe fa03 	bl	8000230 <__aeabi_uldivmod>
 8001e2a:	0002      	movs	r2, r0
 8001e2c:	000b      	movs	r3, r1
 8001e2e:	0013      	movs	r3, r2
 8001e30:	637b      	str	r3, [r7, #52]	; 0x34
 8001e32:	e017      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e36:	0018      	movs	r0, r3
 8001e38:	2300      	movs	r3, #0
 8001e3a:	0019      	movs	r1, r3
 8001e3c:	4a16      	ldr	r2, [pc, #88]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x140>)
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f7fe fa16 	bl	8000270 <__aeabi_lmul>
 8001e44:	0002      	movs	r2, r0
 8001e46:	000b      	movs	r3, r1
 8001e48:	0010      	movs	r0, r2
 8001e4a:	0019      	movs	r1, r3
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	001c      	movs	r4, r3
 8001e50:	2300      	movs	r3, #0
 8001e52:	001d      	movs	r5, r3
 8001e54:	0022      	movs	r2, r4
 8001e56:	002b      	movs	r3, r5
 8001e58:	f7fe f9ea 	bl	8000230 <__aeabi_uldivmod>
 8001e5c:	0002      	movs	r2, r0
 8001e5e:	000b      	movs	r3, r1
 8001e60:	0013      	movs	r3, r2
 8001e62:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e66:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e68:	e00d      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	0b5b      	lsrs	r3, r3, #13
 8001e70:	2207      	movs	r2, #7
 8001e72:	4013      	ands	r3, r2
 8001e74:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001e76:	6a3b      	ldr	r3, [r7, #32]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	2280      	movs	r2, #128	; 0x80
 8001e7c:	0212      	lsls	r2, r2, #8
 8001e7e:	409a      	lsls	r2, r3
 8001e80:	0013      	movs	r3, r2
 8001e82:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e84:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001e88:	0018      	movs	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	b00e      	add	sp, #56	; 0x38
 8001e8e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e90:	40021000 	.word	0x40021000
 8001e94:	003d0900 	.word	0x003d0900
 8001e98:	00f42400 	.word	0x00f42400
 8001e9c:	007a1200 	.word	0x007a1200
 8001ea0:	08003950 	.word	0x08003950

08001ea4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ea8:	4b02      	ldr	r3, [pc, #8]	; (8001eb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
}
 8001eac:	0018      	movs	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	20000018 	.word	0x20000018

08001eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ebc:	f7ff fff2 	bl	8001ea4 <HAL_RCC_GetHCLKFreq>
 8001ec0:	0001      	movs	r1, r0
 8001ec2:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	0a1b      	lsrs	r3, r3, #8
 8001ec8:	2207      	movs	r2, #7
 8001eca:	4013      	ands	r3, r2
 8001ecc:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ece:	5cd3      	ldrb	r3, [r2, r3]
 8001ed0:	40d9      	lsrs	r1, r3
 8001ed2:	000b      	movs	r3, r1
}
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	08003948 	.word	0x08003948

08001ee4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ee8:	f7ff ffdc 	bl	8001ea4 <HAL_RCC_GetHCLKFreq>
 8001eec:	0001      	movs	r1, r0
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	0adb      	lsrs	r3, r3, #11
 8001ef4:	2207      	movs	r2, #7
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001efa:	5cd3      	ldrb	r3, [r2, r3]
 8001efc:	40d9      	lsrs	r1, r3
 8001efe:	000b      	movs	r3, r1
}
 8001f00:	0018      	movs	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	46c0      	nop			; (mov r8, r8)
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	08003948 	.word	0x08003948

08001f10 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001f18:	2017      	movs	r0, #23
 8001f1a:	183b      	adds	r3, r7, r0
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2220      	movs	r2, #32
 8001f26:	4013      	ands	r3, r2
 8001f28:	d100      	bne.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001f2a:	e0c2      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f2c:	4b81      	ldr	r3, [pc, #516]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f30:	2380      	movs	r3, #128	; 0x80
 8001f32:	055b      	lsls	r3, r3, #21
 8001f34:	4013      	ands	r3, r2
 8001f36:	d109      	bne.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f38:	4b7e      	ldr	r3, [pc, #504]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f3c:	4b7d      	ldr	r3, [pc, #500]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f3e:	2180      	movs	r1, #128	; 0x80
 8001f40:	0549      	lsls	r1, r1, #21
 8001f42:	430a      	orrs	r2, r1
 8001f44:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001f46:	183b      	adds	r3, r7, r0
 8001f48:	2201      	movs	r2, #1
 8001f4a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4c:	4b7a      	ldr	r3, [pc, #488]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	2380      	movs	r3, #128	; 0x80
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	4013      	ands	r3, r2
 8001f56:	d11a      	bne.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f58:	4b77      	ldr	r3, [pc, #476]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b76      	ldr	r3, [pc, #472]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001f5e:	2180      	movs	r1, #128	; 0x80
 8001f60:	0049      	lsls	r1, r1, #1
 8001f62:	430a      	orrs	r2, r1
 8001f64:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f66:	f7fe ff1b 	bl	8000da0 <HAL_GetTick>
 8001f6a:	0003      	movs	r3, r0
 8001f6c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6e:	e008      	b.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f70:	f7fe ff16 	bl	8000da0 <HAL_GetTick>
 8001f74:	0002      	movs	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b64      	cmp	r3, #100	; 0x64
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e0d4      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f82:	4b6d      	ldr	r3, [pc, #436]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	2380      	movs	r3, #128	; 0x80
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d0f0      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001f8e:	4b69      	ldr	r3, [pc, #420]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	23c0      	movs	r3, #192	; 0xc0
 8001f94:	039b      	lsls	r3, r3, #14
 8001f96:	4013      	ands	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	23c0      	movs	r3, #192	; 0xc0
 8001fa0:	039b      	lsls	r3, r3, #14
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d013      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	23c0      	movs	r3, #192	; 0xc0
 8001fb0:	029b      	lsls	r3, r3, #10
 8001fb2:	401a      	ands	r2, r3
 8001fb4:	23c0      	movs	r3, #192	; 0xc0
 8001fb6:	029b      	lsls	r3, r3, #10
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d10a      	bne.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001fbc:	4b5d      	ldr	r3, [pc, #372]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	029b      	lsls	r3, r3, #10
 8001fc4:	401a      	ands	r2, r3
 8001fc6:	2380      	movs	r3, #128	; 0x80
 8001fc8:	029b      	lsls	r3, r3, #10
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d101      	bne.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e0ac      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001fd2:	4b58      	ldr	r3, [pc, #352]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fd6:	23c0      	movs	r3, #192	; 0xc0
 8001fd8:	029b      	lsls	r3, r3, #10
 8001fda:	4013      	ands	r3, r2
 8001fdc:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d03b      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	23c0      	movs	r3, #192	; 0xc0
 8001fea:	029b      	lsls	r3, r3, #10
 8001fec:	4013      	ands	r3, r2
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d033      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2220      	movs	r2, #32
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d02e      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001ffe:	4b4d      	ldr	r3, [pc, #308]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002002:	4a4e      	ldr	r2, [pc, #312]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002004:	4013      	ands	r3, r2
 8002006:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002008:	4b4a      	ldr	r3, [pc, #296]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800200a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800200c:	4b49      	ldr	r3, [pc, #292]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800200e:	2180      	movs	r1, #128	; 0x80
 8002010:	0309      	lsls	r1, r1, #12
 8002012:	430a      	orrs	r2, r1
 8002014:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002016:	4b47      	ldr	r3, [pc, #284]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002018:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800201a:	4b46      	ldr	r3, [pc, #280]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800201c:	4948      	ldr	r1, [pc, #288]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800201e:	400a      	ands	r2, r1
 8002020:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002022:	4b44      	ldr	r3, [pc, #272]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	4013      	ands	r3, r2
 8002030:	d014      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002032:	f7fe feb5 	bl	8000da0 <HAL_GetTick>
 8002036:	0003      	movs	r3, r0
 8002038:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800203a:	e009      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800203c:	f7fe feb0 	bl	8000da0 <HAL_GetTick>
 8002040:	0002      	movs	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	4a3f      	ldr	r2, [pc, #252]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d901      	bls.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e06d      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002050:	4b38      	ldr	r3, [pc, #224]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002052:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002054:	2380      	movs	r3, #128	; 0x80
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4013      	ands	r3, r2
 800205a:	d0ef      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	23c0      	movs	r3, #192	; 0xc0
 8002062:	029b      	lsls	r3, r3, #10
 8002064:	401a      	ands	r2, r3
 8002066:	23c0      	movs	r3, #192	; 0xc0
 8002068:	029b      	lsls	r3, r3, #10
 800206a:	429a      	cmp	r2, r3
 800206c:	d10c      	bne.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800206e:	4b31      	ldr	r3, [pc, #196]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a35      	ldr	r2, [pc, #212]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002074:	4013      	ands	r3, r2
 8002076:	0019      	movs	r1, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	23c0      	movs	r3, #192	; 0xc0
 800207e:	039b      	lsls	r3, r3, #14
 8002080:	401a      	ands	r2, r3
 8002082:	4b2c      	ldr	r3, [pc, #176]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002084:	430a      	orrs	r2, r1
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	4b2a      	ldr	r3, [pc, #168]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800208a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	23c0      	movs	r3, #192	; 0xc0
 8002092:	029b      	lsls	r3, r3, #10
 8002094:	401a      	ands	r2, r3
 8002096:	4b27      	ldr	r3, [pc, #156]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002098:	430a      	orrs	r2, r1
 800209a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800209c:	2317      	movs	r3, #23
 800209e:	18fb      	adds	r3, r7, r3
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d105      	bne.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a6:	4b23      	ldr	r3, [pc, #140]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80020a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020aa:	4b22      	ldr	r3, [pc, #136]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80020ac:	4927      	ldr	r1, [pc, #156]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80020ae:	400a      	ands	r2, r1
 80020b0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2202      	movs	r2, #2
 80020b8:	4013      	ands	r3, r2
 80020ba:	d009      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020bc:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80020be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c0:	220c      	movs	r2, #12
 80020c2:	4393      	bics	r3, r2
 80020c4:	0019      	movs	r1, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689a      	ldr	r2, [r3, #8]
 80020ca:	4b1a      	ldr	r3, [pc, #104]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80020cc:	430a      	orrs	r2, r1
 80020ce:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2204      	movs	r2, #4
 80020d6:	4013      	ands	r3, r2
 80020d8:	d009      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020da:	4b16      	ldr	r3, [pc, #88]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80020dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020de:	4a1c      	ldr	r2, [pc, #112]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80020e0:	4013      	ands	r3, r2
 80020e2:	0019      	movs	r1, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68da      	ldr	r2, [r3, #12]
 80020e8:	4b12      	ldr	r3, [pc, #72]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80020ea:	430a      	orrs	r2, r1
 80020ec:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2208      	movs	r2, #8
 80020f4:	4013      	ands	r3, r2
 80020f6:	d009      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020f8:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80020fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fc:	4a15      	ldr	r2, [pc, #84]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80020fe:	4013      	ands	r3, r2
 8002100:	0019      	movs	r1, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	691a      	ldr	r2, [r3, #16]
 8002106:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002108:	430a      	orrs	r2, r1
 800210a:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2280      	movs	r2, #128	; 0x80
 8002112:	4013      	ands	r3, r2
 8002114:	d009      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002116:	4b07      	ldr	r3, [pc, #28]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211a:	4a0f      	ldr	r2, [pc, #60]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800211c:	4013      	ands	r3, r2
 800211e:	0019      	movs	r1, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	695a      	ldr	r2, [r3, #20]
 8002124:	4b03      	ldr	r3, [pc, #12]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002126:	430a      	orrs	r2, r1
 8002128:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	0018      	movs	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	b006      	add	sp, #24
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40021000 	.word	0x40021000
 8002138:	40007000 	.word	0x40007000
 800213c:	fffcffff 	.word	0xfffcffff
 8002140:	fff7ffff 	.word	0xfff7ffff
 8002144:	00001388 	.word	0x00001388
 8002148:	ffcfffff 	.word	0xffcfffff
 800214c:	efffffff 	.word	0xefffffff
 8002150:	fffff3ff 	.word	0xfffff3ff
 8002154:	ffffcfff 	.word	0xffffcfff
 8002158:	fff3ffff 	.word	0xfff3ffff

0800215c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e07b      	b.n	8002266 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	2b00      	cmp	r3, #0
 8002174:	d109      	bne.n	800218a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	2382      	movs	r3, #130	; 0x82
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	429a      	cmp	r2, r3
 8002180:	d009      	beq.n	8002196 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	61da      	str	r2, [r3, #28]
 8002188:	e005      	b.n	8002196 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2251      	movs	r2, #81	; 0x51
 80021a0:	5c9b      	ldrb	r3, [r3, r2]
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d107      	bne.n	80021b8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2250      	movs	r2, #80	; 0x50
 80021ac:	2100      	movs	r1, #0
 80021ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	0018      	movs	r0, r3
 80021b4:	f7fe fc7c 	bl	8000ab0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2251      	movs	r2, #81	; 0x51
 80021bc:	2102      	movs	r1, #2
 80021be:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2140      	movs	r1, #64	; 0x40
 80021cc:	438a      	bics	r2, r1
 80021ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	2382      	movs	r3, #130	; 0x82
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	401a      	ands	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6899      	ldr	r1, [r3, #8]
 80021de:	2384      	movs	r3, #132	; 0x84
 80021e0:	021b      	lsls	r3, r3, #8
 80021e2:	400b      	ands	r3, r1
 80021e4:	431a      	orrs	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68d9      	ldr	r1, [r3, #12]
 80021ea:	2380      	movs	r3, #128	; 0x80
 80021ec:	011b      	lsls	r3, r3, #4
 80021ee:	400b      	ands	r3, r1
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	2102      	movs	r1, #2
 80021f8:	400b      	ands	r3, r1
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	2101      	movs	r1, #1
 8002202:	400b      	ands	r3, r1
 8002204:	431a      	orrs	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6999      	ldr	r1, [r3, #24]
 800220a:	2380      	movs	r3, #128	; 0x80
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	400b      	ands	r3, r1
 8002210:	431a      	orrs	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	2138      	movs	r1, #56	; 0x38
 8002218:	400b      	ands	r3, r1
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	2180      	movs	r1, #128	; 0x80
 8002222:	400b      	ands	r3, r1
 8002224:	431a      	orrs	r2, r3
 8002226:	0011      	movs	r1, r2
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800222c:	2380      	movs	r3, #128	; 0x80
 800222e:	019b      	lsls	r3, r3, #6
 8002230:	401a      	ands	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	430a      	orrs	r2, r1
 8002238:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	0c1b      	lsrs	r3, r3, #16
 8002240:	2204      	movs	r2, #4
 8002242:	4013      	ands	r3, r2
 8002244:	0019      	movs	r1, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	2210      	movs	r2, #16
 800224c:	401a      	ands	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2251      	movs	r2, #81	; 0x51
 8002260:	2101      	movs	r1, #1
 8002262:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	0018      	movs	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	b002      	add	sp, #8
 800226c:	bd80      	pop	{r7, pc}
	...

08002270 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e044      	b.n	800230c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002286:	2b00      	cmp	r3, #0
 8002288:	d107      	bne.n	800229a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2274      	movs	r2, #116	; 0x74
 800228e:	2100      	movs	r1, #0
 8002290:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	0018      	movs	r0, r3
 8002296:	f7fe fc4f 	bl	8000b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2224      	movs	r2, #36	; 0x24
 800229e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2101      	movs	r1, #1
 80022ac:	438a      	bics	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	0018      	movs	r0, r3
 80022b4:	f000 fc2e 	bl	8002b14 <UART_SetConfig>
 80022b8:	0003      	movs	r3, r0
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e024      	b.n	800230c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	0018      	movs	r0, r3
 80022ce:	f000 fe6b 	bl	8002fa8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	490d      	ldr	r1, [pc, #52]	; (8002314 <HAL_UART_Init+0xa4>)
 80022de:	400a      	ands	r2, r1
 80022e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	212a      	movs	r1, #42	; 0x2a
 80022ee:	438a      	bics	r2, r1
 80022f0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2101      	movs	r1, #1
 80022fe:	430a      	orrs	r2, r1
 8002300:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	0018      	movs	r0, r3
 8002306:	f000 ff03 	bl	8003110 <UART_CheckIdleState>
 800230a:	0003      	movs	r3, r0
}
 800230c:	0018      	movs	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	b002      	add	sp, #8
 8002312:	bd80      	pop	{r7, pc}
 8002314:	ffffb7ff 	.word	0xffffb7ff

08002318 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	; 0x28
 800231c:	af02      	add	r7, sp, #8
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	603b      	str	r3, [r7, #0]
 8002324:	1dbb      	adds	r3, r7, #6
 8002326:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800232c:	2b20      	cmp	r3, #32
 800232e:	d000      	beq.n	8002332 <HAL_UART_Transmit+0x1a>
 8002330:	e095      	b.n	800245e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <HAL_UART_Transmit+0x28>
 8002338:	1dbb      	adds	r3, r7, #6
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e08d      	b.n	8002460 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	2380      	movs	r3, #128	; 0x80
 800234a:	015b      	lsls	r3, r3, #5
 800234c:	429a      	cmp	r2, r3
 800234e:	d109      	bne.n	8002364 <HAL_UART_Transmit+0x4c>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d105      	bne.n	8002364 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2201      	movs	r2, #1
 800235c:	4013      	ands	r3, r2
 800235e:	d001      	beq.n	8002364 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e07d      	b.n	8002460 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2274      	movs	r2, #116	; 0x74
 8002368:	5c9b      	ldrb	r3, [r3, r2]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d101      	bne.n	8002372 <HAL_UART_Transmit+0x5a>
 800236e:	2302      	movs	r3, #2
 8002370:	e076      	b.n	8002460 <HAL_UART_Transmit+0x148>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2274      	movs	r2, #116	; 0x74
 8002376:	2101      	movs	r1, #1
 8002378:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2280      	movs	r2, #128	; 0x80
 800237e:	2100      	movs	r1, #0
 8002380:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2221      	movs	r2, #33	; 0x21
 8002386:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002388:	f7fe fd0a 	bl	8000da0 <HAL_GetTick>
 800238c:	0003      	movs	r3, r0
 800238e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	1dba      	adds	r2, r7, #6
 8002394:	2150      	movs	r1, #80	; 0x50
 8002396:	8812      	ldrh	r2, [r2, #0]
 8002398:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	1dba      	adds	r2, r7, #6
 800239e:	2152      	movs	r1, #82	; 0x52
 80023a0:	8812      	ldrh	r2, [r2, #0]
 80023a2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	2380      	movs	r3, #128	; 0x80
 80023aa:	015b      	lsls	r3, r3, #5
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d108      	bne.n	80023c2 <HAL_UART_Transmit+0xaa>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d104      	bne.n	80023c2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	61bb      	str	r3, [r7, #24]
 80023c0:	e003      	b.n	80023ca <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2274      	movs	r2, #116	; 0x74
 80023ce:	2100      	movs	r1, #0
 80023d0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80023d2:	e02c      	b.n	800242e <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	0013      	movs	r3, r2
 80023de:	2200      	movs	r2, #0
 80023e0:	2180      	movs	r1, #128	; 0x80
 80023e2:	f000 fedd 	bl	80031a0 <UART_WaitOnFlagUntilTimeout>
 80023e6:	1e03      	subs	r3, r0, #0
 80023e8:	d001      	beq.n	80023ee <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e038      	b.n	8002460 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10b      	bne.n	800240c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	001a      	movs	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	05d2      	lsls	r2, r2, #23
 8002400:	0dd2      	lsrs	r2, r2, #23
 8002402:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	3302      	adds	r3, #2
 8002408:	61bb      	str	r3, [r7, #24]
 800240a:	e007      	b.n	800241c <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	781a      	ldrb	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3301      	adds	r3, #1
 800241a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2252      	movs	r2, #82	; 0x52
 8002420:	5a9b      	ldrh	r3, [r3, r2]
 8002422:	b29b      	uxth	r3, r3
 8002424:	3b01      	subs	r3, #1
 8002426:	b299      	uxth	r1, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2252      	movs	r2, #82	; 0x52
 800242c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2252      	movs	r2, #82	; 0x52
 8002432:	5a9b      	ldrh	r3, [r3, r2]
 8002434:	b29b      	uxth	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1cc      	bne.n	80023d4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	0013      	movs	r3, r2
 8002444:	2200      	movs	r2, #0
 8002446:	2140      	movs	r1, #64	; 0x40
 8002448:	f000 feaa 	bl	80031a0 <UART_WaitOnFlagUntilTimeout>
 800244c:	1e03      	subs	r3, r0, #0
 800244e:	d001      	beq.n	8002454 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e005      	b.n	8002460 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2220      	movs	r2, #32
 8002458:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800245a:	2300      	movs	r3, #0
 800245c:	e000      	b.n	8002460 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800245e:	2302      	movs	r3, #2
  }
}
 8002460:	0018      	movs	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	b008      	add	sp, #32
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b088      	sub	sp, #32
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	1dbb      	adds	r3, r7, #6
 8002474:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800247a:	2b20      	cmp	r3, #32
 800247c:	d155      	bne.n	800252a <HAL_UART_Receive_IT+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_UART_Receive_IT+0x24>
 8002484:	1dbb      	adds	r3, r7, #6
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e04d      	b.n	800252c <HAL_UART_Receive_IT+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	2380      	movs	r3, #128	; 0x80
 8002496:	015b      	lsls	r3, r3, #5
 8002498:	429a      	cmp	r2, r3
 800249a:	d109      	bne.n	80024b0 <HAL_UART_Receive_IT+0x48>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d105      	bne.n	80024b0 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2201      	movs	r2, #1
 80024a8:	4013      	ands	r3, r2
 80024aa:	d001      	beq.n	80024b0 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e03d      	b.n	800252c <HAL_UART_Receive_IT+0xc4>
      }
    }

    __HAL_LOCK(huart);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2274      	movs	r2, #116	; 0x74
 80024b4:	5c9b      	ldrb	r3, [r3, r2]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <HAL_UART_Receive_IT+0x56>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e036      	b.n	800252c <HAL_UART_Receive_IT+0xc4>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2274      	movs	r2, #116	; 0x74
 80024c2:	2101      	movs	r1, #1
 80024c4:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a18      	ldr	r2, [pc, #96]	; (8002534 <HAL_UART_Receive_IT+0xcc>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d020      	beq.n	8002518 <HAL_UART_Receive_IT+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	041b      	lsls	r3, r3, #16
 80024e0:	4013      	ands	r3, r2
 80024e2:	d019      	beq.n	8002518 <HAL_UART_Receive_IT+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024e4:	f3ef 8310 	mrs	r3, PRIMASK
 80024e8:	613b      	str	r3, [r7, #16]
  return(result);
 80024ea:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80024ec:	61fb      	str	r3, [r7, #28]
 80024ee:	2301      	movs	r3, #1
 80024f0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f383 8810 	msr	PRIMASK, r3
}
 80024f8:	46c0      	nop			; (mov r8, r8)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2180      	movs	r1, #128	; 0x80
 8002506:	04c9      	lsls	r1, r1, #19
 8002508:	430a      	orrs	r2, r1
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	f383 8810 	msr	PRIMASK, r3
}
 8002516:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002518:	1dbb      	adds	r3, r7, #6
 800251a:	881a      	ldrh	r2, [r3, #0]
 800251c:	68b9      	ldr	r1, [r7, #8]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	0018      	movs	r0, r3
 8002522:	f000 ff01 	bl	8003328 <UART_Start_Receive_IT>
 8002526:	0003      	movs	r3, r0
 8002528:	e000      	b.n	800252c <HAL_UART_Receive_IT+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800252a:	2302      	movs	r3, #2
  }
}
 800252c:	0018      	movs	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	b008      	add	sp, #32
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40004800 	.word	0x40004800

08002538 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002538:	b590      	push	{r4, r7, lr}
 800253a:	b0ab      	sub	sp, #172	; 0xac
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	22a4      	movs	r2, #164	; 0xa4
 8002548:	18b9      	adds	r1, r7, r2
 800254a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	20a0      	movs	r0, #160	; 0xa0
 8002554:	1839      	adds	r1, r7, r0
 8002556:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	219c      	movs	r1, #156	; 0x9c
 8002560:	1879      	adds	r1, r7, r1
 8002562:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002564:	0011      	movs	r1, r2
 8002566:	18bb      	adds	r3, r7, r2
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a99      	ldr	r2, [pc, #612]	; (80027d0 <HAL_UART_IRQHandler+0x298>)
 800256c:	4013      	ands	r3, r2
 800256e:	2298      	movs	r2, #152	; 0x98
 8002570:	18bc      	adds	r4, r7, r2
 8002572:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002574:	18bb      	adds	r3, r7, r2
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d114      	bne.n	80025a6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800257c:	187b      	adds	r3, r7, r1
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2220      	movs	r2, #32
 8002582:	4013      	ands	r3, r2
 8002584:	d00f      	beq.n	80025a6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002586:	183b      	adds	r3, r7, r0
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2220      	movs	r2, #32
 800258c:	4013      	ands	r3, r2
 800258e:	d00a      	beq.n	80025a6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002594:	2b00      	cmp	r3, #0
 8002596:	d100      	bne.n	800259a <HAL_UART_IRQHandler+0x62>
 8002598:	e298      	b.n	8002acc <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	0010      	movs	r0, r2
 80025a2:	4798      	blx	r3
      }
      return;
 80025a4:	e292      	b.n	8002acc <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80025a6:	2398      	movs	r3, #152	; 0x98
 80025a8:	18fb      	adds	r3, r7, r3
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d100      	bne.n	80025b2 <HAL_UART_IRQHandler+0x7a>
 80025b0:	e114      	b.n	80027dc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80025b2:	239c      	movs	r3, #156	; 0x9c
 80025b4:	18fb      	adds	r3, r7, r3
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2201      	movs	r2, #1
 80025ba:	4013      	ands	r3, r2
 80025bc:	d106      	bne.n	80025cc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80025be:	23a0      	movs	r3, #160	; 0xa0
 80025c0:	18fb      	adds	r3, r7, r3
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a83      	ldr	r2, [pc, #524]	; (80027d4 <HAL_UART_IRQHandler+0x29c>)
 80025c6:	4013      	ands	r3, r2
 80025c8:	d100      	bne.n	80025cc <HAL_UART_IRQHandler+0x94>
 80025ca:	e107      	b.n	80027dc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80025cc:	23a4      	movs	r3, #164	; 0xa4
 80025ce:	18fb      	adds	r3, r7, r3
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2201      	movs	r2, #1
 80025d4:	4013      	ands	r3, r2
 80025d6:	d012      	beq.n	80025fe <HAL_UART_IRQHandler+0xc6>
 80025d8:	23a0      	movs	r3, #160	; 0xa0
 80025da:	18fb      	adds	r3, r7, r3
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	2380      	movs	r3, #128	; 0x80
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	4013      	ands	r3, r2
 80025e4:	d00b      	beq.n	80025fe <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2201      	movs	r2, #1
 80025ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2280      	movs	r2, #128	; 0x80
 80025f2:	589b      	ldr	r3, [r3, r2]
 80025f4:	2201      	movs	r2, #1
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2180      	movs	r1, #128	; 0x80
 80025fc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80025fe:	23a4      	movs	r3, #164	; 0xa4
 8002600:	18fb      	adds	r3, r7, r3
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2202      	movs	r2, #2
 8002606:	4013      	ands	r3, r2
 8002608:	d011      	beq.n	800262e <HAL_UART_IRQHandler+0xf6>
 800260a:	239c      	movs	r3, #156	; 0x9c
 800260c:	18fb      	adds	r3, r7, r3
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2201      	movs	r2, #1
 8002612:	4013      	ands	r3, r2
 8002614:	d00b      	beq.n	800262e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2202      	movs	r2, #2
 800261c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2280      	movs	r2, #128	; 0x80
 8002622:	589b      	ldr	r3, [r3, r2]
 8002624:	2204      	movs	r2, #4
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2180      	movs	r1, #128	; 0x80
 800262c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800262e:	23a4      	movs	r3, #164	; 0xa4
 8002630:	18fb      	adds	r3, r7, r3
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2204      	movs	r2, #4
 8002636:	4013      	ands	r3, r2
 8002638:	d011      	beq.n	800265e <HAL_UART_IRQHandler+0x126>
 800263a:	239c      	movs	r3, #156	; 0x9c
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2201      	movs	r2, #1
 8002642:	4013      	ands	r3, r2
 8002644:	d00b      	beq.n	800265e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2204      	movs	r2, #4
 800264c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2280      	movs	r2, #128	; 0x80
 8002652:	589b      	ldr	r3, [r3, r2]
 8002654:	2202      	movs	r2, #2
 8002656:	431a      	orrs	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2180      	movs	r1, #128	; 0x80
 800265c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800265e:	23a4      	movs	r3, #164	; 0xa4
 8002660:	18fb      	adds	r3, r7, r3
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2208      	movs	r2, #8
 8002666:	4013      	ands	r3, r2
 8002668:	d017      	beq.n	800269a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800266a:	23a0      	movs	r3, #160	; 0xa0
 800266c:	18fb      	adds	r3, r7, r3
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2220      	movs	r2, #32
 8002672:	4013      	ands	r3, r2
 8002674:	d105      	bne.n	8002682 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002676:	239c      	movs	r3, #156	; 0x9c
 8002678:	18fb      	adds	r3, r7, r3
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2201      	movs	r2, #1
 800267e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002680:	d00b      	beq.n	800269a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2208      	movs	r2, #8
 8002688:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2280      	movs	r2, #128	; 0x80
 800268e:	589b      	ldr	r3, [r3, r2]
 8002690:	2208      	movs	r2, #8
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2180      	movs	r1, #128	; 0x80
 8002698:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800269a:	23a4      	movs	r3, #164	; 0xa4
 800269c:	18fb      	adds	r3, r7, r3
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	2380      	movs	r3, #128	; 0x80
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	4013      	ands	r3, r2
 80026a6:	d013      	beq.n	80026d0 <HAL_UART_IRQHandler+0x198>
 80026a8:	23a0      	movs	r3, #160	; 0xa0
 80026aa:	18fb      	adds	r3, r7, r3
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	2380      	movs	r3, #128	; 0x80
 80026b0:	04db      	lsls	r3, r3, #19
 80026b2:	4013      	ands	r3, r2
 80026b4:	d00c      	beq.n	80026d0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2280      	movs	r2, #128	; 0x80
 80026bc:	0112      	lsls	r2, r2, #4
 80026be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2280      	movs	r2, #128	; 0x80
 80026c4:	589b      	ldr	r3, [r3, r2]
 80026c6:	2220      	movs	r2, #32
 80026c8:	431a      	orrs	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2180      	movs	r1, #128	; 0x80
 80026ce:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2280      	movs	r2, #128	; 0x80
 80026d4:	589b      	ldr	r3, [r3, r2]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d100      	bne.n	80026dc <HAL_UART_IRQHandler+0x1a4>
 80026da:	e1f9      	b.n	8002ad0 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80026dc:	23a4      	movs	r3, #164	; 0xa4
 80026de:	18fb      	adds	r3, r7, r3
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2220      	movs	r2, #32
 80026e4:	4013      	ands	r3, r2
 80026e6:	d00e      	beq.n	8002706 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80026e8:	23a0      	movs	r3, #160	; 0xa0
 80026ea:	18fb      	adds	r3, r7, r3
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2220      	movs	r2, #32
 80026f0:	4013      	ands	r3, r2
 80026f2:	d008      	beq.n	8002706 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d004      	beq.n	8002706 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	0010      	movs	r0, r2
 8002704:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2280      	movs	r2, #128	; 0x80
 800270a:	589b      	ldr	r3, [r3, r2]
 800270c:	2194      	movs	r1, #148	; 0x94
 800270e:	187a      	adds	r2, r7, r1
 8002710:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2240      	movs	r2, #64	; 0x40
 800271a:	4013      	ands	r3, r2
 800271c:	2b40      	cmp	r3, #64	; 0x40
 800271e:	d004      	beq.n	800272a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002720:	187b      	adds	r3, r7, r1
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2228      	movs	r2, #40	; 0x28
 8002726:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002728:	d047      	beq.n	80027ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	0018      	movs	r0, r3
 800272e:	f000 feab 	bl	8003488 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	2240      	movs	r2, #64	; 0x40
 800273a:	4013      	ands	r3, r2
 800273c:	2b40      	cmp	r3, #64	; 0x40
 800273e:	d137      	bne.n	80027b0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002740:	f3ef 8310 	mrs	r3, PRIMASK
 8002744:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002746:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002748:	2090      	movs	r0, #144	; 0x90
 800274a:	183a      	adds	r2, r7, r0
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	2301      	movs	r3, #1
 8002750:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002752:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002754:	f383 8810 	msr	PRIMASK, r3
}
 8002758:	46c0      	nop			; (mov r8, r8)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2140      	movs	r1, #64	; 0x40
 8002766:	438a      	bics	r2, r1
 8002768:	609a      	str	r2, [r3, #8]
 800276a:	183b      	adds	r3, r7, r0
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002770:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002772:	f383 8810 	msr	PRIMASK, r3
}
 8002776:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277c:	2b00      	cmp	r3, #0
 800277e:	d012      	beq.n	80027a6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002784:	4a14      	ldr	r2, [pc, #80]	; (80027d8 <HAL_UART_IRQHandler+0x2a0>)
 8002786:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278c:	0018      	movs	r0, r3
 800278e:	f7fe fc53 	bl	8001038 <HAL_DMA_Abort_IT>
 8002792:	1e03      	subs	r3, r0, #0
 8002794:	d01a      	beq.n	80027cc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a0:	0018      	movs	r0, r3
 80027a2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027a4:	e012      	b.n	80027cc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	0018      	movs	r0, r3
 80027aa:	f000 f99f 	bl	8002aec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027ae:	e00d      	b.n	80027cc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	0018      	movs	r0, r3
 80027b4:	f000 f99a 	bl	8002aec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027b8:	e008      	b.n	80027cc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	0018      	movs	r0, r3
 80027be:	f000 f995 	bl	8002aec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2280      	movs	r2, #128	; 0x80
 80027c6:	2100      	movs	r1, #0
 80027c8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80027ca:	e181      	b.n	8002ad0 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027cc:	46c0      	nop			; (mov r8, r8)
    return;
 80027ce:	e17f      	b.n	8002ad0 <HAL_UART_IRQHandler+0x598>
 80027d0:	0000080f 	.word	0x0000080f
 80027d4:	04000120 	.word	0x04000120
 80027d8:	0800354d 	.word	0x0800354d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d000      	beq.n	80027e6 <HAL_UART_IRQHandler+0x2ae>
 80027e4:	e133      	b.n	8002a4e <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80027e6:	23a4      	movs	r3, #164	; 0xa4
 80027e8:	18fb      	adds	r3, r7, r3
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2210      	movs	r2, #16
 80027ee:	4013      	ands	r3, r2
 80027f0:	d100      	bne.n	80027f4 <HAL_UART_IRQHandler+0x2bc>
 80027f2:	e12c      	b.n	8002a4e <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80027f4:	23a0      	movs	r3, #160	; 0xa0
 80027f6:	18fb      	adds	r3, r7, r3
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2210      	movs	r2, #16
 80027fc:	4013      	ands	r3, r2
 80027fe:	d100      	bne.n	8002802 <HAL_UART_IRQHandler+0x2ca>
 8002800:	e125      	b.n	8002a4e <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2210      	movs	r2, #16
 8002808:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	2240      	movs	r2, #64	; 0x40
 8002812:	4013      	ands	r3, r2
 8002814:	2b40      	cmp	r3, #64	; 0x40
 8002816:	d000      	beq.n	800281a <HAL_UART_IRQHandler+0x2e2>
 8002818:	e09d      	b.n	8002956 <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	217e      	movs	r1, #126	; 0x7e
 8002824:	187b      	adds	r3, r7, r1
 8002826:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002828:	187b      	adds	r3, r7, r1
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d100      	bne.n	8002832 <HAL_UART_IRQHandler+0x2fa>
 8002830:	e150      	b.n	8002ad4 <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2258      	movs	r2, #88	; 0x58
 8002836:	5a9b      	ldrh	r3, [r3, r2]
 8002838:	187a      	adds	r2, r7, r1
 800283a:	8812      	ldrh	r2, [r2, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d300      	bcc.n	8002842 <HAL_UART_IRQHandler+0x30a>
 8002840:	e148      	b.n	8002ad4 <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	187a      	adds	r2, r7, r1
 8002846:	215a      	movs	r1, #90	; 0x5a
 8002848:	8812      	ldrh	r2, [r2, #0]
 800284a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2220      	movs	r2, #32
 8002856:	4013      	ands	r3, r2
 8002858:	d16e      	bne.n	8002938 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800285a:	f3ef 8310 	mrs	r3, PRIMASK
 800285e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002862:	67bb      	str	r3, [r7, #120]	; 0x78
 8002864:	2301      	movs	r3, #1
 8002866:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800286a:	f383 8810 	msr	PRIMASK, r3
}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	499a      	ldr	r1, [pc, #616]	; (8002ae4 <HAL_UART_IRQHandler+0x5ac>)
 800287c:	400a      	ands	r2, r1
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002882:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002886:	f383 8810 	msr	PRIMASK, r3
}
 800288a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800288c:	f3ef 8310 	mrs	r3, PRIMASK
 8002890:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002894:	677b      	str	r3, [r7, #116]	; 0x74
 8002896:	2301      	movs	r3, #1
 8002898:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800289a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800289c:	f383 8810 	msr	PRIMASK, r3
}
 80028a0:	46c0      	nop			; (mov r8, r8)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2101      	movs	r1, #1
 80028ae:	438a      	bics	r2, r1
 80028b0:	609a      	str	r2, [r3, #8]
 80028b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028b4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028b8:	f383 8810 	msr	PRIMASK, r3
}
 80028bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028be:	f3ef 8310 	mrs	r3, PRIMASK
 80028c2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80028c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028c6:	673b      	str	r3, [r7, #112]	; 0x70
 80028c8:	2301      	movs	r3, #1
 80028ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028ce:	f383 8810 	msr	PRIMASK, r3
}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2140      	movs	r1, #64	; 0x40
 80028e0:	438a      	bics	r2, r1
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028e6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028ea:	f383 8810 	msr	PRIMASK, r3
}
 80028ee:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2220      	movs	r2, #32
 80028f4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028fc:	f3ef 8310 	mrs	r3, PRIMASK
 8002900:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002902:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002904:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002906:	2301      	movs	r3, #1
 8002908:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800290a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800290c:	f383 8810 	msr	PRIMASK, r3
}
 8002910:	46c0      	nop			; (mov r8, r8)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2110      	movs	r1, #16
 800291e:	438a      	bics	r2, r1
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002924:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002928:	f383 8810 	msr	PRIMASK, r3
}
 800292c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002932:	0018      	movs	r0, r3
 8002934:	f7fe fb40 	bl	8000fb8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2258      	movs	r2, #88	; 0x58
 800293c:	5a9a      	ldrh	r2, [r3, r2]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	215a      	movs	r1, #90	; 0x5a
 8002942:	5a5b      	ldrh	r3, [r3, r1]
 8002944:	b29b      	uxth	r3, r3
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	b29a      	uxth	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	0011      	movs	r1, r2
 800294e:	0018      	movs	r0, r3
 8002950:	f000 f8d4 	bl	8002afc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002954:	e0be      	b.n	8002ad4 <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2258      	movs	r2, #88	; 0x58
 800295a:	5a99      	ldrh	r1, [r3, r2]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	225a      	movs	r2, #90	; 0x5a
 8002960:	5a9b      	ldrh	r3, [r3, r2]
 8002962:	b29a      	uxth	r2, r3
 8002964:	208e      	movs	r0, #142	; 0x8e
 8002966:	183b      	adds	r3, r7, r0
 8002968:	1a8a      	subs	r2, r1, r2
 800296a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	225a      	movs	r2, #90	; 0x5a
 8002970:	5a9b      	ldrh	r3, [r3, r2]
 8002972:	b29b      	uxth	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	d100      	bne.n	800297a <HAL_UART_IRQHandler+0x442>
 8002978:	e0ae      	b.n	8002ad8 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 800297a:	183b      	adds	r3, r7, r0
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d100      	bne.n	8002984 <HAL_UART_IRQHandler+0x44c>
 8002982:	e0a9      	b.n	8002ad8 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002984:	f3ef 8310 	mrs	r3, PRIMASK
 8002988:	60fb      	str	r3, [r7, #12]
  return(result);
 800298a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800298c:	2488      	movs	r4, #136	; 0x88
 800298e:	193a      	adds	r2, r7, r4
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	2301      	movs	r3, #1
 8002994:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	f383 8810 	msr	PRIMASK, r3
}
 800299c:	46c0      	nop			; (mov r8, r8)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	494f      	ldr	r1, [pc, #316]	; (8002ae8 <HAL_UART_IRQHandler+0x5b0>)
 80029aa:	400a      	ands	r2, r1
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	193b      	adds	r3, r7, r4
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f383 8810 	msr	PRIMASK, r3
}
 80029ba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029bc:	f3ef 8310 	mrs	r3, PRIMASK
 80029c0:	61bb      	str	r3, [r7, #24]
  return(result);
 80029c2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029c4:	2484      	movs	r4, #132	; 0x84
 80029c6:	193a      	adds	r2, r7, r4
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	2301      	movs	r3, #1
 80029cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	f383 8810 	msr	PRIMASK, r3
}
 80029d4:	46c0      	nop			; (mov r8, r8)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2101      	movs	r1, #1
 80029e2:	438a      	bics	r2, r1
 80029e4:	609a      	str	r2, [r3, #8]
 80029e6:	193b      	adds	r3, r7, r4
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ec:	6a3b      	ldr	r3, [r7, #32]
 80029ee:	f383 8810 	msr	PRIMASK, r3
}
 80029f2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2220      	movs	r2, #32
 80029f8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a06:	f3ef 8310 	mrs	r3, PRIMASK
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a0e:	2480      	movs	r4, #128	; 0x80
 8002a10:	193a      	adds	r2, r7, r4
 8002a12:	6013      	str	r3, [r2, #0]
 8002a14:	2301      	movs	r3, #1
 8002a16:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1a:	f383 8810 	msr	PRIMASK, r3
}
 8002a1e:	46c0      	nop			; (mov r8, r8)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2110      	movs	r1, #16
 8002a2c:	438a      	bics	r2, r1
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	193b      	adds	r3, r7, r4
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a38:	f383 8810 	msr	PRIMASK, r3
}
 8002a3c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a3e:	183b      	adds	r3, r7, r0
 8002a40:	881a      	ldrh	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	0011      	movs	r1, r2
 8002a46:	0018      	movs	r0, r3
 8002a48:	f000 f858 	bl	8002afc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002a4c:	e044      	b.n	8002ad8 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002a4e:	23a4      	movs	r3, #164	; 0xa4
 8002a50:	18fb      	adds	r3, r7, r3
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	2380      	movs	r3, #128	; 0x80
 8002a56:	035b      	lsls	r3, r3, #13
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d010      	beq.n	8002a7e <HAL_UART_IRQHandler+0x546>
 8002a5c:	239c      	movs	r3, #156	; 0x9c
 8002a5e:	18fb      	adds	r3, r7, r3
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	2380      	movs	r3, #128	; 0x80
 8002a64:	03db      	lsls	r3, r3, #15
 8002a66:	4013      	ands	r3, r2
 8002a68:	d009      	beq.n	8002a7e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2280      	movs	r2, #128	; 0x80
 8002a70:	0352      	lsls	r2, r2, #13
 8002a72:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	0018      	movs	r0, r3
 8002a78:	f000 ff12 	bl	80038a0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002a7c:	e02f      	b.n	8002ade <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002a7e:	23a4      	movs	r3, #164	; 0xa4
 8002a80:	18fb      	adds	r3, r7, r3
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2280      	movs	r2, #128	; 0x80
 8002a86:	4013      	ands	r3, r2
 8002a88:	d00f      	beq.n	8002aaa <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002a8a:	23a0      	movs	r3, #160	; 0xa0
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2280      	movs	r2, #128	; 0x80
 8002a92:	4013      	ands	r3, r2
 8002a94:	d009      	beq.n	8002aaa <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d01e      	beq.n	8002adc <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	0010      	movs	r0, r2
 8002aa6:	4798      	blx	r3
    }
    return;
 8002aa8:	e018      	b.n	8002adc <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002aaa:	23a4      	movs	r3, #164	; 0xa4
 8002aac:	18fb      	adds	r3, r7, r3
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2240      	movs	r2, #64	; 0x40
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	d013      	beq.n	8002ade <HAL_UART_IRQHandler+0x5a6>
 8002ab6:	23a0      	movs	r3, #160	; 0xa0
 8002ab8:	18fb      	adds	r3, r7, r3
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2240      	movs	r2, #64	; 0x40
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d00d      	beq.n	8002ade <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f000 fd58 	bl	800357a <UART_EndTransmit_IT>
    return;
 8002aca:	e008      	b.n	8002ade <HAL_UART_IRQHandler+0x5a6>
      return;
 8002acc:	46c0      	nop			; (mov r8, r8)
 8002ace:	e006      	b.n	8002ade <HAL_UART_IRQHandler+0x5a6>
    return;
 8002ad0:	46c0      	nop			; (mov r8, r8)
 8002ad2:	e004      	b.n	8002ade <HAL_UART_IRQHandler+0x5a6>
      return;
 8002ad4:	46c0      	nop			; (mov r8, r8)
 8002ad6:	e002      	b.n	8002ade <HAL_UART_IRQHandler+0x5a6>
      return;
 8002ad8:	46c0      	nop			; (mov r8, r8)
 8002ada:	e000      	b.n	8002ade <HAL_UART_IRQHandler+0x5a6>
    return;
 8002adc:	46c0      	nop			; (mov r8, r8)
  }

}
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	b02b      	add	sp, #172	; 0xac
 8002ae2:	bd90      	pop	{r4, r7, pc}
 8002ae4:	fffffeff 	.word	0xfffffeff
 8002ae8:	fffffedf 	.word	0xfffffedf

08002aec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002af4:	46c0      	nop			; (mov r8, r8)
 8002af6:	46bd      	mov	sp, r7
 8002af8:	b002      	add	sp, #8
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	000a      	movs	r2, r1
 8002b06:	1cbb      	adds	r3, r7, #2
 8002b08:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	b002      	add	sp, #8
 8002b10:	bd80      	pop	{r7, pc}
	...

08002b14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b14:	b5b0      	push	{r4, r5, r7, lr}
 8002b16:	b08e      	sub	sp, #56	; 0x38
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b1c:	231a      	movs	r3, #26
 8002b1e:	2218      	movs	r2, #24
 8002b20:	189b      	adds	r3, r3, r2
 8002b22:	19db      	adds	r3, r3, r7
 8002b24:	2200      	movs	r2, #0
 8002b26:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	431a      	orrs	r2, r3
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	431a      	orrs	r2, r3
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4ab4      	ldr	r2, [pc, #720]	; (8002e18 <UART_SetConfig+0x304>)
 8002b48:	4013      	ands	r3, r2
 8002b4a:	0019      	movs	r1, r3
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b52:	430a      	orrs	r2, r1
 8002b54:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	4aaf      	ldr	r2, [pc, #700]	; (8002e1c <UART_SetConfig+0x308>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	0019      	movs	r1, r3
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4aa9      	ldr	r2, [pc, #676]	; (8002e20 <UART_SetConfig+0x30c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d004      	beq.n	8002b88 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b84:	4313      	orrs	r3, r2
 8002b86:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	4aa5      	ldr	r2, [pc, #660]	; (8002e24 <UART_SetConfig+0x310>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	0019      	movs	r1, r3
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4aa1      	ldr	r2, [pc, #644]	; (8002e28 <UART_SetConfig+0x314>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d131      	bne.n	8002c0c <UART_SetConfig+0xf8>
 8002ba8:	4ba0      	ldr	r3, [pc, #640]	; (8002e2c <UART_SetConfig+0x318>)
 8002baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bac:	220c      	movs	r2, #12
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b0c      	cmp	r3, #12
 8002bb2:	d01d      	beq.n	8002bf0 <UART_SetConfig+0xdc>
 8002bb4:	d823      	bhi.n	8002bfe <UART_SetConfig+0xea>
 8002bb6:	2b08      	cmp	r3, #8
 8002bb8:	d00c      	beq.n	8002bd4 <UART_SetConfig+0xc0>
 8002bba:	d820      	bhi.n	8002bfe <UART_SetConfig+0xea>
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d002      	beq.n	8002bc6 <UART_SetConfig+0xb2>
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d00e      	beq.n	8002be2 <UART_SetConfig+0xce>
 8002bc4:	e01b      	b.n	8002bfe <UART_SetConfig+0xea>
 8002bc6:	231b      	movs	r3, #27
 8002bc8:	2218      	movs	r2, #24
 8002bca:	189b      	adds	r3, r3, r2
 8002bcc:	19db      	adds	r3, r3, r7
 8002bce:	2200      	movs	r2, #0
 8002bd0:	701a      	strb	r2, [r3, #0]
 8002bd2:	e065      	b.n	8002ca0 <UART_SetConfig+0x18c>
 8002bd4:	231b      	movs	r3, #27
 8002bd6:	2218      	movs	r2, #24
 8002bd8:	189b      	adds	r3, r3, r2
 8002bda:	19db      	adds	r3, r3, r7
 8002bdc:	2202      	movs	r2, #2
 8002bde:	701a      	strb	r2, [r3, #0]
 8002be0:	e05e      	b.n	8002ca0 <UART_SetConfig+0x18c>
 8002be2:	231b      	movs	r3, #27
 8002be4:	2218      	movs	r2, #24
 8002be6:	189b      	adds	r3, r3, r2
 8002be8:	19db      	adds	r3, r3, r7
 8002bea:	2204      	movs	r2, #4
 8002bec:	701a      	strb	r2, [r3, #0]
 8002bee:	e057      	b.n	8002ca0 <UART_SetConfig+0x18c>
 8002bf0:	231b      	movs	r3, #27
 8002bf2:	2218      	movs	r2, #24
 8002bf4:	189b      	adds	r3, r3, r2
 8002bf6:	19db      	adds	r3, r3, r7
 8002bf8:	2208      	movs	r2, #8
 8002bfa:	701a      	strb	r2, [r3, #0]
 8002bfc:	e050      	b.n	8002ca0 <UART_SetConfig+0x18c>
 8002bfe:	231b      	movs	r3, #27
 8002c00:	2218      	movs	r2, #24
 8002c02:	189b      	adds	r3, r3, r2
 8002c04:	19db      	adds	r3, r3, r7
 8002c06:	2210      	movs	r2, #16
 8002c08:	701a      	strb	r2, [r3, #0]
 8002c0a:	e049      	b.n	8002ca0 <UART_SetConfig+0x18c>
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a83      	ldr	r2, [pc, #524]	; (8002e20 <UART_SetConfig+0x30c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d13e      	bne.n	8002c94 <UART_SetConfig+0x180>
 8002c16:	4b85      	ldr	r3, [pc, #532]	; (8002e2c <UART_SetConfig+0x318>)
 8002c18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c1a:	23c0      	movs	r3, #192	; 0xc0
 8002c1c:	011b      	lsls	r3, r3, #4
 8002c1e:	4013      	ands	r3, r2
 8002c20:	22c0      	movs	r2, #192	; 0xc0
 8002c22:	0112      	lsls	r2, r2, #4
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d027      	beq.n	8002c78 <UART_SetConfig+0x164>
 8002c28:	22c0      	movs	r2, #192	; 0xc0
 8002c2a:	0112      	lsls	r2, r2, #4
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d82a      	bhi.n	8002c86 <UART_SetConfig+0x172>
 8002c30:	2280      	movs	r2, #128	; 0x80
 8002c32:	0112      	lsls	r2, r2, #4
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d011      	beq.n	8002c5c <UART_SetConfig+0x148>
 8002c38:	2280      	movs	r2, #128	; 0x80
 8002c3a:	0112      	lsls	r2, r2, #4
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d822      	bhi.n	8002c86 <UART_SetConfig+0x172>
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d004      	beq.n	8002c4e <UART_SetConfig+0x13a>
 8002c44:	2280      	movs	r2, #128	; 0x80
 8002c46:	00d2      	lsls	r2, r2, #3
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d00e      	beq.n	8002c6a <UART_SetConfig+0x156>
 8002c4c:	e01b      	b.n	8002c86 <UART_SetConfig+0x172>
 8002c4e:	231b      	movs	r3, #27
 8002c50:	2218      	movs	r2, #24
 8002c52:	189b      	adds	r3, r3, r2
 8002c54:	19db      	adds	r3, r3, r7
 8002c56:	2200      	movs	r2, #0
 8002c58:	701a      	strb	r2, [r3, #0]
 8002c5a:	e021      	b.n	8002ca0 <UART_SetConfig+0x18c>
 8002c5c:	231b      	movs	r3, #27
 8002c5e:	2218      	movs	r2, #24
 8002c60:	189b      	adds	r3, r3, r2
 8002c62:	19db      	adds	r3, r3, r7
 8002c64:	2202      	movs	r2, #2
 8002c66:	701a      	strb	r2, [r3, #0]
 8002c68:	e01a      	b.n	8002ca0 <UART_SetConfig+0x18c>
 8002c6a:	231b      	movs	r3, #27
 8002c6c:	2218      	movs	r2, #24
 8002c6e:	189b      	adds	r3, r3, r2
 8002c70:	19db      	adds	r3, r3, r7
 8002c72:	2204      	movs	r2, #4
 8002c74:	701a      	strb	r2, [r3, #0]
 8002c76:	e013      	b.n	8002ca0 <UART_SetConfig+0x18c>
 8002c78:	231b      	movs	r3, #27
 8002c7a:	2218      	movs	r2, #24
 8002c7c:	189b      	adds	r3, r3, r2
 8002c7e:	19db      	adds	r3, r3, r7
 8002c80:	2208      	movs	r2, #8
 8002c82:	701a      	strb	r2, [r3, #0]
 8002c84:	e00c      	b.n	8002ca0 <UART_SetConfig+0x18c>
 8002c86:	231b      	movs	r3, #27
 8002c88:	2218      	movs	r2, #24
 8002c8a:	189b      	adds	r3, r3, r2
 8002c8c:	19db      	adds	r3, r3, r7
 8002c8e:	2210      	movs	r2, #16
 8002c90:	701a      	strb	r2, [r3, #0]
 8002c92:	e005      	b.n	8002ca0 <UART_SetConfig+0x18c>
 8002c94:	231b      	movs	r3, #27
 8002c96:	2218      	movs	r2, #24
 8002c98:	189b      	adds	r3, r3, r2
 8002c9a:	19db      	adds	r3, r3, r7
 8002c9c:	2210      	movs	r2, #16
 8002c9e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a5e      	ldr	r2, [pc, #376]	; (8002e20 <UART_SetConfig+0x30c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d000      	beq.n	8002cac <UART_SetConfig+0x198>
 8002caa:	e084      	b.n	8002db6 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002cac:	231b      	movs	r3, #27
 8002cae:	2218      	movs	r2, #24
 8002cb0:	189b      	adds	r3, r3, r2
 8002cb2:	19db      	adds	r3, r3, r7
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d01d      	beq.n	8002cf6 <UART_SetConfig+0x1e2>
 8002cba:	dc20      	bgt.n	8002cfe <UART_SetConfig+0x1ea>
 8002cbc:	2b04      	cmp	r3, #4
 8002cbe:	d015      	beq.n	8002cec <UART_SetConfig+0x1d8>
 8002cc0:	dc1d      	bgt.n	8002cfe <UART_SetConfig+0x1ea>
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d002      	beq.n	8002ccc <UART_SetConfig+0x1b8>
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d005      	beq.n	8002cd6 <UART_SetConfig+0x1c2>
 8002cca:	e018      	b.n	8002cfe <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ccc:	f7ff f8f4 	bl	8001eb8 <HAL_RCC_GetPCLK1Freq>
 8002cd0:	0003      	movs	r3, r0
 8002cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cd4:	e01c      	b.n	8002d10 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002cd6:	4b55      	ldr	r3, [pc, #340]	; (8002e2c <UART_SetConfig+0x318>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2210      	movs	r2, #16
 8002cdc:	4013      	ands	r3, r2
 8002cde:	d002      	beq.n	8002ce6 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002ce0:	4b53      	ldr	r3, [pc, #332]	; (8002e30 <UART_SetConfig+0x31c>)
 8002ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002ce4:	e014      	b.n	8002d10 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8002ce6:	4b53      	ldr	r3, [pc, #332]	; (8002e34 <UART_SetConfig+0x320>)
 8002ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cea:	e011      	b.n	8002d10 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cec:	f7ff f834 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 8002cf0:	0003      	movs	r3, r0
 8002cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cf4:	e00c      	b.n	8002d10 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cf6:	2380      	movs	r3, #128	; 0x80
 8002cf8:	021b      	lsls	r3, r3, #8
 8002cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cfc:	e008      	b.n	8002d10 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002d02:	231a      	movs	r3, #26
 8002d04:	2218      	movs	r2, #24
 8002d06:	189b      	adds	r3, r3, r2
 8002d08:	19db      	adds	r3, r3, r7
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	701a      	strb	r2, [r3, #0]
        break;
 8002d0e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d100      	bne.n	8002d18 <UART_SetConfig+0x204>
 8002d16:	e130      	b.n	8002f7a <UART_SetConfig+0x466>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	0013      	movs	r3, r2
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	189b      	adds	r3, r3, r2
 8002d22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d305      	bcc.n	8002d34 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d906      	bls.n	8002d42 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8002d34:	231a      	movs	r3, #26
 8002d36:	2218      	movs	r2, #24
 8002d38:	189b      	adds	r3, r3, r2
 8002d3a:	19db      	adds	r3, r3, r7
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	701a      	strb	r2, [r3, #0]
 8002d40:	e11b      	b.n	8002f7a <UART_SetConfig+0x466>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	6939      	ldr	r1, [r7, #16]
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	000b      	movs	r3, r1
 8002d50:	0e1b      	lsrs	r3, r3, #24
 8002d52:	0010      	movs	r0, r2
 8002d54:	0205      	lsls	r5, r0, #8
 8002d56:	431d      	orrs	r5, r3
 8002d58:	000b      	movs	r3, r1
 8002d5a:	021c      	lsls	r4, r3, #8
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	085b      	lsrs	r3, r3, #1
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	2300      	movs	r3, #0
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	68b8      	ldr	r0, [r7, #8]
 8002d6a:	68f9      	ldr	r1, [r7, #12]
 8002d6c:	1900      	adds	r0, r0, r4
 8002d6e:	4169      	adcs	r1, r5
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	603b      	str	r3, [r7, #0]
 8002d76:	2300      	movs	r3, #0
 8002d78:	607b      	str	r3, [r7, #4]
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f7fd fa57 	bl	8000230 <__aeabi_uldivmod>
 8002d82:	0002      	movs	r2, r0
 8002d84:	000b      	movs	r3, r1
 8002d86:	0013      	movs	r3, r2
 8002d88:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d8c:	23c0      	movs	r3, #192	; 0xc0
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d309      	bcc.n	8002da8 <UART_SetConfig+0x294>
 8002d94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d96:	2380      	movs	r3, #128	; 0x80
 8002d98:	035b      	lsls	r3, r3, #13
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d204      	bcs.n	8002da8 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002da4:	60da      	str	r2, [r3, #12]
 8002da6:	e0e8      	b.n	8002f7a <UART_SetConfig+0x466>
        }
        else
        {
          ret = HAL_ERROR;
 8002da8:	231a      	movs	r3, #26
 8002daa:	2218      	movs	r2, #24
 8002dac:	189b      	adds	r3, r3, r2
 8002dae:	19db      	adds	r3, r3, r7
 8002db0:	2201      	movs	r2, #1
 8002db2:	701a      	strb	r2, [r3, #0]
 8002db4:	e0e1      	b.n	8002f7a <UART_SetConfig+0x466>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	69da      	ldr	r2, [r3, #28]
 8002dba:	2380      	movs	r3, #128	; 0x80
 8002dbc:	021b      	lsls	r3, r3, #8
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d000      	beq.n	8002dc4 <UART_SetConfig+0x2b0>
 8002dc2:	e083      	b.n	8002ecc <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 8002dc4:	231b      	movs	r3, #27
 8002dc6:	2218      	movs	r2, #24
 8002dc8:	189b      	adds	r3, r3, r2
 8002dca:	19db      	adds	r3, r3, r7
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d834      	bhi.n	8002e3c <UART_SetConfig+0x328>
 8002dd2:	009a      	lsls	r2, r3, #2
 8002dd4:	4b18      	ldr	r3, [pc, #96]	; (8002e38 <UART_SetConfig+0x324>)
 8002dd6:	18d3      	adds	r3, r2, r3
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ddc:	f7ff f86c 	bl	8001eb8 <HAL_RCC_GetPCLK1Freq>
 8002de0:	0003      	movs	r3, r0
 8002de2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002de4:	e033      	b.n	8002e4e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002de6:	f7ff f87d 	bl	8001ee4 <HAL_RCC_GetPCLK2Freq>
 8002dea:	0003      	movs	r3, r0
 8002dec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002dee:	e02e      	b.n	8002e4e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002df0:	4b0e      	ldr	r3, [pc, #56]	; (8002e2c <UART_SetConfig+0x318>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2210      	movs	r2, #16
 8002df6:	4013      	ands	r3, r2
 8002df8:	d002      	beq.n	8002e00 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002dfa:	4b0d      	ldr	r3, [pc, #52]	; (8002e30 <UART_SetConfig+0x31c>)
 8002dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002dfe:	e026      	b.n	8002e4e <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8002e00:	4b0c      	ldr	r3, [pc, #48]	; (8002e34 <UART_SetConfig+0x320>)
 8002e02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e04:	e023      	b.n	8002e4e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e06:	f7fe ffa7 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 8002e0a:	0003      	movs	r3, r0
 8002e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e0e:	e01e      	b.n	8002e4e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e10:	2380      	movs	r3, #128	; 0x80
 8002e12:	021b      	lsls	r3, r3, #8
 8002e14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e16:	e01a      	b.n	8002e4e <UART_SetConfig+0x33a>
 8002e18:	efff69f3 	.word	0xefff69f3
 8002e1c:	ffffcfff 	.word	0xffffcfff
 8002e20:	40004800 	.word	0x40004800
 8002e24:	fffff4ff 	.word	0xfffff4ff
 8002e28:	40004400 	.word	0x40004400
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	003d0900 	.word	0x003d0900
 8002e34:	00f42400 	.word	0x00f42400
 8002e38:	0800395c 	.word	0x0800395c
      default:
        pclk = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002e40:	231a      	movs	r3, #26
 8002e42:	2218      	movs	r2, #24
 8002e44:	189b      	adds	r3, r3, r2
 8002e46:	19db      	adds	r3, r3, r7
 8002e48:	2201      	movs	r2, #1
 8002e4a:	701a      	strb	r2, [r3, #0]
        break;
 8002e4c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d100      	bne.n	8002e56 <UART_SetConfig+0x342>
 8002e54:	e091      	b.n	8002f7a <UART_SetConfig+0x466>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e58:	005a      	lsls	r2, r3, #1
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	085b      	lsrs	r3, r3, #1
 8002e60:	18d2      	adds	r2, r2, r3
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	0019      	movs	r1, r3
 8002e68:	0010      	movs	r0, r2
 8002e6a:	f7fd f955 	bl	8000118 <__udivsi3>
 8002e6e:	0003      	movs	r3, r0
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e76:	2b0f      	cmp	r3, #15
 8002e78:	d921      	bls.n	8002ebe <UART_SetConfig+0x3aa>
 8002e7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e7c:	2380      	movs	r3, #128	; 0x80
 8002e7e:	025b      	lsls	r3, r3, #9
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d21c      	bcs.n	8002ebe <UART_SetConfig+0x3aa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	200e      	movs	r0, #14
 8002e8a:	2418      	movs	r4, #24
 8002e8c:	1903      	adds	r3, r0, r4
 8002e8e:	19db      	adds	r3, r3, r7
 8002e90:	210f      	movs	r1, #15
 8002e92:	438a      	bics	r2, r1
 8002e94:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e98:	085b      	lsrs	r3, r3, #1
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	2207      	movs	r2, #7
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	b299      	uxth	r1, r3
 8002ea2:	1903      	adds	r3, r0, r4
 8002ea4:	19db      	adds	r3, r3, r7
 8002ea6:	1902      	adds	r2, r0, r4
 8002ea8:	19d2      	adds	r2, r2, r7
 8002eaa:	8812      	ldrh	r2, [r2, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	1902      	adds	r2, r0, r4
 8002eb6:	19d2      	adds	r2, r2, r7
 8002eb8:	8812      	ldrh	r2, [r2, #0]
 8002eba:	60da      	str	r2, [r3, #12]
 8002ebc:	e05d      	b.n	8002f7a <UART_SetConfig+0x466>
      }
      else
      {
        ret = HAL_ERROR;
 8002ebe:	231a      	movs	r3, #26
 8002ec0:	2218      	movs	r2, #24
 8002ec2:	189b      	adds	r3, r3, r2
 8002ec4:	19db      	adds	r3, r3, r7
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	701a      	strb	r2, [r3, #0]
 8002eca:	e056      	b.n	8002f7a <UART_SetConfig+0x466>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ecc:	231b      	movs	r3, #27
 8002ece:	2218      	movs	r2, #24
 8002ed0:	189b      	adds	r3, r3, r2
 8002ed2:	19db      	adds	r3, r3, r7
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	d822      	bhi.n	8002f20 <UART_SetConfig+0x40c>
 8002eda:	009a      	lsls	r2, r3, #2
 8002edc:	4b2e      	ldr	r3, [pc, #184]	; (8002f98 <UART_SetConfig+0x484>)
 8002ede:	18d3      	adds	r3, r2, r3
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ee4:	f7fe ffe8 	bl	8001eb8 <HAL_RCC_GetPCLK1Freq>
 8002ee8:	0003      	movs	r3, r0
 8002eea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002eec:	e021      	b.n	8002f32 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002eee:	f7fe fff9 	bl	8001ee4 <HAL_RCC_GetPCLK2Freq>
 8002ef2:	0003      	movs	r3, r0
 8002ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ef6:	e01c      	b.n	8002f32 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ef8:	4b28      	ldr	r3, [pc, #160]	; (8002f9c <UART_SetConfig+0x488>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2210      	movs	r2, #16
 8002efe:	4013      	ands	r3, r2
 8002f00:	d002      	beq.n	8002f08 <UART_SetConfig+0x3f4>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002f02:	4b27      	ldr	r3, [pc, #156]	; (8002fa0 <UART_SetConfig+0x48c>)
 8002f04:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002f06:	e014      	b.n	8002f32 <UART_SetConfig+0x41e>
          pclk = (uint32_t) HSI_VALUE;
 8002f08:	4b26      	ldr	r3, [pc, #152]	; (8002fa4 <UART_SetConfig+0x490>)
 8002f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f0c:	e011      	b.n	8002f32 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f0e:	f7fe ff23 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 8002f12:	0003      	movs	r3, r0
 8002f14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f16:	e00c      	b.n	8002f32 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f18:	2380      	movs	r3, #128	; 0x80
 8002f1a:	021b      	lsls	r3, r3, #8
 8002f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f1e:	e008      	b.n	8002f32 <UART_SetConfig+0x41e>
      default:
        pclk = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002f24:	231a      	movs	r3, #26
 8002f26:	2218      	movs	r2, #24
 8002f28:	189b      	adds	r3, r3, r2
 8002f2a:	19db      	adds	r3, r3, r7
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	701a      	strb	r2, [r3, #0]
        break;
 8002f30:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d020      	beq.n	8002f7a <UART_SetConfig+0x466>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	085a      	lsrs	r2, r3, #1
 8002f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f40:	18d2      	adds	r2, r2, r3
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	0019      	movs	r1, r3
 8002f48:	0010      	movs	r0, r2
 8002f4a:	f7fd f8e5 	bl	8000118 <__udivsi3>
 8002f4e:	0003      	movs	r3, r0
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f56:	2b0f      	cmp	r3, #15
 8002f58:	d909      	bls.n	8002f6e <UART_SetConfig+0x45a>
 8002f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f5c:	2380      	movs	r3, #128	; 0x80
 8002f5e:	025b      	lsls	r3, r3, #9
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d204      	bcs.n	8002f6e <UART_SetConfig+0x45a>
      {
        huart->Instance->BRR = usartdiv;
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f6a:	60da      	str	r2, [r3, #12]
 8002f6c:	e005      	b.n	8002f7a <UART_SetConfig+0x466>
      }
      else
      {
        ret = HAL_ERROR;
 8002f6e:	231a      	movs	r3, #26
 8002f70:	2218      	movs	r2, #24
 8002f72:	189b      	adds	r3, r3, r2
 8002f74:	19db      	adds	r3, r3, r7
 8002f76:	2201      	movs	r2, #1
 8002f78:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	2200      	movs	r2, #0
 8002f84:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002f86:	231a      	movs	r3, #26
 8002f88:	2218      	movs	r2, #24
 8002f8a:	189b      	adds	r3, r3, r2
 8002f8c:	19db      	adds	r3, r3, r7
 8002f8e:	781b      	ldrb	r3, [r3, #0]
}
 8002f90:	0018      	movs	r0, r3
 8002f92:	46bd      	mov	sp, r7
 8002f94:	b00e      	add	sp, #56	; 0x38
 8002f96:	bdb0      	pop	{r4, r5, r7, pc}
 8002f98:	08003980 	.word	0x08003980
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	003d0900 	.word	0x003d0900
 8002fa4:	00f42400 	.word	0x00f42400

08002fa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d00b      	beq.n	8002fd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	4a4a      	ldr	r2, [pc, #296]	; (80030ec <UART_AdvFeatureConfig+0x144>)
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	0019      	movs	r1, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	4013      	ands	r3, r2
 8002fda:	d00b      	beq.n	8002ff4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	4a43      	ldr	r2, [pc, #268]	; (80030f0 <UART_AdvFeatureConfig+0x148>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	0019      	movs	r1, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	2204      	movs	r2, #4
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d00b      	beq.n	8003016 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	4a3b      	ldr	r2, [pc, #236]	; (80030f4 <UART_AdvFeatureConfig+0x14c>)
 8003006:	4013      	ands	r3, r2
 8003008:	0019      	movs	r1, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	2208      	movs	r2, #8
 800301c:	4013      	ands	r3, r2
 800301e:	d00b      	beq.n	8003038 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	4a34      	ldr	r2, [pc, #208]	; (80030f8 <UART_AdvFeatureConfig+0x150>)
 8003028:	4013      	ands	r3, r2
 800302a:	0019      	movs	r1, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	2210      	movs	r2, #16
 800303e:	4013      	ands	r3, r2
 8003040:	d00b      	beq.n	800305a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	4a2c      	ldr	r2, [pc, #176]	; (80030fc <UART_AdvFeatureConfig+0x154>)
 800304a:	4013      	ands	r3, r2
 800304c:	0019      	movs	r1, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	2220      	movs	r2, #32
 8003060:	4013      	ands	r3, r2
 8003062:	d00b      	beq.n	800307c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	4a25      	ldr	r2, [pc, #148]	; (8003100 <UART_AdvFeatureConfig+0x158>)
 800306c:	4013      	ands	r3, r2
 800306e:	0019      	movs	r1, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	2240      	movs	r2, #64	; 0x40
 8003082:	4013      	ands	r3, r2
 8003084:	d01d      	beq.n	80030c2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	4a1d      	ldr	r2, [pc, #116]	; (8003104 <UART_AdvFeatureConfig+0x15c>)
 800308e:	4013      	ands	r3, r2
 8003090:	0019      	movs	r1, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030a2:	2380      	movs	r3, #128	; 0x80
 80030a4:	035b      	lsls	r3, r3, #13
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d10b      	bne.n	80030c2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	4a15      	ldr	r2, [pc, #84]	; (8003108 <UART_AdvFeatureConfig+0x160>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	0019      	movs	r1, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	2280      	movs	r2, #128	; 0x80
 80030c8:	4013      	ands	r3, r2
 80030ca:	d00b      	beq.n	80030e4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	4a0e      	ldr	r2, [pc, #56]	; (800310c <UART_AdvFeatureConfig+0x164>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	0019      	movs	r1, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	605a      	str	r2, [r3, #4]
  }
}
 80030e4:	46c0      	nop			; (mov r8, r8)
 80030e6:	46bd      	mov	sp, r7
 80030e8:	b002      	add	sp, #8
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	fffdffff 	.word	0xfffdffff
 80030f0:	fffeffff 	.word	0xfffeffff
 80030f4:	fffbffff 	.word	0xfffbffff
 80030f8:	ffff7fff 	.word	0xffff7fff
 80030fc:	ffffefff 	.word	0xffffefff
 8003100:	ffffdfff 	.word	0xffffdfff
 8003104:	ffefffff 	.word	0xffefffff
 8003108:	ff9fffff 	.word	0xff9fffff
 800310c:	fff7ffff 	.word	0xfff7ffff

08003110 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af02      	add	r7, sp, #8
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2280      	movs	r2, #128	; 0x80
 800311c:	2100      	movs	r1, #0
 800311e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003120:	f7fd fe3e 	bl	8000da0 <HAL_GetTick>
 8003124:	0003      	movs	r3, r0
 8003126:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2208      	movs	r2, #8
 8003130:	4013      	ands	r3, r2
 8003132:	2b08      	cmp	r3, #8
 8003134:	d10c      	bne.n	8003150 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2280      	movs	r2, #128	; 0x80
 800313a:	0391      	lsls	r1, r2, #14
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	4a17      	ldr	r2, [pc, #92]	; (800319c <UART_CheckIdleState+0x8c>)
 8003140:	9200      	str	r2, [sp, #0]
 8003142:	2200      	movs	r2, #0
 8003144:	f000 f82c 	bl	80031a0 <UART_WaitOnFlagUntilTimeout>
 8003148:	1e03      	subs	r3, r0, #0
 800314a:	d001      	beq.n	8003150 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e021      	b.n	8003194 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2204      	movs	r2, #4
 8003158:	4013      	ands	r3, r2
 800315a:	2b04      	cmp	r3, #4
 800315c:	d10c      	bne.n	8003178 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2280      	movs	r2, #128	; 0x80
 8003162:	03d1      	lsls	r1, r2, #15
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	4a0d      	ldr	r2, [pc, #52]	; (800319c <UART_CheckIdleState+0x8c>)
 8003168:	9200      	str	r2, [sp, #0]
 800316a:	2200      	movs	r2, #0
 800316c:	f000 f818 	bl	80031a0 <UART_WaitOnFlagUntilTimeout>
 8003170:	1e03      	subs	r3, r0, #0
 8003172:	d001      	beq.n	8003178 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e00d      	b.n	8003194 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2220      	movs	r2, #32
 800317c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2220      	movs	r2, #32
 8003182:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2274      	movs	r2, #116	; 0x74
 800318e:	2100      	movs	r1, #0
 8003190:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	0018      	movs	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	b004      	add	sp, #16
 800319a:	bd80      	pop	{r7, pc}
 800319c:	01ffffff 	.word	0x01ffffff

080031a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b094      	sub	sp, #80	; 0x50
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	603b      	str	r3, [r7, #0]
 80031ac:	1dfb      	adds	r3, r7, #7
 80031ae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031b0:	e0a3      	b.n	80032fa <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031b4:	3301      	adds	r3, #1
 80031b6:	d100      	bne.n	80031ba <UART_WaitOnFlagUntilTimeout+0x1a>
 80031b8:	e09f      	b.n	80032fa <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ba:	f7fd fdf1 	bl	8000da0 <HAL_GetTick>
 80031be:	0002      	movs	r2, r0
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d302      	bcc.n	80031d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80031ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d13d      	bne.n	800324c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031d0:	f3ef 8310 	mrs	r3, PRIMASK
 80031d4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80031d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031d8:	647b      	str	r3, [r7, #68]	; 0x44
 80031da:	2301      	movs	r3, #1
 80031dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e0:	f383 8810 	msr	PRIMASK, r3
}
 80031e4:	46c0      	nop			; (mov r8, r8)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	494c      	ldr	r1, [pc, #304]	; (8003324 <UART_WaitOnFlagUntilTimeout+0x184>)
 80031f2:	400a      	ands	r2, r1
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031f8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fc:	f383 8810 	msr	PRIMASK, r3
}
 8003200:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003202:	f3ef 8310 	mrs	r3, PRIMASK
 8003206:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800320a:	643b      	str	r3, [r7, #64]	; 0x40
 800320c:	2301      	movs	r3, #1
 800320e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003212:	f383 8810 	msr	PRIMASK, r3
}
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2101      	movs	r1, #1
 8003224:	438a      	bics	r2, r1
 8003226:	609a      	str	r2, [r3, #8]
 8003228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800322a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800322c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800322e:	f383 8810 	msr	PRIMASK, r3
}
 8003232:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2220      	movs	r2, #32
 8003238:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2220      	movs	r2, #32
 800323e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2274      	movs	r2, #116	; 0x74
 8003244:	2100      	movs	r1, #0
 8003246:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e067      	b.n	800331c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2204      	movs	r2, #4
 8003254:	4013      	ands	r3, r2
 8003256:	d050      	beq.n	80032fa <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	69da      	ldr	r2, [r3, #28]
 800325e:	2380      	movs	r3, #128	; 0x80
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	401a      	ands	r2, r3
 8003264:	2380      	movs	r3, #128	; 0x80
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	429a      	cmp	r2, r3
 800326a:	d146      	bne.n	80032fa <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2280      	movs	r2, #128	; 0x80
 8003272:	0112      	lsls	r2, r2, #4
 8003274:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003276:	f3ef 8310 	mrs	r3, PRIMASK
 800327a:	613b      	str	r3, [r7, #16]
  return(result);
 800327c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800327e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003280:	2301      	movs	r3, #1
 8003282:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	f383 8810 	msr	PRIMASK, r3
}
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4923      	ldr	r1, [pc, #140]	; (8003324 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003298:	400a      	ands	r2, r1
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800329e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	f383 8810 	msr	PRIMASK, r3
}
 80032a6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032a8:	f3ef 8310 	mrs	r3, PRIMASK
 80032ac:	61fb      	str	r3, [r7, #28]
  return(result);
 80032ae:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80032b2:	2301      	movs	r3, #1
 80032b4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	f383 8810 	msr	PRIMASK, r3
}
 80032bc:	46c0      	nop			; (mov r8, r8)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2101      	movs	r1, #1
 80032ca:	438a      	bics	r2, r1
 80032cc:	609a      	str	r2, [r3, #8]
 80032ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	f383 8810 	msr	PRIMASK, r3
}
 80032d8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2220      	movs	r2, #32
 80032de:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2220      	movs	r2, #32
 80032e4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2280      	movs	r2, #128	; 0x80
 80032ea:	2120      	movs	r1, #32
 80032ec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2274      	movs	r2, #116	; 0x74
 80032f2:	2100      	movs	r1, #0
 80032f4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e010      	b.n	800331c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	4013      	ands	r3, r2
 8003304:	68ba      	ldr	r2, [r7, #8]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	425a      	negs	r2, r3
 800330a:	4153      	adcs	r3, r2
 800330c:	b2db      	uxtb	r3, r3
 800330e:	001a      	movs	r2, r3
 8003310:	1dfb      	adds	r3, r7, #7
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	429a      	cmp	r2, r3
 8003316:	d100      	bne.n	800331a <UART_WaitOnFlagUntilTimeout+0x17a>
 8003318:	e74b      	b.n	80031b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	0018      	movs	r0, r3
 800331e:	46bd      	mov	sp, r7
 8003320:	b014      	add	sp, #80	; 0x50
 8003322:	bd80      	pop	{r7, pc}
 8003324:	fffffe5f 	.word	0xfffffe5f

08003328 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08c      	sub	sp, #48	; 0x30
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	1dbb      	adds	r3, r7, #6
 8003334:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	1dba      	adds	r2, r7, #6
 8003340:	2158      	movs	r1, #88	; 0x58
 8003342:	8812      	ldrh	r2, [r2, #0]
 8003344:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	1dba      	adds	r2, r7, #6
 800334a:	215a      	movs	r1, #90	; 0x5a
 800334c:	8812      	ldrh	r2, [r2, #0]
 800334e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	2380      	movs	r3, #128	; 0x80
 800335c:	015b      	lsls	r3, r3, #5
 800335e:	429a      	cmp	r2, r3
 8003360:	d10d      	bne.n	800337e <UART_Start_Receive_IT+0x56>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d104      	bne.n	8003374 <UART_Start_Receive_IT+0x4c>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	225c      	movs	r2, #92	; 0x5c
 800336e:	4943      	ldr	r1, [pc, #268]	; (800347c <UART_Start_Receive_IT+0x154>)
 8003370:	5299      	strh	r1, [r3, r2]
 8003372:	e02e      	b.n	80033d2 <UART_Start_Receive_IT+0xaa>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	225c      	movs	r2, #92	; 0x5c
 8003378:	21ff      	movs	r1, #255	; 0xff
 800337a:	5299      	strh	r1, [r3, r2]
 800337c:	e029      	b.n	80033d2 <UART_Start_Receive_IT+0xaa>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10d      	bne.n	80033a2 <UART_Start_Receive_IT+0x7a>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d104      	bne.n	8003398 <UART_Start_Receive_IT+0x70>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	225c      	movs	r2, #92	; 0x5c
 8003392:	21ff      	movs	r1, #255	; 0xff
 8003394:	5299      	strh	r1, [r3, r2]
 8003396:	e01c      	b.n	80033d2 <UART_Start_Receive_IT+0xaa>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	225c      	movs	r2, #92	; 0x5c
 800339c:	217f      	movs	r1, #127	; 0x7f
 800339e:	5299      	strh	r1, [r3, r2]
 80033a0:	e017      	b.n	80033d2 <UART_Start_Receive_IT+0xaa>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	2380      	movs	r3, #128	; 0x80
 80033a8:	055b      	lsls	r3, r3, #21
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d10d      	bne.n	80033ca <UART_Start_Receive_IT+0xa2>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d104      	bne.n	80033c0 <UART_Start_Receive_IT+0x98>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	225c      	movs	r2, #92	; 0x5c
 80033ba:	217f      	movs	r1, #127	; 0x7f
 80033bc:	5299      	strh	r1, [r3, r2]
 80033be:	e008      	b.n	80033d2 <UART_Start_Receive_IT+0xaa>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	225c      	movs	r2, #92	; 0x5c
 80033c4:	213f      	movs	r1, #63	; 0x3f
 80033c6:	5299      	strh	r1, [r3, r2]
 80033c8:	e003      	b.n	80033d2 <UART_Start_Receive_IT+0xaa>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	225c      	movs	r2, #92	; 0x5c
 80033ce:	2100      	movs	r1, #0
 80033d0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2280      	movs	r2, #128	; 0x80
 80033d6:	2100      	movs	r1, #0
 80033d8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2222      	movs	r2, #34	; 0x22
 80033de:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033e0:	f3ef 8310 	mrs	r3, PRIMASK
 80033e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80033e6:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033ea:	2301      	movs	r3, #1
 80033ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	f383 8810 	msr	PRIMASK, r3
}
 80033f4:	46c0      	nop			; (mov r8, r8)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2101      	movs	r1, #1
 8003402:	430a      	orrs	r2, r1
 8003404:	609a      	str	r2, [r3, #8]
 8003406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	f383 8810 	msr	PRIMASK, r3
}
 8003410:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	2380      	movs	r3, #128	; 0x80
 8003418:	015b      	lsls	r3, r3, #5
 800341a:	429a      	cmp	r2, r3
 800341c:	d107      	bne.n	800342e <UART_Start_Receive_IT+0x106>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d103      	bne.n	800342e <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	4a15      	ldr	r2, [pc, #84]	; (8003480 <UART_Start_Receive_IT+0x158>)
 800342a:	665a      	str	r2, [r3, #100]	; 0x64
 800342c:	e002      	b.n	8003434 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	4a14      	ldr	r2, [pc, #80]	; (8003484 <UART_Start_Receive_IT+0x15c>)
 8003432:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2274      	movs	r2, #116	; 0x74
 8003438:	2100      	movs	r1, #0
 800343a:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800343c:	f3ef 8310 	mrs	r3, PRIMASK
 8003440:	613b      	str	r3, [r7, #16]
  return(result);
 8003442:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003444:	62bb      	str	r3, [r7, #40]	; 0x28
 8003446:	2301      	movs	r3, #1
 8003448:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f383 8810 	msr	PRIMASK, r3
}
 8003450:	46c0      	nop			; (mov r8, r8)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2190      	movs	r1, #144	; 0x90
 800345e:	0049      	lsls	r1, r1, #1
 8003460:	430a      	orrs	r2, r1
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003466:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	f383 8810 	msr	PRIMASK, r3
}
 800346e:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	0018      	movs	r0, r3
 8003474:	46bd      	mov	sp, r7
 8003476:	b00c      	add	sp, #48	; 0x30
 8003478:	bd80      	pop	{r7, pc}
 800347a:	46c0      	nop			; (mov r8, r8)
 800347c:	000001ff 	.word	0x000001ff
 8003480:	08003739 	.word	0x08003739
 8003484:	080035d1 	.word	0x080035d1

08003488 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08e      	sub	sp, #56	; 0x38
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003490:	f3ef 8310 	mrs	r3, PRIMASK
 8003494:	617b      	str	r3, [r7, #20]
  return(result);
 8003496:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003498:	637b      	str	r3, [r7, #52]	; 0x34
 800349a:	2301      	movs	r3, #1
 800349c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	f383 8810 	msr	PRIMASK, r3
}
 80034a4:	46c0      	nop			; (mov r8, r8)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4925      	ldr	r1, [pc, #148]	; (8003548 <UART_EndRxTransfer+0xc0>)
 80034b2:	400a      	ands	r2, r1
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	f383 8810 	msr	PRIMASK, r3
}
 80034c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034c2:	f3ef 8310 	mrs	r3, PRIMASK
 80034c6:	623b      	str	r3, [r7, #32]
  return(result);
 80034c8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ca:	633b      	str	r3, [r7, #48]	; 0x30
 80034cc:	2301      	movs	r3, #1
 80034ce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	f383 8810 	msr	PRIMASK, r3
}
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2101      	movs	r1, #1
 80034e4:	438a      	bics	r2, r1
 80034e6:	609a      	str	r2, [r3, #8]
 80034e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ea:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ee:	f383 8810 	msr	PRIMASK, r3
}
 80034f2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d118      	bne.n	800352e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003500:	60bb      	str	r3, [r7, #8]
  return(result);
 8003502:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003504:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003506:	2301      	movs	r3, #1
 8003508:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f383 8810 	msr	PRIMASK, r3
}
 8003510:	46c0      	nop			; (mov r8, r8)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2110      	movs	r1, #16
 800351e:	438a      	bics	r2, r1
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003524:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	f383 8810 	msr	PRIMASK, r3
}
 800352c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2220      	movs	r2, #32
 8003532:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003540:	46c0      	nop			; (mov r8, r8)
 8003542:	46bd      	mov	sp, r7
 8003544:	b00e      	add	sp, #56	; 0x38
 8003546:	bd80      	pop	{r7, pc}
 8003548:	fffffedf 	.word	0xfffffedf

0800354c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003558:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	225a      	movs	r2, #90	; 0x5a
 800355e:	2100      	movs	r1, #0
 8003560:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2252      	movs	r2, #82	; 0x52
 8003566:	2100      	movs	r1, #0
 8003568:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	0018      	movs	r0, r3
 800356e:	f7ff fabd 	bl	8002aec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003572:	46c0      	nop			; (mov r8, r8)
 8003574:	46bd      	mov	sp, r7
 8003576:	b004      	add	sp, #16
 8003578:	bd80      	pop	{r7, pc}

0800357a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b086      	sub	sp, #24
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003582:	f3ef 8310 	mrs	r3, PRIMASK
 8003586:	60bb      	str	r3, [r7, #8]
  return(result);
 8003588:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800358a:	617b      	str	r3, [r7, #20]
 800358c:	2301      	movs	r3, #1
 800358e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f383 8810 	msr	PRIMASK, r3
}
 8003596:	46c0      	nop			; (mov r8, r8)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2140      	movs	r1, #64	; 0x40
 80035a4:	438a      	bics	r2, r1
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	f383 8810 	msr	PRIMASK, r3
}
 80035b2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2220      	movs	r2, #32
 80035b8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	0018      	movs	r0, r3
 80035c4:	f7fd f8ae 	bl	8000724 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035c8:	46c0      	nop			; (mov r8, r8)
 80035ca:	46bd      	mov	sp, r7
 80035cc:	b006      	add	sp, #24
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b090      	sub	sp, #64	; 0x40
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80035d8:	203e      	movs	r0, #62	; 0x3e
 80035da:	183b      	adds	r3, r7, r0
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	215c      	movs	r1, #92	; 0x5c
 80035e0:	5a52      	ldrh	r2, [r2, r1]
 80035e2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035e8:	2b22      	cmp	r3, #34	; 0x22
 80035ea:	d000      	beq.n	80035ee <UART_RxISR_8BIT+0x1e>
 80035ec:	e095      	b.n	800371a <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035f4:	213c      	movs	r1, #60	; 0x3c
 80035f6:	187b      	adds	r3, r7, r1
 80035f8:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80035fa:	187b      	adds	r3, r7, r1
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	183b      	adds	r3, r7, r0
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	b2d9      	uxtb	r1, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360a:	400a      	ands	r2, r1
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	225a      	movs	r2, #90	; 0x5a
 800361e:	5a9b      	ldrh	r3, [r3, r2]
 8003620:	b29b      	uxth	r3, r3
 8003622:	3b01      	subs	r3, #1
 8003624:	b299      	uxth	r1, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	225a      	movs	r2, #90	; 0x5a
 800362a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	225a      	movs	r2, #90	; 0x5a
 8003630:	5a9b      	ldrh	r3, [r3, r2]
 8003632:	b29b      	uxth	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d178      	bne.n	800372a <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003638:	f3ef 8310 	mrs	r3, PRIMASK
 800363c:	61bb      	str	r3, [r7, #24]
  return(result);
 800363e:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003640:	63bb      	str	r3, [r7, #56]	; 0x38
 8003642:	2301      	movs	r3, #1
 8003644:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	f383 8810 	msr	PRIMASK, r3
}
 800364c:	46c0      	nop			; (mov r8, r8)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4936      	ldr	r1, [pc, #216]	; (8003734 <UART_RxISR_8BIT+0x164>)
 800365a:	400a      	ands	r2, r1
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003660:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	f383 8810 	msr	PRIMASK, r3
}
 8003668:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800366a:	f3ef 8310 	mrs	r3, PRIMASK
 800366e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003672:	637b      	str	r3, [r7, #52]	; 0x34
 8003674:	2301      	movs	r3, #1
 8003676:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367a:	f383 8810 	msr	PRIMASK, r3
}
 800367e:	46c0      	nop			; (mov r8, r8)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689a      	ldr	r2, [r3, #8]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2101      	movs	r1, #1
 800368c:	438a      	bics	r2, r1
 800368e:	609a      	str	r2, [r3, #8]
 8003690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003692:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003696:	f383 8810 	msr	PRIMASK, r3
}
 800369a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2220      	movs	r2, #32
 80036a0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d12f      	bne.n	8003710 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036b6:	f3ef 8310 	mrs	r3, PRIMASK
 80036ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80036bc:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036be:	633b      	str	r3, [r7, #48]	; 0x30
 80036c0:	2301      	movs	r3, #1
 80036c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f383 8810 	msr	PRIMASK, r3
}
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2110      	movs	r1, #16
 80036d8:	438a      	bics	r2, r1
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f383 8810 	msr	PRIMASK, r3
}
 80036e6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	2210      	movs	r2, #16
 80036f0:	4013      	ands	r3, r2
 80036f2:	2b10      	cmp	r3, #16
 80036f4:	d103      	bne.n	80036fe <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2210      	movs	r2, #16
 80036fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2258      	movs	r2, #88	; 0x58
 8003702:	5a9a      	ldrh	r2, [r3, r2]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	0011      	movs	r1, r2
 8003708:	0018      	movs	r0, r3
 800370a:	f7ff f9f7 	bl	8002afc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800370e:	e00c      	b.n	800372a <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	0018      	movs	r0, r3
 8003714:	f7fc ffae 	bl	8000674 <HAL_UART_RxCpltCallback>
}
 8003718:	e007      	b.n	800372a <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	699a      	ldr	r2, [r3, #24]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2108      	movs	r1, #8
 8003726:	430a      	orrs	r2, r1
 8003728:	619a      	str	r2, [r3, #24]
}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	46bd      	mov	sp, r7
 800372e:	b010      	add	sp, #64	; 0x40
 8003730:	bd80      	pop	{r7, pc}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	fffffedf 	.word	0xfffffedf

08003738 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b090      	sub	sp, #64	; 0x40
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003740:	203e      	movs	r0, #62	; 0x3e
 8003742:	183b      	adds	r3, r7, r0
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	215c      	movs	r1, #92	; 0x5c
 8003748:	5a52      	ldrh	r2, [r2, r1]
 800374a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003750:	2b22      	cmp	r3, #34	; 0x22
 8003752:	d000      	beq.n	8003756 <UART_RxISR_16BIT+0x1e>
 8003754:	e095      	b.n	8003882 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800375c:	213c      	movs	r1, #60	; 0x3c
 800375e:	187b      	adds	r3, r7, r1
 8003760:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003766:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8003768:	187b      	adds	r3, r7, r1
 800376a:	183a      	adds	r2, r7, r0
 800376c:	881b      	ldrh	r3, [r3, #0]
 800376e:	8812      	ldrh	r2, [r2, #0]
 8003770:	4013      	ands	r3, r2
 8003772:	b29a      	uxth	r2, r3
 8003774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003776:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377c:	1c9a      	adds	r2, r3, #2
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	225a      	movs	r2, #90	; 0x5a
 8003786:	5a9b      	ldrh	r3, [r3, r2]
 8003788:	b29b      	uxth	r3, r3
 800378a:	3b01      	subs	r3, #1
 800378c:	b299      	uxth	r1, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	225a      	movs	r2, #90	; 0x5a
 8003792:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	225a      	movs	r2, #90	; 0x5a
 8003798:	5a9b      	ldrh	r3, [r3, r2]
 800379a:	b29b      	uxth	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d178      	bne.n	8003892 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037a0:	f3ef 8310 	mrs	r3, PRIMASK
 80037a4:	617b      	str	r3, [r7, #20]
  return(result);
 80037a6:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037a8:	637b      	str	r3, [r7, #52]	; 0x34
 80037aa:	2301      	movs	r3, #1
 80037ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	f383 8810 	msr	PRIMASK, r3
}
 80037b4:	46c0      	nop			; (mov r8, r8)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4936      	ldr	r1, [pc, #216]	; (800389c <UART_RxISR_16BIT+0x164>)
 80037c2:	400a      	ands	r2, r1
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	f383 8810 	msr	PRIMASK, r3
}
 80037d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037d2:	f3ef 8310 	mrs	r3, PRIMASK
 80037d6:	623b      	str	r3, [r7, #32]
  return(result);
 80037d8:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037da:	633b      	str	r3, [r7, #48]	; 0x30
 80037dc:	2301      	movs	r3, #1
 80037de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	f383 8810 	msr	PRIMASK, r3
}
 80037e6:	46c0      	nop			; (mov r8, r8)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689a      	ldr	r2, [r3, #8]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2101      	movs	r1, #1
 80037f4:	438a      	bics	r2, r1
 80037f6:	609a      	str	r2, [r3, #8]
 80037f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fe:	f383 8810 	msr	PRIMASK, r3
}
 8003802:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2220      	movs	r2, #32
 8003808:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003814:	2b01      	cmp	r3, #1
 8003816:	d12f      	bne.n	8003878 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800381e:	f3ef 8310 	mrs	r3, PRIMASK
 8003822:	60bb      	str	r3, [r7, #8]
  return(result);
 8003824:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003828:	2301      	movs	r3, #1
 800382a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f383 8810 	msr	PRIMASK, r3
}
 8003832:	46c0      	nop			; (mov r8, r8)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2110      	movs	r1, #16
 8003840:	438a      	bics	r2, r1
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003846:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f383 8810 	msr	PRIMASK, r3
}
 800384e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	2210      	movs	r2, #16
 8003858:	4013      	ands	r3, r2
 800385a:	2b10      	cmp	r3, #16
 800385c:	d103      	bne.n	8003866 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2210      	movs	r2, #16
 8003864:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2258      	movs	r2, #88	; 0x58
 800386a:	5a9a      	ldrh	r2, [r3, r2]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	0011      	movs	r1, r2
 8003870:	0018      	movs	r0, r3
 8003872:	f7ff f943 	bl	8002afc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003876:	e00c      	b.n	8003892 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	0018      	movs	r0, r3
 800387c:	f7fc fefa 	bl	8000674 <HAL_UART_RxCpltCallback>
}
 8003880:	e007      	b.n	8003892 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	699a      	ldr	r2, [r3, #24]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2108      	movs	r1, #8
 800388e:	430a      	orrs	r2, r1
 8003890:	619a      	str	r2, [r3, #24]
}
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	46bd      	mov	sp, r7
 8003896:	b010      	add	sp, #64	; 0x40
 8003898:	bd80      	pop	{r7, pc}
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	fffffedf 	.word	0xfffffedf

080038a0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80038a8:	46c0      	nop			; (mov r8, r8)
 80038aa:	46bd      	mov	sp, r7
 80038ac:	b002      	add	sp, #8
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <__libc_init_array>:
 80038b0:	b570      	push	{r4, r5, r6, lr}
 80038b2:	2600      	movs	r6, #0
 80038b4:	4d0c      	ldr	r5, [pc, #48]	; (80038e8 <__libc_init_array+0x38>)
 80038b6:	4c0d      	ldr	r4, [pc, #52]	; (80038ec <__libc_init_array+0x3c>)
 80038b8:	1b64      	subs	r4, r4, r5
 80038ba:	10a4      	asrs	r4, r4, #2
 80038bc:	42a6      	cmp	r6, r4
 80038be:	d109      	bne.n	80038d4 <__libc_init_array+0x24>
 80038c0:	2600      	movs	r6, #0
 80038c2:	f000 f821 	bl	8003908 <_init>
 80038c6:	4d0a      	ldr	r5, [pc, #40]	; (80038f0 <__libc_init_array+0x40>)
 80038c8:	4c0a      	ldr	r4, [pc, #40]	; (80038f4 <__libc_init_array+0x44>)
 80038ca:	1b64      	subs	r4, r4, r5
 80038cc:	10a4      	asrs	r4, r4, #2
 80038ce:	42a6      	cmp	r6, r4
 80038d0:	d105      	bne.n	80038de <__libc_init_array+0x2e>
 80038d2:	bd70      	pop	{r4, r5, r6, pc}
 80038d4:	00b3      	lsls	r3, r6, #2
 80038d6:	58eb      	ldr	r3, [r5, r3]
 80038d8:	4798      	blx	r3
 80038da:	3601      	adds	r6, #1
 80038dc:	e7ee      	b.n	80038bc <__libc_init_array+0xc>
 80038de:	00b3      	lsls	r3, r6, #2
 80038e0:	58eb      	ldr	r3, [r5, r3]
 80038e2:	4798      	blx	r3
 80038e4:	3601      	adds	r6, #1
 80038e6:	e7f2      	b.n	80038ce <__libc_init_array+0x1e>
 80038e8:	080039ac 	.word	0x080039ac
 80038ec:	080039ac 	.word	0x080039ac
 80038f0:	080039ac 	.word	0x080039ac
 80038f4:	080039b0 	.word	0x080039b0

080038f8 <memset>:
 80038f8:	0003      	movs	r3, r0
 80038fa:	1882      	adds	r2, r0, r2
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d100      	bne.n	8003902 <memset+0xa>
 8003900:	4770      	bx	lr
 8003902:	7019      	strb	r1, [r3, #0]
 8003904:	3301      	adds	r3, #1
 8003906:	e7f9      	b.n	80038fc <memset+0x4>

08003908 <_init>:
 8003908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800390e:	bc08      	pop	{r3}
 8003910:	469e      	mov	lr, r3
 8003912:	4770      	bx	lr

08003914 <_fini>:
 8003914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800391a:	bc08      	pop	{r3}
 800391c:	469e      	mov	lr, r3
 800391e:	4770      	bx	lr
